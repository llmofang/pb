// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketDataSet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "marketDataSet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* MarketDataSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_marketDataSet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_marketDataSet_2eproto() {
  protobuf_AddDesc_marketDataSet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "marketDataSet.proto");
  GOOGLE_CHECK(file != NULL);
  MarketDataSet_descriptor_ = file->message_type(0);
  static const int MarketDataSet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSet, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSet, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSet, transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSet, orderqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSet, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSet, future_),
  };
  MarketDataSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MarketDataSet_descriptor_,
      MarketDataSet::internal_default_instance(),
      MarketDataSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSet, _has_bits_),
      -1,
      -1,
      sizeof(MarketDataSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataSet, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_marketDataSet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MarketDataSet_descriptor_, MarketDataSet::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_marketDataSet_2eproto() {
  MarketDataSet_default_instance_.Shutdown();
  delete MarketDataSet_reflection_;
}

void protobuf_InitDefaults_marketDataSet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::comm::protobuf_InitDefaults_marketData_2eproto();
  ::comm::protobuf_InitDefaults_transactionData_2eproto();
  ::comm::protobuf_InitDefaults_orderqueueData_2eproto();
  ::comm::protobuf_InitDefaults_indexData_2eproto();
  ::comm::protobuf_InitDefaults_futureData_2eproto();
  MarketDataSet_default_instance_.DefaultConstruct();
  MarketDataSet_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_marketDataSet_2eproto_once_);
void protobuf_InitDefaults_marketDataSet_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_marketDataSet_2eproto_once_,
                 &protobuf_InitDefaults_marketDataSet_2eproto_impl);
}
void protobuf_AddDesc_marketDataSet_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_marketDataSet_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023marketDataSet.proto\022\004comm\032\020marketData."
    "proto\032\025transactionData.proto\032\024orderqueue"
    "Data.proto\032\017indexData.proto\032\020futureData."
    "proto\"\331\001\n\rMarketDataSet\022\020\n\010DataType\030\001 \002("
    "\005\022\036\n\004Tick\030\002 \001(\0132\020.comm.MarketData\022*\n\013Tra"
    "nsaction\030\003 \001(\0132\025.comm.TransactionData\022(\n"
    "\nOrderQueue\030\004 \001(\0132\024.comm.OrderQueueData\022"
    "\036\n\005Index\030\005 \001(\0132\017.comm.IndexData\022 \n\006futur"
    "e\030\006 \001(\0132\020.comm.FutureData", 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marketDataSet.proto", &protobuf_RegisterTypes);
  ::comm::protobuf_AddDesc_marketData_2eproto();
  ::comm::protobuf_AddDesc_transactionData_2eproto();
  ::comm::protobuf_AddDesc_orderqueueData_2eproto();
  ::comm::protobuf_AddDesc_indexData_2eproto();
  ::comm::protobuf_AddDesc_futureData_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marketDataSet_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_marketDataSet_2eproto_once_);
void protobuf_AddDesc_marketDataSet_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_marketDataSet_2eproto_once_,
                 &protobuf_AddDesc_marketDataSet_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_marketDataSet_2eproto {
  StaticDescriptorInitializer_marketDataSet_2eproto() {
    protobuf_AddDesc_marketDataSet_2eproto();
  }
} static_descriptor_initializer_marketDataSet_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketDataSet::kDataTypeFieldNumber;
const int MarketDataSet::kTickFieldNumber;
const int MarketDataSet::kTransactionFieldNumber;
const int MarketDataSet::kOrderQueueFieldNumber;
const int MarketDataSet::kIndexFieldNumber;
const int MarketDataSet::kFutureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketDataSet::MarketDataSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_marketDataSet_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.MarketDataSet)
}

void MarketDataSet::InitAsDefaultInstance() {
  tick_ = const_cast< ::comm::MarketData*>(
      ::comm::MarketData::internal_default_instance());
  transaction_ = const_cast< ::comm::TransactionData*>(
      ::comm::TransactionData::internal_default_instance());
  orderqueue_ = const_cast< ::comm::OrderQueueData*>(
      ::comm::OrderQueueData::internal_default_instance());
  index_ = const_cast< ::comm::IndexData*>(
      ::comm::IndexData::internal_default_instance());
  future_ = const_cast< ::comm::FutureData*>(
      ::comm::FutureData::internal_default_instance());
}

MarketDataSet::MarketDataSet(const MarketDataSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.MarketDataSet)
}

void MarketDataSet::SharedCtor() {
  _cached_size_ = 0;
  tick_ = NULL;
  transaction_ = NULL;
  orderqueue_ = NULL;
  index_ = NULL;
  future_ = NULL;
  datatype_ = 0;
}

MarketDataSet::~MarketDataSet() {
  // @@protoc_insertion_point(destructor:comm.MarketDataSet)
  SharedDtor();
}

void MarketDataSet::SharedDtor() {
  if (this != &MarketDataSet_default_instance_.get()) {
    delete tick_;
    delete transaction_;
    delete orderqueue_;
    delete index_;
    delete future_;
  }
}

void MarketDataSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataSet_descriptor_;
}

const MarketDataSet& MarketDataSet::default_instance() {
  protobuf_InitDefaults_marketDataSet_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MarketDataSet> MarketDataSet_default_instance_;

MarketDataSet* MarketDataSet::New(::google::protobuf::Arena* arena) const {
  MarketDataSet* n = new MarketDataSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketDataSet::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.MarketDataSet)
  if (_has_bits_[0 / 32] & 63u) {
    datatype_ = 0;
    if (has_tick()) {
      if (tick_ != NULL) tick_->::comm::MarketData::Clear();
    }
    if (has_transaction()) {
      if (transaction_ != NULL) transaction_->::comm::TransactionData::Clear();
    }
    if (has_orderqueue()) {
      if (orderqueue_ != NULL) orderqueue_->::comm::OrderQueueData::Clear();
    }
    if (has_index()) {
      if (index_ != NULL) index_->::comm::IndexData::Clear();
    }
    if (has_future()) {
      if (future_ != NULL) future_->::comm::FutureData::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MarketDataSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.MarketDataSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 DataType = 1;
      case 1: {
        if (tag == 8) {
          set_has_datatype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datatype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Tick;
        break;
      }

      // optional .comm.MarketData Tick = 2;
      case 2: {
        if (tag == 18) {
         parse_Tick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tick()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Transaction;
        break;
      }

      // optional .comm.TransactionData Transaction = 3;
      case 3: {
        if (tag == 26) {
         parse_Transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_OrderQueue;
        break;
      }

      // optional .comm.OrderQueueData OrderQueue = 4;
      case 4: {
        if (tag == 34) {
         parse_OrderQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orderqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Index;
        break;
      }

      // optional .comm.IndexData Index = 5;
      case 5: {
        if (tag == 42) {
         parse_Index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_future;
        break;
      }

      // optional .comm.FutureData future = 6;
      case 6: {
        if (tag == 50) {
         parse_future:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_future()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.MarketDataSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.MarketDataSet)
  return false;
#undef DO_
}

void MarketDataSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.MarketDataSet)
  // required int32 DataType = 1;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->datatype(), output);
  }

  // optional .comm.MarketData Tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tick_, output);
  }

  // optional .comm.TransactionData Transaction = 3;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transaction_, output);
  }

  // optional .comm.OrderQueueData OrderQueue = 4;
  if (has_orderqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->orderqueue_, output);
  }

  // optional .comm.IndexData Index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->index_, output);
  }

  // optional .comm.FutureData future = 6;
  if (has_future()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->future_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.MarketDataSet)
}

::google::protobuf::uint8* MarketDataSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.MarketDataSet)
  // required int32 DataType = 1;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->datatype(), target);
  }

  // optional .comm.MarketData Tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tick_, false, target);
  }

  // optional .comm.TransactionData Transaction = 3;
  if (has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->transaction_, false, target);
  }

  // optional .comm.OrderQueueData OrderQueue = 4;
  if (has_orderqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->orderqueue_, false, target);
  }

  // optional .comm.IndexData Index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->index_, false, target);
  }

  // optional .comm.FutureData future = 6;
  if (has_future()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->future_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.MarketDataSet)
  return target;
}

size_t MarketDataSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.MarketDataSet)
  size_t total_size = 0;

  // required int32 DataType = 1;
  if (has_datatype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->datatype());
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional .comm.MarketData Tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tick_);
    }

    // optional .comm.TransactionData Transaction = 3;
    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->transaction_);
    }

    // optional .comm.OrderQueueData OrderQueue = 4;
    if (has_orderqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orderqueue_);
    }

    // optional .comm.IndexData Index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->index_);
    }

    // optional .comm.FutureData future = 6;
    if (has_future()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->future_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.MarketDataSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MarketDataSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketDataSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.MarketDataSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.MarketDataSet)
    UnsafeMergeFrom(*source);
  }
}

void MarketDataSet::MergeFrom(const MarketDataSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.MarketDataSet)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MarketDataSet::UnsafeMergeFrom(const MarketDataSet& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_tick()) {
      mutable_tick()->::comm::MarketData::MergeFrom(from.tick());
    }
    if (from.has_transaction()) {
      mutable_transaction()->::comm::TransactionData::MergeFrom(from.transaction());
    }
    if (from.has_orderqueue()) {
      mutable_orderqueue()->::comm::OrderQueueData::MergeFrom(from.orderqueue());
    }
    if (from.has_index()) {
      mutable_index()->::comm::IndexData::MergeFrom(from.index());
    }
    if (from.has_future()) {
      mutable_future()->::comm::FutureData::MergeFrom(from.future());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MarketDataSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.MarketDataSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataSet::CopyFrom(const MarketDataSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.MarketDataSet)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MarketDataSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tick()) {
    if (!this->tick_->IsInitialized()) return false;
  }
  if (has_transaction()) {
    if (!this->transaction_->IsInitialized()) return false;
  }
  if (has_orderqueue()) {
    if (!this->orderqueue_->IsInitialized()) return false;
  }
  if (has_index()) {
    if (!this->index_->IsInitialized()) return false;
  }
  if (has_future()) {
    if (!this->future_->IsInitialized()) return false;
  }
  return true;
}

void MarketDataSet::Swap(MarketDataSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketDataSet::InternalSwap(MarketDataSet* other) {
  std::swap(datatype_, other->datatype_);
  std::swap(tick_, other->tick_);
  std::swap(transaction_, other->transaction_);
  std::swap(orderqueue_, other->orderqueue_);
  std::swap(index_, other->index_);
  std::swap(future_, other->future_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarketDataSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataSet_descriptor_;
  metadata.reflection = MarketDataSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketDataSet

// required int32 DataType = 1;
bool MarketDataSet::has_datatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarketDataSet::set_has_datatype() {
  _has_bits_[0] |= 0x00000001u;
}
void MarketDataSet::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarketDataSet::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
::google::protobuf::int32 MarketDataSet::datatype() const {
  // @@protoc_insertion_point(field_get:comm.MarketDataSet.DataType)
  return datatype_;
}
void MarketDataSet::set_datatype(::google::protobuf::int32 value) {
  set_has_datatype();
  datatype_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketDataSet.DataType)
}

// optional .comm.MarketData Tick = 2;
bool MarketDataSet::has_tick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarketDataSet::set_has_tick() {
  _has_bits_[0] |= 0x00000002u;
}
void MarketDataSet::clear_has_tick() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarketDataSet::clear_tick() {
  if (tick_ != NULL) tick_->::comm::MarketData::Clear();
  clear_has_tick();
}
const ::comm::MarketData& MarketDataSet::tick() const {
  // @@protoc_insertion_point(field_get:comm.MarketDataSet.Tick)
  return tick_ != NULL ? *tick_
                         : *::comm::MarketData::internal_default_instance();
}
::comm::MarketData* MarketDataSet::mutable_tick() {
  set_has_tick();
  if (tick_ == NULL) {
    tick_ = new ::comm::MarketData;
  }
  // @@protoc_insertion_point(field_mutable:comm.MarketDataSet.Tick)
  return tick_;
}
::comm::MarketData* MarketDataSet::release_tick() {
  // @@protoc_insertion_point(field_release:comm.MarketDataSet.Tick)
  clear_has_tick();
  ::comm::MarketData* temp = tick_;
  tick_ = NULL;
  return temp;
}
void MarketDataSet::set_allocated_tick(::comm::MarketData* tick) {
  delete tick_;
  tick_ = tick;
  if (tick) {
    set_has_tick();
  } else {
    clear_has_tick();
  }
  // @@protoc_insertion_point(field_set_allocated:comm.MarketDataSet.Tick)
}

// optional .comm.TransactionData Transaction = 3;
bool MarketDataSet::has_transaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarketDataSet::set_has_transaction() {
  _has_bits_[0] |= 0x00000004u;
}
void MarketDataSet::clear_has_transaction() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarketDataSet::clear_transaction() {
  if (transaction_ != NULL) transaction_->::comm::TransactionData::Clear();
  clear_has_transaction();
}
const ::comm::TransactionData& MarketDataSet::transaction() const {
  // @@protoc_insertion_point(field_get:comm.MarketDataSet.Transaction)
  return transaction_ != NULL ? *transaction_
                         : *::comm::TransactionData::internal_default_instance();
}
::comm::TransactionData* MarketDataSet::mutable_transaction() {
  set_has_transaction();
  if (transaction_ == NULL) {
    transaction_ = new ::comm::TransactionData;
  }
  // @@protoc_insertion_point(field_mutable:comm.MarketDataSet.Transaction)
  return transaction_;
}
::comm::TransactionData* MarketDataSet::release_transaction() {
  // @@protoc_insertion_point(field_release:comm.MarketDataSet.Transaction)
  clear_has_transaction();
  ::comm::TransactionData* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
void MarketDataSet::set_allocated_transaction(::comm::TransactionData* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    set_has_transaction();
  } else {
    clear_has_transaction();
  }
  // @@protoc_insertion_point(field_set_allocated:comm.MarketDataSet.Transaction)
}

// optional .comm.OrderQueueData OrderQueue = 4;
bool MarketDataSet::has_orderqueue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarketDataSet::set_has_orderqueue() {
  _has_bits_[0] |= 0x00000008u;
}
void MarketDataSet::clear_has_orderqueue() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarketDataSet::clear_orderqueue() {
  if (orderqueue_ != NULL) orderqueue_->::comm::OrderQueueData::Clear();
  clear_has_orderqueue();
}
const ::comm::OrderQueueData& MarketDataSet::orderqueue() const {
  // @@protoc_insertion_point(field_get:comm.MarketDataSet.OrderQueue)
  return orderqueue_ != NULL ? *orderqueue_
                         : *::comm::OrderQueueData::internal_default_instance();
}
::comm::OrderQueueData* MarketDataSet::mutable_orderqueue() {
  set_has_orderqueue();
  if (orderqueue_ == NULL) {
    orderqueue_ = new ::comm::OrderQueueData;
  }
  // @@protoc_insertion_point(field_mutable:comm.MarketDataSet.OrderQueue)
  return orderqueue_;
}
::comm::OrderQueueData* MarketDataSet::release_orderqueue() {
  // @@protoc_insertion_point(field_release:comm.MarketDataSet.OrderQueue)
  clear_has_orderqueue();
  ::comm::OrderQueueData* temp = orderqueue_;
  orderqueue_ = NULL;
  return temp;
}
void MarketDataSet::set_allocated_orderqueue(::comm::OrderQueueData* orderqueue) {
  delete orderqueue_;
  orderqueue_ = orderqueue;
  if (orderqueue) {
    set_has_orderqueue();
  } else {
    clear_has_orderqueue();
  }
  // @@protoc_insertion_point(field_set_allocated:comm.MarketDataSet.OrderQueue)
}

// optional .comm.IndexData Index = 5;
bool MarketDataSet::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MarketDataSet::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
void MarketDataSet::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void MarketDataSet::clear_index() {
  if (index_ != NULL) index_->::comm::IndexData::Clear();
  clear_has_index();
}
const ::comm::IndexData& MarketDataSet::index() const {
  // @@protoc_insertion_point(field_get:comm.MarketDataSet.Index)
  return index_ != NULL ? *index_
                         : *::comm::IndexData::internal_default_instance();
}
::comm::IndexData* MarketDataSet::mutable_index() {
  set_has_index();
  if (index_ == NULL) {
    index_ = new ::comm::IndexData;
  }
  // @@protoc_insertion_point(field_mutable:comm.MarketDataSet.Index)
  return index_;
}
::comm::IndexData* MarketDataSet::release_index() {
  // @@protoc_insertion_point(field_release:comm.MarketDataSet.Index)
  clear_has_index();
  ::comm::IndexData* temp = index_;
  index_ = NULL;
  return temp;
}
void MarketDataSet::set_allocated_index(::comm::IndexData* index) {
  delete index_;
  index_ = index;
  if (index) {
    set_has_index();
  } else {
    clear_has_index();
  }
  // @@protoc_insertion_point(field_set_allocated:comm.MarketDataSet.Index)
}

// optional .comm.FutureData future = 6;
bool MarketDataSet::has_future() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MarketDataSet::set_has_future() {
  _has_bits_[0] |= 0x00000020u;
}
void MarketDataSet::clear_has_future() {
  _has_bits_[0] &= ~0x00000020u;
}
void MarketDataSet::clear_future() {
  if (future_ != NULL) future_->::comm::FutureData::Clear();
  clear_has_future();
}
const ::comm::FutureData& MarketDataSet::future() const {
  // @@protoc_insertion_point(field_get:comm.MarketDataSet.future)
  return future_ != NULL ? *future_
                         : *::comm::FutureData::internal_default_instance();
}
::comm::FutureData* MarketDataSet::mutable_future() {
  set_has_future();
  if (future_ == NULL) {
    future_ = new ::comm::FutureData;
  }
  // @@protoc_insertion_point(field_mutable:comm.MarketDataSet.future)
  return future_;
}
::comm::FutureData* MarketDataSet::release_future() {
  // @@protoc_insertion_point(field_release:comm.MarketDataSet.future)
  clear_has_future();
  ::comm::FutureData* temp = future_;
  future_ = NULL;
  return temp;
}
void MarketDataSet::set_allocated_future(::comm::FutureData* future) {
  delete future_;
  future_ = future;
  if (future) {
    set_has_future();
  } else {
    clear_has_future();
  }
  // @@protoc_insertion_point(field_set_allocated:comm.MarketDataSet.future)
}

inline const MarketDataSet* MarketDataSet::internal_default_instance() {
  return &MarketDataSet_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
