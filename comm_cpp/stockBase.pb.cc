// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stockBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stockBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* StockBaseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockBaseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockBase_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stockBase_2eproto() {
  protobuf_AddDesc_stockBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stockBase.proto");
  GOOGLE_CHECK(file != NULL);
  StockBaseList_descriptor_ = file->message_type(0);
  static const int StockBaseList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBaseList, infolist_),
  };
  StockBaseList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockBaseList_descriptor_,
      StockBaseList::default_instance_,
      StockBaseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBaseList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBaseList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockBaseList));
  StockBase_descriptor_ = file->message_type(1);
  static const int StockBase_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, htcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, securityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, chispelling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, englishname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, securitysubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, listdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, outstandingshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, publicfloatsharequantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, tradingphasecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, preclosepx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, maxpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, minpx_),
  };
  StockBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockBase_descriptor_,
      StockBase::default_instance_,
      StockBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockBase));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stockBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockBaseList_descriptor_, &StockBaseList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockBase_descriptor_, &StockBase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stockBase_2eproto() {
  delete StockBaseList::default_instance_;
  delete StockBaseList_reflection_;
  delete StockBase::default_instance_;
  delete StockBase_reflection_;
}

void protobuf_AddDesc_stockBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017stockBase.proto\022\004comm\"2\n\rStockBaseList"
    "\022!\n\010InfoList\030\001 \003(\0132\017.comm.StockBase\"\356\002\n\t"
    "StockBase\022\016\n\006HTCode\030\001 \002(\t\022\022\n\nSecurityID\030"
    "\002 \002(\t\022\016\n\006Symbol\030\003 \002(\t\022\023\n\013ChiSpelling\030\004 \002"
    "(\t\022\023\n\013EnglishName\030\005 \002(\t\022\030\n\020SecurityIDSou"
    "rce\030\006 \002(\005\022\024\n\014SecurityType\030\007 \002(\005\022\027\n\017Secur"
    "itySubType\030\010 \002(\t\022\020\n\010ListDate\030\t \002(\t\022\020\n\010Cu"
    "rrency\030\n \002(\t\022\030\n\020OutstandingShare\030\013 \002(\003\022 "
    "\n\030PublicFloatShareQuantity\030\014 \002(\003\022\016\n\006MDDa"
    "te\030\r \002(\005\022\030\n\020TradingPhaseCode\030\016 \002(\t\022\022\n\nPr"
    "eClosePx\030\017 \002(\003\022\r\n\005MaxPx\030\020 \002(\003\022\r\n\005MinPx\030\021"
    " \002(\003", 444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stockBase.proto", &protobuf_RegisterTypes);
  StockBaseList::default_instance_ = new StockBaseList();
  StockBase::default_instance_ = new StockBase();
  StockBaseList::default_instance_->InitAsDefaultInstance();
  StockBase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stockBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stockBase_2eproto {
  StaticDescriptorInitializer_stockBase_2eproto() {
    protobuf_AddDesc_stockBase_2eproto();
  }
} static_descriptor_initializer_stockBase_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StockBaseList::kInfoListFieldNumber;
#endif  // !_MSC_VER

StockBaseList::StockBaseList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockBaseList::InitAsDefaultInstance() {
}

StockBaseList::StockBaseList(const StockBaseList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockBaseList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockBaseList::~StockBaseList() {
  SharedDtor();
}

void StockBaseList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockBaseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockBaseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockBaseList_descriptor_;
}

const StockBaseList& StockBaseList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockBase_2eproto();
  return *default_instance_;
}

StockBaseList* StockBaseList::default_instance_ = NULL;

StockBaseList* StockBaseList::New() const {
  return new StockBaseList;
}

void StockBaseList::Clear() {
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockBaseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comm.StockBase InfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_InfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockBaseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .comm.StockBase InfoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockBaseList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .comm.StockBase InfoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockBaseList::ByteSize() const {
  int total_size = 0;

  // repeated .comm.StockBase InfoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockBaseList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockBaseList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockBaseList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockBaseList::MergeFrom(const StockBaseList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockBaseList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockBaseList::CopyFrom(const StockBaseList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockBaseList::IsInitialized() const {

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void StockBaseList::Swap(StockBaseList* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockBaseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockBaseList_descriptor_;
  metadata.reflection = StockBaseList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockBase::kHTCodeFieldNumber;
const int StockBase::kSecurityIDFieldNumber;
const int StockBase::kSymbolFieldNumber;
const int StockBase::kChiSpellingFieldNumber;
const int StockBase::kEnglishNameFieldNumber;
const int StockBase::kSecurityIDSourceFieldNumber;
const int StockBase::kSecurityTypeFieldNumber;
const int StockBase::kSecuritySubTypeFieldNumber;
const int StockBase::kListDateFieldNumber;
const int StockBase::kCurrencyFieldNumber;
const int StockBase::kOutstandingShareFieldNumber;
const int StockBase::kPublicFloatShareQuantityFieldNumber;
const int StockBase::kMDDateFieldNumber;
const int StockBase::kTradingPhaseCodeFieldNumber;
const int StockBase::kPreClosePxFieldNumber;
const int StockBase::kMaxPxFieldNumber;
const int StockBase::kMinPxFieldNumber;
#endif  // !_MSC_VER

StockBase::StockBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockBase::InitAsDefaultInstance() {
}

StockBase::StockBase(const StockBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockBase::SharedCtor() {
  _cached_size_ = 0;
  htcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  securityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chispelling_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  englishname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  securityidsource_ = 0;
  securitytype_ = 0;
  securitysubtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outstandingshare_ = GOOGLE_LONGLONG(0);
  publicfloatsharequantity_ = GOOGLE_LONGLONG(0);
  mddate_ = 0;
  tradingphasecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preclosepx_ = GOOGLE_LONGLONG(0);
  maxpx_ = GOOGLE_LONGLONG(0);
  minpx_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockBase::~StockBase() {
  SharedDtor();
}

void StockBase::SharedDtor() {
  if (htcode_ != &::google::protobuf::internal::kEmptyString) {
    delete htcode_;
  }
  if (securityid_ != &::google::protobuf::internal::kEmptyString) {
    delete securityid_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (chispelling_ != &::google::protobuf::internal::kEmptyString) {
    delete chispelling_;
  }
  if (englishname_ != &::google::protobuf::internal::kEmptyString) {
    delete englishname_;
  }
  if (securitysubtype_ != &::google::protobuf::internal::kEmptyString) {
    delete securitysubtype_;
  }
  if (listdate_ != &::google::protobuf::internal::kEmptyString) {
    delete listdate_;
  }
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (tradingphasecode_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingphasecode_;
  }
  if (this != default_instance_) {
  }
}

void StockBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockBase_descriptor_;
}

const StockBase& StockBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stockBase_2eproto();
  return *default_instance_;
}

StockBase* StockBase::default_instance_ = NULL;

StockBase* StockBase::New() const {
  return new StockBase;
}

void StockBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_htcode()) {
      if (htcode_ != &::google::protobuf::internal::kEmptyString) {
        htcode_->clear();
      }
    }
    if (has_securityid()) {
      if (securityid_ != &::google::protobuf::internal::kEmptyString) {
        securityid_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_chispelling()) {
      if (chispelling_ != &::google::protobuf::internal::kEmptyString) {
        chispelling_->clear();
      }
    }
    if (has_englishname()) {
      if (englishname_ != &::google::protobuf::internal::kEmptyString) {
        englishname_->clear();
      }
    }
    securityidsource_ = 0;
    securitytype_ = 0;
    if (has_securitysubtype()) {
      if (securitysubtype_ != &::google::protobuf::internal::kEmptyString) {
        securitysubtype_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_listdate()) {
      if (listdate_ != &::google::protobuf::internal::kEmptyString) {
        listdate_->clear();
      }
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    outstandingshare_ = GOOGLE_LONGLONG(0);
    publicfloatsharequantity_ = GOOGLE_LONGLONG(0);
    mddate_ = 0;
    if (has_tradingphasecode()) {
      if (tradingphasecode_ != &::google::protobuf::internal::kEmptyString) {
        tradingphasecode_->clear();
      }
    }
    preclosepx_ = GOOGLE_LONGLONG(0);
    maxpx_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    minpx_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string HTCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->htcode().data(), this->htcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SecurityID;
        break;
      }

      // required string SecurityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecurityID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->securityid().data(), this->securityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Symbol;
        break;
      }

      // required string Symbol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ChiSpelling;
        break;
      }

      // required string ChiSpelling = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChiSpelling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chispelling()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chispelling().data(), this->chispelling().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EnglishName;
        break;
      }

      // required string EnglishName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EnglishName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_englishname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->englishname().data(), this->englishname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SecurityIDSource;
        break;
      }

      // required int32 SecurityIDSource = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SecurityIDSource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &securityidsource_)));
          set_has_securityidsource();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SecurityType;
        break;
      }

      // required int32 SecurityType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SecurityType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &securitytype_)));
          set_has_securitytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SecuritySubType;
        break;
      }

      // required string SecuritySubType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecuritySubType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitysubtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->securitysubtype().data(), this->securitysubtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ListDate;
        break;
      }

      // required string ListDate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ListDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listdate().data(), this->listdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Currency;
        break;
      }

      // required string Currency = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_OutstandingShare;
        break;
      }

      // required int64 OutstandingShare = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OutstandingShare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &outstandingshare_)));
          set_has_outstandingshare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_PublicFloatShareQuantity;
        break;
      }

      // required int64 PublicFloatShareQuantity = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PublicFloatShareQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publicfloatsharequantity_)));
          set_has_publicfloatsharequantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MDDate;
        break;
      }

      // required int32 MDDate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MDDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
          set_has_mddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_TradingPhaseCode;
        break;
      }

      // required string TradingPhaseCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingPhaseCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingphasecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingphasecode().data(), this->tradingphasecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_PreClosePx;
        break;
      }

      // required int64 PreClosePx = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PreClosePx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclosepx_)));
          set_has_preclosepx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_MaxPx;
        break;
      }

      // required int64 MaxPx = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxPx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxpx_)));
          set_has_maxpx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_MinPx;
        break;
      }

      // required int64 MinPx = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinPx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minpx_)));
          set_has_minpx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string HTCode = 1;
  if (has_htcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->htcode().data(), this->htcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->htcode(), output);
  }

  // required string SecurityID = 2;
  if (has_securityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securityid().data(), this->securityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->securityid(), output);
  }

  // required string Symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->symbol(), output);
  }

  // required string ChiSpelling = 4;
  if (has_chispelling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chispelling().data(), this->chispelling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chispelling(), output);
  }

  // required string EnglishName = 5;
  if (has_englishname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->englishname().data(), this->englishname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->englishname(), output);
  }

  // required int32 SecurityIDSource = 6;
  if (has_securityidsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->securityidsource(), output);
  }

  // required int32 SecurityType = 7;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->securitytype(), output);
  }

  // required string SecuritySubType = 8;
  if (has_securitysubtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securitysubtype().data(), this->securitysubtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->securitysubtype(), output);
  }

  // required string ListDate = 9;
  if (has_listdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listdate().data(), this->listdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->listdate(), output);
  }

  // required string Currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->currency(), output);
  }

  // required int64 OutstandingShare = 11;
  if (has_outstandingshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->outstandingshare(), output);
  }

  // required int64 PublicFloatShareQuantity = 12;
  if (has_publicfloatsharequantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->publicfloatsharequantity(), output);
  }

  // required int32 MDDate = 13;
  if (has_mddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mddate(), output);
  }

  // required string TradingPhaseCode = 14;
  if (has_tradingphasecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingphasecode().data(), this->tradingphasecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->tradingphasecode(), output);
  }

  // required int64 PreClosePx = 15;
  if (has_preclosepx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->preclosepx(), output);
  }

  // required int64 MaxPx = 16;
  if (has_maxpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->maxpx(), output);
  }

  // required int64 MinPx = 17;
  if (has_minpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->minpx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string HTCode = 1;
  if (has_htcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->htcode().data(), this->htcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htcode(), target);
  }

  // required string SecurityID = 2;
  if (has_securityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securityid().data(), this->securityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->securityid(), target);
  }

  // required string Symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // required string ChiSpelling = 4;
  if (has_chispelling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chispelling().data(), this->chispelling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chispelling(), target);
  }

  // required string EnglishName = 5;
  if (has_englishname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->englishname().data(), this->englishname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->englishname(), target);
  }

  // required int32 SecurityIDSource = 6;
  if (has_securityidsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->securityidsource(), target);
  }

  // required int32 SecurityType = 7;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->securitytype(), target);
  }

  // required string SecuritySubType = 8;
  if (has_securitysubtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->securitysubtype().data(), this->securitysubtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->securitysubtype(), target);
  }

  // required string ListDate = 9;
  if (has_listdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listdate().data(), this->listdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->listdate(), target);
  }

  // required string Currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->currency(), target);
  }

  // required int64 OutstandingShare = 11;
  if (has_outstandingshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->outstandingshare(), target);
  }

  // required int64 PublicFloatShareQuantity = 12;
  if (has_publicfloatsharequantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->publicfloatsharequantity(), target);
  }

  // required int32 MDDate = 13;
  if (has_mddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mddate(), target);
  }

  // required string TradingPhaseCode = 14;
  if (has_tradingphasecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingphasecode().data(), this->tradingphasecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tradingphasecode(), target);
  }

  // required int64 PreClosePx = 15;
  if (has_preclosepx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->preclosepx(), target);
  }

  // required int64 MaxPx = 16;
  if (has_maxpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->maxpx(), target);
  }

  // required int64 MinPx = 17;
  if (has_minpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->minpx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string HTCode = 1;
    if (has_htcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->htcode());
    }

    // required string SecurityID = 2;
    if (has_securityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securityid());
    }

    // required string Symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required string ChiSpelling = 4;
    if (has_chispelling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chispelling());
    }

    // required string EnglishName = 5;
    if (has_englishname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->englishname());
    }

    // required int32 SecurityIDSource = 6;
    if (has_securityidsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->securityidsource());
    }

    // required int32 SecurityType = 7;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->securitytype());
    }

    // required string SecuritySubType = 8;
    if (has_securitysubtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->securitysubtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string ListDate = 9;
    if (has_listdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listdate());
    }

    // required string Currency = 10;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // required int64 OutstandingShare = 11;
    if (has_outstandingshare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->outstandingshare());
    }

    // required int64 PublicFloatShareQuantity = 12;
    if (has_publicfloatsharequantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->publicfloatsharequantity());
    }

    // required int32 MDDate = 13;
    if (has_mddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mddate());
    }

    // required string TradingPhaseCode = 14;
    if (has_tradingphasecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingphasecode());
    }

    // required int64 PreClosePx = 15;
    if (has_preclosepx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preclosepx());
    }

    // required int64 MaxPx = 16;
    if (has_maxpx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxpx());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 MinPx = 17;
    if (has_minpx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->minpx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockBase::MergeFrom(const StockBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htcode()) {
      set_htcode(from.htcode());
    }
    if (from.has_securityid()) {
      set_securityid(from.securityid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_chispelling()) {
      set_chispelling(from.chispelling());
    }
    if (from.has_englishname()) {
      set_englishname(from.englishname());
    }
    if (from.has_securityidsource()) {
      set_securityidsource(from.securityidsource());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
    if (from.has_securitysubtype()) {
      set_securitysubtype(from.securitysubtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_listdate()) {
      set_listdate(from.listdate());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_outstandingshare()) {
      set_outstandingshare(from.outstandingshare());
    }
    if (from.has_publicfloatsharequantity()) {
      set_publicfloatsharequantity(from.publicfloatsharequantity());
    }
    if (from.has_mddate()) {
      set_mddate(from.mddate());
    }
    if (from.has_tradingphasecode()) {
      set_tradingphasecode(from.tradingphasecode());
    }
    if (from.has_preclosepx()) {
      set_preclosepx(from.preclosepx());
    }
    if (from.has_maxpx()) {
      set_maxpx(from.maxpx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_minpx()) {
      set_minpx(from.minpx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockBase::CopyFrom(const StockBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void StockBase::Swap(StockBase* other) {
  if (other != this) {
    std::swap(htcode_, other->htcode_);
    std::swap(securityid_, other->securityid_);
    std::swap(symbol_, other->symbol_);
    std::swap(chispelling_, other->chispelling_);
    std::swap(englishname_, other->englishname_);
    std::swap(securityidsource_, other->securityidsource_);
    std::swap(securitytype_, other->securitytype_);
    std::swap(securitysubtype_, other->securitysubtype_);
    std::swap(listdate_, other->listdate_);
    std::swap(currency_, other->currency_);
    std::swap(outstandingshare_, other->outstandingshare_);
    std::swap(publicfloatsharequantity_, other->publicfloatsharequantity_);
    std::swap(mddate_, other->mddate_);
    std::swap(tradingphasecode_, other->tradingphasecode_);
    std::swap(preclosepx_, other->preclosepx_);
    std::swap(maxpx_, other->maxpx_);
    std::swap(minpx_, other->minpx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockBase_descriptor_;
  metadata.reflection = StockBase_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
