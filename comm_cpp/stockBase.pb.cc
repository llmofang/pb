// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stockBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stockBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* StockBaseList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockBaseList_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockBase_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stockBase_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_stockBase_2eproto() {
  protobuf_AddDesc_stockBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stockBase.proto");
  GOOGLE_CHECK(file != NULL);
  StockBaseList_descriptor_ = file->message_type(0);
  static const int StockBaseList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBaseList, infolist_),
  };
  StockBaseList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockBaseList_descriptor_,
      StockBaseList::internal_default_instance(),
      StockBaseList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBaseList, _has_bits_),
      -1,
      -1,
      sizeof(StockBaseList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBaseList, _internal_metadata_));
  StockBase_descriptor_ = file->message_type(1);
  static const int StockBase_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, htcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, securityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, chispelling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, englishname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, securitysubtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, listdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, outstandingshare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, publicfloatsharequantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, tradingphasecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, preclosepx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, maxpx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, minpx_),
  };
  StockBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StockBase_descriptor_,
      StockBase::internal_default_instance(),
      StockBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, _has_bits_),
      -1,
      -1,
      sizeof(StockBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stockBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockBaseList_descriptor_, StockBaseList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StockBase_descriptor_, StockBase::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stockBase_2eproto() {
  StockBaseList_default_instance_.Shutdown();
  delete StockBaseList_reflection_;
  StockBase_default_instance_.Shutdown();
  delete StockBase_reflection_;
}

void protobuf_InitDefaults_stockBase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  StockBaseList_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  StockBase_default_instance_.DefaultConstruct();
  StockBaseList_default_instance_.get_mutable()->InitAsDefaultInstance();
  StockBase_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_stockBase_2eproto_once_);
void protobuf_InitDefaults_stockBase_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_stockBase_2eproto_once_,
                 &protobuf_InitDefaults_stockBase_2eproto_impl);
}
void protobuf_AddDesc_stockBase_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_stockBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017stockBase.proto\022\004comm\"2\n\rStockBaseList"
    "\022!\n\010InfoList\030\001 \003(\0132\017.comm.StockBase\"\356\002\n\t"
    "StockBase\022\016\n\006HTCode\030\001 \002(\t\022\022\n\nSecurityID\030"
    "\002 \002(\t\022\016\n\006Symbol\030\003 \002(\t\022\023\n\013ChiSpelling\030\004 \002"
    "(\t\022\023\n\013EnglishName\030\005 \002(\t\022\030\n\020SecurityIDSou"
    "rce\030\006 \002(\005\022\024\n\014SecurityType\030\007 \002(\005\022\027\n\017Secur"
    "itySubType\030\010 \002(\t\022\020\n\010ListDate\030\t \002(\t\022\020\n\010Cu"
    "rrency\030\n \002(\t\022\030\n\020OutstandingShare\030\013 \002(\003\022 "
    "\n\030PublicFloatShareQuantity\030\014 \002(\003\022\016\n\006MDDa"
    "te\030\r \002(\005\022\030\n\020TradingPhaseCode\030\016 \002(\t\022\022\n\nPr"
    "eClosePx\030\017 \002(\003\022\r\n\005MaxPx\030\020 \002(\003\022\r\n\005MinPx\030\021"
    " \002(\003", 444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stockBase.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stockBase_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_stockBase_2eproto_once_);
void protobuf_AddDesc_stockBase_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_stockBase_2eproto_once_,
                 &protobuf_AddDesc_stockBase_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stockBase_2eproto {
  StaticDescriptorInitializer_stockBase_2eproto() {
    protobuf_AddDesc_stockBase_2eproto();
  }
} static_descriptor_initializer_stockBase_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockBaseList::kInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockBaseList::StockBaseList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_stockBase_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.StockBaseList)
}

void StockBaseList::InitAsDefaultInstance() {
}

StockBaseList::StockBaseList(const StockBaseList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.StockBaseList)
}

void StockBaseList::SharedCtor() {
  _cached_size_ = 0;
}

StockBaseList::~StockBaseList() {
  // @@protoc_insertion_point(destructor:comm.StockBaseList)
  SharedDtor();
}

void StockBaseList::SharedDtor() {
}

void StockBaseList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockBaseList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockBaseList_descriptor_;
}

const StockBaseList& StockBaseList::default_instance() {
  protobuf_InitDefaults_stockBase_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StockBaseList> StockBaseList_default_instance_;

StockBaseList* StockBaseList::New(::google::protobuf::Arena* arena) const {
  StockBaseList* n = new StockBaseList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockBaseList::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.StockBaseList)
  infolist_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockBaseList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.StockBaseList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .comm.StockBase InfoList = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_InfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_infolist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_InfoList;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.StockBaseList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.StockBaseList)
  return false;
#undef DO_
}

void StockBaseList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.StockBaseList)
  // repeated .comm.StockBase InfoList = 1;
  for (unsigned int i = 0, n = this->infolist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.StockBaseList)
}

::google::protobuf::uint8* StockBaseList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.StockBaseList)
  // repeated .comm.StockBase InfoList = 1;
  for (unsigned int i = 0, n = this->infolist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->infolist(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.StockBaseList)
  return target;
}

size_t StockBaseList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.StockBaseList)
  size_t total_size = 0;

  // repeated .comm.StockBase InfoList = 1;
  {
    unsigned int count = this->infolist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infolist(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockBaseList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.StockBaseList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockBaseList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockBaseList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.StockBaseList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.StockBaseList)
    UnsafeMergeFrom(*source);
  }
}

void StockBaseList::MergeFrom(const StockBaseList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.StockBaseList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StockBaseList::UnsafeMergeFrom(const StockBaseList& from) {
  GOOGLE_DCHECK(&from != this);
  infolist_.MergeFrom(from.infolist_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void StockBaseList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.StockBaseList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockBaseList::CopyFrom(const StockBaseList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.StockBaseList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StockBaseList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->infolist())) return false;
  return true;
}

void StockBaseList::Swap(StockBaseList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockBaseList::InternalSwap(StockBaseList* other) {
  infolist_.UnsafeArenaSwap(&other->infolist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockBaseList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockBaseList_descriptor_;
  metadata.reflection = StockBaseList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockBaseList

// repeated .comm.StockBase InfoList = 1;
int StockBaseList::infolist_size() const {
  return infolist_.size();
}
void StockBaseList::clear_infolist() {
  infolist_.Clear();
}
const ::comm::StockBase& StockBaseList::infolist(int index) const {
  // @@protoc_insertion_point(field_get:comm.StockBaseList.InfoList)
  return infolist_.Get(index);
}
::comm::StockBase* StockBaseList::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:comm.StockBaseList.InfoList)
  return infolist_.Mutable(index);
}
::comm::StockBase* StockBaseList::add_infolist() {
  // @@protoc_insertion_point(field_add:comm.StockBaseList.InfoList)
  return infolist_.Add();
}
::google::protobuf::RepeatedPtrField< ::comm::StockBase >*
StockBaseList::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:comm.StockBaseList.InfoList)
  return &infolist_;
}
const ::google::protobuf::RepeatedPtrField< ::comm::StockBase >&
StockBaseList::infolist() const {
  // @@protoc_insertion_point(field_list:comm.StockBaseList.InfoList)
  return infolist_;
}

inline const StockBaseList* StockBaseList::internal_default_instance() {
  return &StockBaseList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StockBase::kHTCodeFieldNumber;
const int StockBase::kSecurityIDFieldNumber;
const int StockBase::kSymbolFieldNumber;
const int StockBase::kChiSpellingFieldNumber;
const int StockBase::kEnglishNameFieldNumber;
const int StockBase::kSecurityIDSourceFieldNumber;
const int StockBase::kSecurityTypeFieldNumber;
const int StockBase::kSecuritySubTypeFieldNumber;
const int StockBase::kListDateFieldNumber;
const int StockBase::kCurrencyFieldNumber;
const int StockBase::kOutstandingShareFieldNumber;
const int StockBase::kPublicFloatShareQuantityFieldNumber;
const int StockBase::kMDDateFieldNumber;
const int StockBase::kTradingPhaseCodeFieldNumber;
const int StockBase::kPreClosePxFieldNumber;
const int StockBase::kMaxPxFieldNumber;
const int StockBase::kMinPxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StockBase::StockBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_stockBase_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.StockBase)
}

void StockBase::InitAsDefaultInstance() {
}

StockBase::StockBase(const StockBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.StockBase)
}

void StockBase::SharedCtor() {
  _cached_size_ = 0;
  htcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chispelling_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  englishname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitysubtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listdate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&securityidsource_, 0, reinterpret_cast<char*>(&mddate_) -
    reinterpret_cast<char*>(&securityidsource_) + sizeof(mddate_));
}

StockBase::~StockBase() {
  // @@protoc_insertion_point(destructor:comm.StockBase)
  SharedDtor();
}

void StockBase::SharedDtor() {
  htcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chispelling_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  englishname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securitysubtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listdate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradingphasecode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StockBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockBase_descriptor_;
}

const StockBase& StockBase::default_instance() {
  protobuf_InitDefaults_stockBase_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<StockBase> StockBase_default_instance_;

StockBase* StockBase::New(::google::protobuf::Arena* arena) const {
  StockBase* n = new StockBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StockBase::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.StockBase)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StockBase, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StockBase*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(securityidsource_, securitytype_);
    if (has_htcode()) {
      htcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_securityid()) {
      securityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_symbol()) {
      symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chispelling()) {
      chispelling_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_englishname()) {
      englishname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_securitysubtype()) {
      securitysubtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(outstandingshare_, maxpx_);
    if (has_listdate()) {
      listdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_currency()) {
      currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    mddate_ = 0;
    if (has_tradingphasecode()) {
      tradingphasecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  minpx_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StockBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.StockBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string HTCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->htcode().data(), this->htcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.HTCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SecurityID;
        break;
      }

      // required string SecurityID = 2;
      case 2: {
        if (tag == 18) {
         parse_SecurityID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securityid().data(), this->securityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.SecurityID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Symbol;
        break;
      }

      // required string Symbol = 3;
      case 3: {
        if (tag == 26) {
         parse_Symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.Symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ChiSpelling;
        break;
      }

      // required string ChiSpelling = 4;
      case 4: {
        if (tag == 34) {
         parse_ChiSpelling:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chispelling()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chispelling().data(), this->chispelling().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.ChiSpelling");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EnglishName;
        break;
      }

      // required string EnglishName = 5;
      case 5: {
        if (tag == 42) {
         parse_EnglishName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_englishname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->englishname().data(), this->englishname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.EnglishName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SecurityIDSource;
        break;
      }

      // required int32 SecurityIDSource = 6;
      case 6: {
        if (tag == 48) {
         parse_SecurityIDSource:
          set_has_securityidsource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &securityidsource_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SecurityType;
        break;
      }

      // required int32 SecurityType = 7;
      case 7: {
        if (tag == 56) {
         parse_SecurityType:
          set_has_securitytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &securitytype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SecuritySubType;
        break;
      }

      // required string SecuritySubType = 8;
      case 8: {
        if (tag == 66) {
         parse_SecuritySubType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitysubtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->securitysubtype().data(), this->securitysubtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.SecuritySubType");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ListDate;
        break;
      }

      // required string ListDate = 9;
      case 9: {
        if (tag == 74) {
         parse_ListDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->listdate().data(), this->listdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.ListDate");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Currency;
        break;
      }

      // required string Currency = 10;
      case 10: {
        if (tag == 82) {
         parse_Currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.Currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_OutstandingShare;
        break;
      }

      // required int64 OutstandingShare = 11;
      case 11: {
        if (tag == 88) {
         parse_OutstandingShare:
          set_has_outstandingshare();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &outstandingshare_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_PublicFloatShareQuantity;
        break;
      }

      // required int64 PublicFloatShareQuantity = 12;
      case 12: {
        if (tag == 96) {
         parse_PublicFloatShareQuantity:
          set_has_publicfloatsharequantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publicfloatsharequantity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_MDDate;
        break;
      }

      // required int32 MDDate = 13;
      case 13: {
        if (tag == 104) {
         parse_MDDate:
          set_has_mddate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_TradingPhaseCode;
        break;
      }

      // required string TradingPhaseCode = 14;
      case 14: {
        if (tag == 114) {
         parse_TradingPhaseCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingphasecode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradingphasecode().data(), this->tradingphasecode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.StockBase.TradingPhaseCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_PreClosePx;
        break;
      }

      // required int64 PreClosePx = 15;
      case 15: {
        if (tag == 120) {
         parse_PreClosePx:
          set_has_preclosepx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preclosepx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_MaxPx;
        break;
      }

      // required int64 MaxPx = 16;
      case 16: {
        if (tag == 128) {
         parse_MaxPx:
          set_has_maxpx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_MinPx;
        break;
      }

      // required int64 MinPx = 17;
      case 17: {
        if (tag == 136) {
         parse_MinPx:
          set_has_minpx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &minpx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.StockBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.StockBase)
  return false;
#undef DO_
}

void StockBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.StockBase)
  // required string HTCode = 1;
  if (has_htcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->htcode().data(), this->htcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.HTCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htcode(), output);
  }

  // required string SecurityID = 2;
  if (has_securityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securityid().data(), this->securityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.SecurityID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->securityid(), output);
  }

  // required string Symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // required string ChiSpelling = 4;
  if (has_chispelling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chispelling().data(), this->chispelling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.ChiSpelling");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chispelling(), output);
  }

  // required string EnglishName = 5;
  if (has_englishname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->englishname().data(), this->englishname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.EnglishName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->englishname(), output);
  }

  // required int32 SecurityIDSource = 6;
  if (has_securityidsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->securityidsource(), output);
  }

  // required int32 SecurityType = 7;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->securitytype(), output);
  }

  // required string SecuritySubType = 8;
  if (has_securitysubtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitysubtype().data(), this->securitysubtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.SecuritySubType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->securitysubtype(), output);
  }

  // required string ListDate = 9;
  if (has_listdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listdate().data(), this->listdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.ListDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->listdate(), output);
  }

  // required string Currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.Currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->currency(), output);
  }

  // required int64 OutstandingShare = 11;
  if (has_outstandingshare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->outstandingshare(), output);
  }

  // required int64 PublicFloatShareQuantity = 12;
  if (has_publicfloatsharequantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->publicfloatsharequantity(), output);
  }

  // required int32 MDDate = 13;
  if (has_mddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mddate(), output);
  }

  // required string TradingPhaseCode = 14;
  if (has_tradingphasecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradingphasecode().data(), this->tradingphasecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.TradingPhaseCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->tradingphasecode(), output);
  }

  // required int64 PreClosePx = 15;
  if (has_preclosepx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->preclosepx(), output);
  }

  // required int64 MaxPx = 16;
  if (has_maxpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->maxpx(), output);
  }

  // required int64 MinPx = 17;
  if (has_minpx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->minpx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.StockBase)
}

::google::protobuf::uint8* StockBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.StockBase)
  // required string HTCode = 1;
  if (has_htcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->htcode().data(), this->htcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.HTCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htcode(), target);
  }

  // required string SecurityID = 2;
  if (has_securityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securityid().data(), this->securityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.SecurityID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->securityid(), target);
  }

  // required string Symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // required string ChiSpelling = 4;
  if (has_chispelling()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chispelling().data(), this->chispelling().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.ChiSpelling");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chispelling(), target);
  }

  // required string EnglishName = 5;
  if (has_englishname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->englishname().data(), this->englishname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.EnglishName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->englishname(), target);
  }

  // required int32 SecurityIDSource = 6;
  if (has_securityidsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->securityidsource(), target);
  }

  // required int32 SecurityType = 7;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->securitytype(), target);
  }

  // required string SecuritySubType = 8;
  if (has_securitysubtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->securitysubtype().data(), this->securitysubtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.SecuritySubType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->securitysubtype(), target);
  }

  // required string ListDate = 9;
  if (has_listdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->listdate().data(), this->listdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.ListDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->listdate(), target);
  }

  // required string Currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.Currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->currency(), target);
  }

  // required int64 OutstandingShare = 11;
  if (has_outstandingshare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->outstandingshare(), target);
  }

  // required int64 PublicFloatShareQuantity = 12;
  if (has_publicfloatsharequantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->publicfloatsharequantity(), target);
  }

  // required int32 MDDate = 13;
  if (has_mddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mddate(), target);
  }

  // required string TradingPhaseCode = 14;
  if (has_tradingphasecode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradingphasecode().data(), this->tradingphasecode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.StockBase.TradingPhaseCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tradingphasecode(), target);
  }

  // required int64 PreClosePx = 15;
  if (has_preclosepx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->preclosepx(), target);
  }

  // required int64 MaxPx = 16;
  if (has_maxpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->maxpx(), target);
  }

  // required int64 MinPx = 17;
  if (has_minpx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->minpx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.StockBase)
  return target;
}

size_t StockBase::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:comm.StockBase)
  size_t total_size = 0;

  if (has_htcode()) {
    // required string HTCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htcode());
  }

  if (has_securityid()) {
    // required string SecurityID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->securityid());
  }

  if (has_symbol()) {
    // required string Symbol = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  if (has_chispelling()) {
    // required string ChiSpelling = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chispelling());
  }

  if (has_englishname()) {
    // required string EnglishName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->englishname());
  }

  if (has_securityidsource()) {
    // required int32 SecurityIDSource = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->securityidsource());
  }

  if (has_securitytype()) {
    // required int32 SecurityType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->securitytype());
  }

  if (has_securitysubtype()) {
    // required string SecuritySubType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->securitysubtype());
  }

  if (has_listdate()) {
    // required string ListDate = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->listdate());
  }

  if (has_currency()) {
    // required string Currency = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());
  }

  if (has_outstandingshare()) {
    // required int64 OutstandingShare = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->outstandingshare());
  }

  if (has_publicfloatsharequantity()) {
    // required int64 PublicFloatShareQuantity = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->publicfloatsharequantity());
  }

  if (has_mddate()) {
    // required int32 MDDate = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  if (has_tradingphasecode()) {
    // required string TradingPhaseCode = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingphasecode());
  }

  if (has_preclosepx()) {
    // required int64 PreClosePx = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->preclosepx());
  }

  if (has_maxpx()) {
    // required int64 MaxPx = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxpx());
  }

  if (has_minpx()) {
    // required int64 MinPx = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->minpx());
  }

  return total_size;
}
size_t StockBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.StockBase)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0001ffff) ^ 0x0001ffff) == 0) {  // All required fields are present.
    // required string HTCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htcode());

    // required string SecurityID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->securityid());

    // required string Symbol = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());

    // required string ChiSpelling = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chispelling());

    // required string EnglishName = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->englishname());

    // required int32 SecurityIDSource = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->securityidsource());

    // required int32 SecurityType = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->securitytype());

    // required string SecuritySubType = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->securitysubtype());

    // required string ListDate = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->listdate());

    // required string Currency = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->currency());

    // required int64 OutstandingShare = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->outstandingshare());

    // required int64 PublicFloatShareQuantity = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->publicfloatsharequantity());

    // required int32 MDDate = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());

    // required string TradingPhaseCode = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingphasecode());

    // required int64 PreClosePx = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->preclosepx());

    // required int64 MaxPx = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxpx());

    // required int64 MinPx = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->minpx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.StockBase)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StockBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StockBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.StockBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.StockBase)
    UnsafeMergeFrom(*source);
  }
}

void StockBase::MergeFrom(const StockBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.StockBase)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void StockBase::UnsafeMergeFrom(const StockBase& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htcode()) {
      set_has_htcode();
      htcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htcode_);
    }
    if (from.has_securityid()) {
      set_has_securityid();
      securityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securityid_);
    }
    if (from.has_symbol()) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (from.has_chispelling()) {
      set_has_chispelling();
      chispelling_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chispelling_);
    }
    if (from.has_englishname()) {
      set_has_englishname();
      englishname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.englishname_);
    }
    if (from.has_securityidsource()) {
      set_securityidsource(from.securityidsource());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
    if (from.has_securitysubtype()) {
      set_has_securitysubtype();
      securitysubtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securitysubtype_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_listdate()) {
      set_has_listdate();
      listdate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.listdate_);
    }
    if (from.has_currency()) {
      set_has_currency();
      currency_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.currency_);
    }
    if (from.has_outstandingshare()) {
      set_outstandingshare(from.outstandingshare());
    }
    if (from.has_publicfloatsharequantity()) {
      set_publicfloatsharequantity(from.publicfloatsharequantity());
    }
    if (from.has_mddate()) {
      set_mddate(from.mddate());
    }
    if (from.has_tradingphasecode()) {
      set_has_tradingphasecode();
      tradingphasecode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingphasecode_);
    }
    if (from.has_preclosepx()) {
      set_preclosepx(from.preclosepx());
    }
    if (from.has_maxpx()) {
      set_maxpx(from.maxpx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_minpx()) {
      set_minpx(from.minpx());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void StockBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.StockBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockBase::CopyFrom(const StockBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.StockBase)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool StockBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void StockBase::Swap(StockBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StockBase::InternalSwap(StockBase* other) {
  htcode_.Swap(&other->htcode_);
  securityid_.Swap(&other->securityid_);
  symbol_.Swap(&other->symbol_);
  chispelling_.Swap(&other->chispelling_);
  englishname_.Swap(&other->englishname_);
  std::swap(securityidsource_, other->securityidsource_);
  std::swap(securitytype_, other->securitytype_);
  securitysubtype_.Swap(&other->securitysubtype_);
  listdate_.Swap(&other->listdate_);
  currency_.Swap(&other->currency_);
  std::swap(outstandingshare_, other->outstandingshare_);
  std::swap(publicfloatsharequantity_, other->publicfloatsharequantity_);
  std::swap(mddate_, other->mddate_);
  tradingphasecode_.Swap(&other->tradingphasecode_);
  std::swap(preclosepx_, other->preclosepx_);
  std::swap(maxpx_, other->maxpx_);
  std::swap(minpx_, other->minpx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StockBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockBase_descriptor_;
  metadata.reflection = StockBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StockBase

// required string HTCode = 1;
bool StockBase::has_htcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StockBase::set_has_htcode() {
  _has_bits_[0] |= 0x00000001u;
}
void StockBase::clear_has_htcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void StockBase::clear_htcode() {
  htcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_htcode();
}
const ::std::string& StockBase::htcode() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.HTCode)
  return htcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_htcode(const ::std::string& value) {
  set_has_htcode();
  htcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.HTCode)
}
void StockBase::set_htcode(const char* value) {
  set_has_htcode();
  htcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.HTCode)
}
void StockBase::set_htcode(const char* value, size_t size) {
  set_has_htcode();
  htcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.HTCode)
}
::std::string* StockBase::mutable_htcode() {
  set_has_htcode();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.HTCode)
  return htcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_htcode() {
  // @@protoc_insertion_point(field_release:comm.StockBase.HTCode)
  clear_has_htcode();
  return htcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_htcode(::std::string* htcode) {
  if (htcode != NULL) {
    set_has_htcode();
  } else {
    clear_has_htcode();
  }
  htcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htcode);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.HTCode)
}

// required string SecurityID = 2;
bool StockBase::has_securityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StockBase::set_has_securityid() {
  _has_bits_[0] |= 0x00000002u;
}
void StockBase::clear_has_securityid() {
  _has_bits_[0] &= ~0x00000002u;
}
void StockBase::clear_securityid() {
  securityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securityid();
}
const ::std::string& StockBase::securityid() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.SecurityID)
  return securityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_securityid(const ::std::string& value) {
  set_has_securityid();
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.SecurityID)
}
void StockBase::set_securityid(const char* value) {
  set_has_securityid();
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.SecurityID)
}
void StockBase::set_securityid(const char* value, size_t size) {
  set_has_securityid();
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.SecurityID)
}
::std::string* StockBase::mutable_securityid() {
  set_has_securityid();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.SecurityID)
  return securityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_securityid() {
  // @@protoc_insertion_point(field_release:comm.StockBase.SecurityID)
  clear_has_securityid();
  return securityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_securityid(::std::string* securityid) {
  if (securityid != NULL) {
    set_has_securityid();
  } else {
    clear_has_securityid();
  }
  securityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securityid);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.SecurityID)
}

// required string Symbol = 3;
bool StockBase::has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StockBase::set_has_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
void StockBase::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
void StockBase::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
const ::std::string& StockBase::symbol() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.Symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.Symbol)
}
void StockBase::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.Symbol)
}
void StockBase::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.Symbol)
}
::std::string* StockBase::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.Symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_symbol() {
  // @@protoc_insertion_point(field_release:comm.StockBase.Symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.Symbol)
}

// required string ChiSpelling = 4;
bool StockBase::has_chispelling() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StockBase::set_has_chispelling() {
  _has_bits_[0] |= 0x00000008u;
}
void StockBase::clear_has_chispelling() {
  _has_bits_[0] &= ~0x00000008u;
}
void StockBase::clear_chispelling() {
  chispelling_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chispelling();
}
const ::std::string& StockBase::chispelling() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.ChiSpelling)
  return chispelling_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_chispelling(const ::std::string& value) {
  set_has_chispelling();
  chispelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.ChiSpelling)
}
void StockBase::set_chispelling(const char* value) {
  set_has_chispelling();
  chispelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.ChiSpelling)
}
void StockBase::set_chispelling(const char* value, size_t size) {
  set_has_chispelling();
  chispelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.ChiSpelling)
}
::std::string* StockBase::mutable_chispelling() {
  set_has_chispelling();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.ChiSpelling)
  return chispelling_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_chispelling() {
  // @@protoc_insertion_point(field_release:comm.StockBase.ChiSpelling)
  clear_has_chispelling();
  return chispelling_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_chispelling(::std::string* chispelling) {
  if (chispelling != NULL) {
    set_has_chispelling();
  } else {
    clear_has_chispelling();
  }
  chispelling_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chispelling);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.ChiSpelling)
}

// required string EnglishName = 5;
bool StockBase::has_englishname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StockBase::set_has_englishname() {
  _has_bits_[0] |= 0x00000010u;
}
void StockBase::clear_has_englishname() {
  _has_bits_[0] &= ~0x00000010u;
}
void StockBase::clear_englishname() {
  englishname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_englishname();
}
const ::std::string& StockBase::englishname() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.EnglishName)
  return englishname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_englishname(const ::std::string& value) {
  set_has_englishname();
  englishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.EnglishName)
}
void StockBase::set_englishname(const char* value) {
  set_has_englishname();
  englishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.EnglishName)
}
void StockBase::set_englishname(const char* value, size_t size) {
  set_has_englishname();
  englishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.EnglishName)
}
::std::string* StockBase::mutable_englishname() {
  set_has_englishname();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.EnglishName)
  return englishname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_englishname() {
  // @@protoc_insertion_point(field_release:comm.StockBase.EnglishName)
  clear_has_englishname();
  return englishname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_englishname(::std::string* englishname) {
  if (englishname != NULL) {
    set_has_englishname();
  } else {
    clear_has_englishname();
  }
  englishname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), englishname);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.EnglishName)
}

// required int32 SecurityIDSource = 6;
bool StockBase::has_securityidsource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void StockBase::set_has_securityidsource() {
  _has_bits_[0] |= 0x00000020u;
}
void StockBase::clear_has_securityidsource() {
  _has_bits_[0] &= ~0x00000020u;
}
void StockBase::clear_securityidsource() {
  securityidsource_ = 0;
  clear_has_securityidsource();
}
::google::protobuf::int32 StockBase::securityidsource() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.SecurityIDSource)
  return securityidsource_;
}
void StockBase::set_securityidsource(::google::protobuf::int32 value) {
  set_has_securityidsource();
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.SecurityIDSource)
}

// required int32 SecurityType = 7;
bool StockBase::has_securitytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void StockBase::set_has_securitytype() {
  _has_bits_[0] |= 0x00000040u;
}
void StockBase::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000040u;
}
void StockBase::clear_securitytype() {
  securitytype_ = 0;
  clear_has_securitytype();
}
::google::protobuf::int32 StockBase::securitytype() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.SecurityType)
  return securitytype_;
}
void StockBase::set_securitytype(::google::protobuf::int32 value) {
  set_has_securitytype();
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.SecurityType)
}

// required string SecuritySubType = 8;
bool StockBase::has_securitysubtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void StockBase::set_has_securitysubtype() {
  _has_bits_[0] |= 0x00000080u;
}
void StockBase::clear_has_securitysubtype() {
  _has_bits_[0] &= ~0x00000080u;
}
void StockBase::clear_securitysubtype() {
  securitysubtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securitysubtype();
}
const ::std::string& StockBase::securitysubtype() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.SecuritySubType)
  return securitysubtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_securitysubtype(const ::std::string& value) {
  set_has_securitysubtype();
  securitysubtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.SecuritySubType)
}
void StockBase::set_securitysubtype(const char* value) {
  set_has_securitysubtype();
  securitysubtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.SecuritySubType)
}
void StockBase::set_securitysubtype(const char* value, size_t size) {
  set_has_securitysubtype();
  securitysubtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.SecuritySubType)
}
::std::string* StockBase::mutable_securitysubtype() {
  set_has_securitysubtype();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.SecuritySubType)
  return securitysubtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_securitysubtype() {
  // @@protoc_insertion_point(field_release:comm.StockBase.SecuritySubType)
  clear_has_securitysubtype();
  return securitysubtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_securitysubtype(::std::string* securitysubtype) {
  if (securitysubtype != NULL) {
    set_has_securitysubtype();
  } else {
    clear_has_securitysubtype();
  }
  securitysubtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitysubtype);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.SecuritySubType)
}

// required string ListDate = 9;
bool StockBase::has_listdate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void StockBase::set_has_listdate() {
  _has_bits_[0] |= 0x00000100u;
}
void StockBase::clear_has_listdate() {
  _has_bits_[0] &= ~0x00000100u;
}
void StockBase::clear_listdate() {
  listdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listdate();
}
const ::std::string& StockBase::listdate() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.ListDate)
  return listdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_listdate(const ::std::string& value) {
  set_has_listdate();
  listdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.ListDate)
}
void StockBase::set_listdate(const char* value) {
  set_has_listdate();
  listdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.ListDate)
}
void StockBase::set_listdate(const char* value, size_t size) {
  set_has_listdate();
  listdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.ListDate)
}
::std::string* StockBase::mutable_listdate() {
  set_has_listdate();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.ListDate)
  return listdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_listdate() {
  // @@protoc_insertion_point(field_release:comm.StockBase.ListDate)
  clear_has_listdate();
  return listdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_listdate(::std::string* listdate) {
  if (listdate != NULL) {
    set_has_listdate();
  } else {
    clear_has_listdate();
  }
  listdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listdate);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.ListDate)
}

// required string Currency = 10;
bool StockBase::has_currency() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void StockBase::set_has_currency() {
  _has_bits_[0] |= 0x00000200u;
}
void StockBase::clear_has_currency() {
  _has_bits_[0] &= ~0x00000200u;
}
void StockBase::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
const ::std::string& StockBase::currency() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.Currency)
  return currency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.Currency)
}
void StockBase::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.Currency)
}
void StockBase::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.Currency)
}
::std::string* StockBase::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.Currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_currency() {
  // @@protoc_insertion_point(field_release:comm.StockBase.Currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.Currency)
}

// required int64 OutstandingShare = 11;
bool StockBase::has_outstandingshare() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void StockBase::set_has_outstandingshare() {
  _has_bits_[0] |= 0x00000400u;
}
void StockBase::clear_has_outstandingshare() {
  _has_bits_[0] &= ~0x00000400u;
}
void StockBase::clear_outstandingshare() {
  outstandingshare_ = GOOGLE_LONGLONG(0);
  clear_has_outstandingshare();
}
::google::protobuf::int64 StockBase::outstandingshare() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.OutstandingShare)
  return outstandingshare_;
}
void StockBase::set_outstandingshare(::google::protobuf::int64 value) {
  set_has_outstandingshare();
  outstandingshare_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.OutstandingShare)
}

// required int64 PublicFloatShareQuantity = 12;
bool StockBase::has_publicfloatsharequantity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void StockBase::set_has_publicfloatsharequantity() {
  _has_bits_[0] |= 0x00000800u;
}
void StockBase::clear_has_publicfloatsharequantity() {
  _has_bits_[0] &= ~0x00000800u;
}
void StockBase::clear_publicfloatsharequantity() {
  publicfloatsharequantity_ = GOOGLE_LONGLONG(0);
  clear_has_publicfloatsharequantity();
}
::google::protobuf::int64 StockBase::publicfloatsharequantity() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.PublicFloatShareQuantity)
  return publicfloatsharequantity_;
}
void StockBase::set_publicfloatsharequantity(::google::protobuf::int64 value) {
  set_has_publicfloatsharequantity();
  publicfloatsharequantity_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.PublicFloatShareQuantity)
}

// required int32 MDDate = 13;
bool StockBase::has_mddate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void StockBase::set_has_mddate() {
  _has_bits_[0] |= 0x00001000u;
}
void StockBase::clear_has_mddate() {
  _has_bits_[0] &= ~0x00001000u;
}
void StockBase::clear_mddate() {
  mddate_ = 0;
  clear_has_mddate();
}
::google::protobuf::int32 StockBase::mddate() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.MDDate)
  return mddate_;
}
void StockBase::set_mddate(::google::protobuf::int32 value) {
  set_has_mddate();
  mddate_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.MDDate)
}

// required string TradingPhaseCode = 14;
bool StockBase::has_tradingphasecode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void StockBase::set_has_tradingphasecode() {
  _has_bits_[0] |= 0x00002000u;
}
void StockBase::clear_has_tradingphasecode() {
  _has_bits_[0] &= ~0x00002000u;
}
void StockBase::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradingphasecode();
}
const ::std::string& StockBase::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.TradingPhaseCode)
  return tradingphasecode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_tradingphasecode(const ::std::string& value) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.TradingPhaseCode)
}
void StockBase::set_tradingphasecode(const char* value) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.TradingPhaseCode)
}
void StockBase::set_tradingphasecode(const char* value, size_t size) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.TradingPhaseCode)
}
::std::string* StockBase::mutable_tradingphasecode() {
  set_has_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StockBase::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:comm.StockBase.TradingPhaseCode)
  clear_has_tradingphasecode();
  return tradingphasecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StockBase::set_allocated_tradingphasecode(::std::string* tradingphasecode) {
  if (tradingphasecode != NULL) {
    set_has_tradingphasecode();
  } else {
    clear_has_tradingphasecode();
  }
  tradingphasecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.TradingPhaseCode)
}

// required int64 PreClosePx = 15;
bool StockBase::has_preclosepx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void StockBase::set_has_preclosepx() {
  _has_bits_[0] |= 0x00004000u;
}
void StockBase::clear_has_preclosepx() {
  _has_bits_[0] &= ~0x00004000u;
}
void StockBase::clear_preclosepx() {
  preclosepx_ = GOOGLE_LONGLONG(0);
  clear_has_preclosepx();
}
::google::protobuf::int64 StockBase::preclosepx() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.PreClosePx)
  return preclosepx_;
}
void StockBase::set_preclosepx(::google::protobuf::int64 value) {
  set_has_preclosepx();
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.PreClosePx)
}

// required int64 MaxPx = 16;
bool StockBase::has_maxpx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void StockBase::set_has_maxpx() {
  _has_bits_[0] |= 0x00008000u;
}
void StockBase::clear_has_maxpx() {
  _has_bits_[0] &= ~0x00008000u;
}
void StockBase::clear_maxpx() {
  maxpx_ = GOOGLE_LONGLONG(0);
  clear_has_maxpx();
}
::google::protobuf::int64 StockBase::maxpx() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.MaxPx)
  return maxpx_;
}
void StockBase::set_maxpx(::google::protobuf::int64 value) {
  set_has_maxpx();
  maxpx_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.MaxPx)
}

// required int64 MinPx = 17;
bool StockBase::has_minpx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void StockBase::set_has_minpx() {
  _has_bits_[0] |= 0x00010000u;
}
void StockBase::clear_has_minpx() {
  _has_bits_[0] &= ~0x00010000u;
}
void StockBase::clear_minpx() {
  minpx_ = GOOGLE_LONGLONG(0);
  clear_has_minpx();
}
::google::protobuf::int64 StockBase::minpx() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.MinPx)
  return minpx_;
}
void StockBase::set_minpx(::google::protobuf::int64 value) {
  set_has_minpx();
  minpx_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.MinPx)
}

inline const StockBase* StockBase::internal_default_instance() {
  return &StockBase_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
