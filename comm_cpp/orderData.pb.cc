// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: orderData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "orderData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* OrderData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_orderData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_orderData_2eproto() {
  protobuf_AddDesc_orderData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "orderData.proto");
  GOOGLE_CHECK(file != NULL);
  OrderData_descriptor_ = file->message_type(0);
  static const int OrderData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, htscsecurityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, mdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, orderindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, orderprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, orderqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, orderbsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, channelno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, exchangedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, exchangetime_),
  };
  OrderData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      OrderData_descriptor_,
      OrderData::internal_default_instance(),
      OrderData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, _has_bits_),
      -1,
      -1,
      sizeof(OrderData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_orderData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      OrderData_descriptor_, OrderData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_orderData_2eproto() {
  OrderData_default_instance_.Shutdown();
  delete OrderData_reflection_;
}

void protobuf_InitDefaults_orderData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  OrderData_default_instance_.DefaultConstruct();
  OrderData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_orderData_2eproto_once_);
void protobuf_InitDefaults_orderData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_orderData_2eproto_once_,
                 &protobuf_InitDefaults_orderData_2eproto_impl);
}
void protobuf_AddDesc_orderData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_orderData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017orderData.proto\022\004comm\"\224\002\n\tOrderData\022\026\n"
    "\016HTSCSecurityID\030\001 \002(\t\022\016\n\006MDDate\030\002 \002(\005\022\016\n"
    "\006MDTime\030\003 \002(\005\022\030\n\020securityIDSource\030\004 \001(\003\022"
    "\024\n\014securityType\030\005 \001(\003\022\022\n\nOrderIndex\030\006 \001("
    "\003\022\021\n\tOrderType\030\007 \001(\005\022\022\n\nOrderPrice\030\010 \001(\003"
    "\022\020\n\010OrderQty\030\t \001(\003\022\023\n\013OrderBSFlag\030\n \001(\005\022"
    "\021\n\tChannelNo\030\013 \001(\005\022\024\n\014ExchangeDate\030\014 \001(\005"
    "\022\024\n\014ExchangeTime\030\r \001(\005", 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "orderData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_orderData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_orderData_2eproto_once_);
void protobuf_AddDesc_orderData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_orderData_2eproto_once_,
                 &protobuf_AddDesc_orderData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_orderData_2eproto {
  StaticDescriptorInitializer_orderData_2eproto() {
    protobuf_AddDesc_orderData_2eproto();
  }
} static_descriptor_initializer_orderData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OrderData::kHTSCSecurityIDFieldNumber;
const int OrderData::kMDDateFieldNumber;
const int OrderData::kMDTimeFieldNumber;
const int OrderData::kSecurityIDSourceFieldNumber;
const int OrderData::kSecurityTypeFieldNumber;
const int OrderData::kOrderIndexFieldNumber;
const int OrderData::kOrderTypeFieldNumber;
const int OrderData::kOrderPriceFieldNumber;
const int OrderData::kOrderQtyFieldNumber;
const int OrderData::kOrderBSFlagFieldNumber;
const int OrderData::kChannelNoFieldNumber;
const int OrderData::kExchangeDateFieldNumber;
const int OrderData::kExchangeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OrderData::OrderData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_orderData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.OrderData)
}

void OrderData::InitAsDefaultInstance() {
}

OrderData::OrderData(const OrderData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.OrderData)
}

void OrderData::SharedCtor() {
  _cached_size_ = 0;
  htscsecurityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, reinterpret_cast<char*>(&exchangetime_) -
    reinterpret_cast<char*>(&mddate_) + sizeof(exchangetime_));
}

OrderData::~OrderData() {
  // @@protoc_insertion_point(destructor:comm.OrderData)
  SharedDtor();
}

void OrderData::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OrderData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderData_descriptor_;
}

const OrderData& OrderData::default_instance() {
  protobuf_InitDefaults_orderData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<OrderData> OrderData_default_instance_;

OrderData* OrderData::New(::google::protobuf::Arena* arena) const {
  OrderData* n = new OrderData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OrderData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.OrderData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(OrderData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<OrderData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(mddate_, ordertype_);
    if (has_htscsecurityid()) {
      htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(orderbsflag_, exchangetime_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool OrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.OrderData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string HTSCSecurityID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->htscsecurityid().data(), this->htscsecurityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.OrderData.HTSCSecurityID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MDDate;
        break;
      }

      // required int32 MDDate = 2;
      case 2: {
        if (tag == 16) {
         parse_MDDate:
          set_has_mddate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MDTime;
        break;
      }

      // required int32 MDTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MDTime:
          set_has_mdtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_securityIDSource;
        break;
      }

      // optional int64 securityIDSource = 4;
      case 4: {
        if (tag == 32) {
         parse_securityIDSource:
          set_has_securityidsource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &securityidsource_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_securityType;
        break;
      }

      // optional int64 securityType = 5;
      case 5: {
        if (tag == 40) {
         parse_securityType:
          set_has_securitytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &securitytype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_OrderIndex;
        break;
      }

      // optional int64 OrderIndex = 6;
      case 6: {
        if (tag == 48) {
         parse_OrderIndex:
          set_has_orderindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_OrderType;
        break;
      }

      // optional int32 OrderType = 7;
      case 7: {
        if (tag == 56) {
         parse_OrderType:
          set_has_ordertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_OrderPrice;
        break;
      }

      // optional int64 OrderPrice = 8;
      case 8: {
        if (tag == 64) {
         parse_OrderPrice:
          set_has_orderprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_OrderQty;
        break;
      }

      // optional int64 OrderQty = 9;
      case 9: {
        if (tag == 72) {
         parse_OrderQty:
          set_has_orderqty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderqty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_OrderBSFlag;
        break;
      }

      // optional int32 OrderBSFlag = 10;
      case 10: {
        if (tag == 80) {
         parse_OrderBSFlag:
          set_has_orderbsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderbsflag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ChannelNo;
        break;
      }

      // optional int32 ChannelNo = 11;
      case 11: {
        if (tag == 88) {
         parse_ChannelNo:
          set_has_channelno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ExchangeDate;
        break;
      }

      // optional int32 ExchangeDate = 12;
      case 12: {
        if (tag == 96) {
         parse_ExchangeDate:
          set_has_exchangedate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ExchangeTime;
        break;
      }

      // optional int32 ExchangeTime = 13;
      case 13: {
        if (tag == 104) {
         parse_ExchangeTime:
          set_has_exchangetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.OrderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.OrderData)
  return false;
#undef DO_
}

void OrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.OrderData)
  // required string HTSCSecurityID = 1;
  if (has_htscsecurityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.OrderData.HTSCSecurityID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // required int32 MDDate = 2;
  if (has_mddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // required int32 MDTime = 3;
  if (has_mdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // optional int64 securityIDSource = 4;
  if (has_securityidsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->securityidsource(), output);
  }

  // optional int64 securityType = 5;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->securitytype(), output);
  }

  // optional int64 OrderIndex = 6;
  if (has_orderindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->orderindex(), output);
  }

  // optional int32 OrderType = 7;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ordertype(), output);
  }

  // optional int64 OrderPrice = 8;
  if (has_orderprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->orderprice(), output);
  }

  // optional int64 OrderQty = 9;
  if (has_orderqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->orderqty(), output);
  }

  // optional int32 OrderBSFlag = 10;
  if (has_orderbsflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->orderbsflag(), output);
  }

  // optional int32 ChannelNo = 11;
  if (has_channelno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->channelno(), output);
  }

  // optional int32 ExchangeDate = 12;
  if (has_exchangedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->exchangedate(), output);
  }

  // optional int32 ExchangeTime = 13;
  if (has_exchangetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->exchangetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.OrderData)
}

::google::protobuf::uint8* OrderData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.OrderData)
  // required string HTSCSecurityID = 1;
  if (has_htscsecurityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.OrderData.HTSCSecurityID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // required int32 MDDate = 2;
  if (has_mddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // required int32 MDTime = 3;
  if (has_mdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // optional int64 securityIDSource = 4;
  if (has_securityidsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->securityidsource(), target);
  }

  // optional int64 securityType = 5;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->securitytype(), target);
  }

  // optional int64 OrderIndex = 6;
  if (has_orderindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->orderindex(), target);
  }

  // optional int32 OrderType = 7;
  if (has_ordertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ordertype(), target);
  }

  // optional int64 OrderPrice = 8;
  if (has_orderprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->orderprice(), target);
  }

  // optional int64 OrderQty = 9;
  if (has_orderqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->orderqty(), target);
  }

  // optional int32 OrderBSFlag = 10;
  if (has_orderbsflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->orderbsflag(), target);
  }

  // optional int32 ChannelNo = 11;
  if (has_channelno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->channelno(), target);
  }

  // optional int32 ExchangeDate = 12;
  if (has_exchangedate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->exchangedate(), target);
  }

  // optional int32 ExchangeTime = 13;
  if (has_exchangetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->exchangetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.OrderData)
  return target;
}

size_t OrderData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:comm.OrderData)
  size_t total_size = 0;

  if (has_htscsecurityid()) {
    // required string HTSCSecurityID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  if (has_mddate()) {
    // required int32 MDDate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  if (has_mdtime()) {
    // required int32 MDTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  return total_size;
}
size_t OrderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.OrderData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string HTSCSecurityID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());

    // required int32 MDDate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());

    // required int32 MDTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional int64 securityIDSource = 4;
    if (has_securityidsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->securityidsource());
    }

    // optional int64 securityType = 5;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->securitytype());
    }

    // optional int64 OrderIndex = 6;
    if (has_orderindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderindex());
    }

    // optional int32 OrderType = 7;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordertype());
    }

    // optional int64 OrderPrice = 8;
    if (has_orderprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderprice());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int64 OrderQty = 9;
    if (has_orderqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderqty());
    }

    // optional int32 OrderBSFlag = 10;
    if (has_orderbsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderbsflag());
    }

    // optional int32 ChannelNo = 11;
    if (has_channelno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelno());
    }

    // optional int32 ExchangeDate = 12;
    if (has_exchangedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangedate());
    }

    // optional int32 ExchangeTime = 13;
    if (has_exchangetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangetime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.OrderData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const OrderData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OrderData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.OrderData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.OrderData)
    UnsafeMergeFrom(*source);
  }
}

void OrderData::MergeFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.OrderData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void OrderData::UnsafeMergeFrom(const OrderData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htscsecurityid()) {
      set_has_htscsecurityid();
      htscsecurityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
    }
    if (from.has_mddate()) {
      set_mddate(from.mddate());
    }
    if (from.has_mdtime()) {
      set_mdtime(from.mdtime());
    }
    if (from.has_securityidsource()) {
      set_securityidsource(from.securityidsource());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
    if (from.has_orderindex()) {
      set_orderindex(from.orderindex());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_orderprice()) {
      set_orderprice(from.orderprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_orderqty()) {
      set_orderqty(from.orderqty());
    }
    if (from.has_orderbsflag()) {
      set_orderbsflag(from.orderbsflag());
    }
    if (from.has_channelno()) {
      set_channelno(from.channelno());
    }
    if (from.has_exchangedate()) {
      set_exchangedate(from.exchangedate());
    }
    if (from.has_exchangetime()) {
      set_exchangetime(from.exchangetime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void OrderData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.OrderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderData::CopyFrom(const OrderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.OrderData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool OrderData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OrderData::Swap(OrderData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OrderData::InternalSwap(OrderData* other) {
  htscsecurityid_.Swap(&other->htscsecurityid_);
  std::swap(mddate_, other->mddate_);
  std::swap(mdtime_, other->mdtime_);
  std::swap(securityidsource_, other->securityidsource_);
  std::swap(securitytype_, other->securitytype_);
  std::swap(orderindex_, other->orderindex_);
  std::swap(ordertype_, other->ordertype_);
  std::swap(orderprice_, other->orderprice_);
  std::swap(orderqty_, other->orderqty_);
  std::swap(orderbsflag_, other->orderbsflag_);
  std::swap(channelno_, other->channelno_);
  std::swap(exchangedate_, other->exchangedate_);
  std::swap(exchangetime_, other->exchangetime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OrderData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderData_descriptor_;
  metadata.reflection = OrderData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OrderData

// required string HTSCSecurityID = 1;
bool OrderData::has_htscsecurityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OrderData::set_has_htscsecurityid() {
  _has_bits_[0] |= 0x00000001u;
}
void OrderData::clear_has_htscsecurityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void OrderData::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_htscsecurityid();
}
const ::std::string& OrderData::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderData::set_htscsecurityid(const ::std::string& value) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.OrderData.HTSCSecurityID)
}
void OrderData::set_htscsecurityid(const char* value) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.OrderData.HTSCSecurityID)
}
void OrderData::set_htscsecurityid(const char* value, size_t size) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.OrderData.HTSCSecurityID)
}
::std::string* OrderData::mutable_htscsecurityid() {
  set_has_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:comm.OrderData.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OrderData::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:comm.OrderData.HTSCSecurityID)
  clear_has_htscsecurityid();
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OrderData::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    set_has_htscsecurityid();
  } else {
    clear_has_htscsecurityid();
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:comm.OrderData.HTSCSecurityID)
}

// required int32 MDDate = 2;
bool OrderData::has_mddate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OrderData::set_has_mddate() {
  _has_bits_[0] |= 0x00000002u;
}
void OrderData::clear_has_mddate() {
  _has_bits_[0] &= ~0x00000002u;
}
void OrderData::clear_mddate() {
  mddate_ = 0;
  clear_has_mddate();
}
::google::protobuf::int32 OrderData::mddate() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.MDDate)
  return mddate_;
}
void OrderData::set_mddate(::google::protobuf::int32 value) {
  set_has_mddate();
  mddate_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.MDDate)
}

// required int32 MDTime = 3;
bool OrderData::has_mdtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OrderData::set_has_mdtime() {
  _has_bits_[0] |= 0x00000004u;
}
void OrderData::clear_has_mdtime() {
  _has_bits_[0] &= ~0x00000004u;
}
void OrderData::clear_mdtime() {
  mdtime_ = 0;
  clear_has_mdtime();
}
::google::protobuf::int32 OrderData::mdtime() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.MDTime)
  return mdtime_;
}
void OrderData::set_mdtime(::google::protobuf::int32 value) {
  set_has_mdtime();
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.MDTime)
}

// optional int64 securityIDSource = 4;
bool OrderData::has_securityidsource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OrderData::set_has_securityidsource() {
  _has_bits_[0] |= 0x00000008u;
}
void OrderData::clear_has_securityidsource() {
  _has_bits_[0] &= ~0x00000008u;
}
void OrderData::clear_securityidsource() {
  securityidsource_ = GOOGLE_LONGLONG(0);
  clear_has_securityidsource();
}
::google::protobuf::int64 OrderData::securityidsource() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.securityIDSource)
  return securityidsource_;
}
void OrderData::set_securityidsource(::google::protobuf::int64 value) {
  set_has_securityidsource();
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.securityIDSource)
}

// optional int64 securityType = 5;
bool OrderData::has_securitytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void OrderData::set_has_securitytype() {
  _has_bits_[0] |= 0x00000010u;
}
void OrderData::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000010u;
}
void OrderData::clear_securitytype() {
  securitytype_ = GOOGLE_LONGLONG(0);
  clear_has_securitytype();
}
::google::protobuf::int64 OrderData::securitytype() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.securityType)
  return securitytype_;
}
void OrderData::set_securitytype(::google::protobuf::int64 value) {
  set_has_securitytype();
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.securityType)
}

// optional int64 OrderIndex = 6;
bool OrderData::has_orderindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void OrderData::set_has_orderindex() {
  _has_bits_[0] |= 0x00000020u;
}
void OrderData::clear_has_orderindex() {
  _has_bits_[0] &= ~0x00000020u;
}
void OrderData::clear_orderindex() {
  orderindex_ = GOOGLE_LONGLONG(0);
  clear_has_orderindex();
}
::google::protobuf::int64 OrderData::orderindex() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.OrderIndex)
  return orderindex_;
}
void OrderData::set_orderindex(::google::protobuf::int64 value) {
  set_has_orderindex();
  orderindex_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.OrderIndex)
}

// optional int32 OrderType = 7;
bool OrderData::has_ordertype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void OrderData::set_has_ordertype() {
  _has_bits_[0] |= 0x00000040u;
}
void OrderData::clear_has_ordertype() {
  _has_bits_[0] &= ~0x00000040u;
}
void OrderData::clear_ordertype() {
  ordertype_ = 0;
  clear_has_ordertype();
}
::google::protobuf::int32 OrderData::ordertype() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.OrderType)
  return ordertype_;
}
void OrderData::set_ordertype(::google::protobuf::int32 value) {
  set_has_ordertype();
  ordertype_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.OrderType)
}

// optional int64 OrderPrice = 8;
bool OrderData::has_orderprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void OrderData::set_has_orderprice() {
  _has_bits_[0] |= 0x00000080u;
}
void OrderData::clear_has_orderprice() {
  _has_bits_[0] &= ~0x00000080u;
}
void OrderData::clear_orderprice() {
  orderprice_ = GOOGLE_LONGLONG(0);
  clear_has_orderprice();
}
::google::protobuf::int64 OrderData::orderprice() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.OrderPrice)
  return orderprice_;
}
void OrderData::set_orderprice(::google::protobuf::int64 value) {
  set_has_orderprice();
  orderprice_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.OrderPrice)
}

// optional int64 OrderQty = 9;
bool OrderData::has_orderqty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void OrderData::set_has_orderqty() {
  _has_bits_[0] |= 0x00000100u;
}
void OrderData::clear_has_orderqty() {
  _has_bits_[0] &= ~0x00000100u;
}
void OrderData::clear_orderqty() {
  orderqty_ = GOOGLE_LONGLONG(0);
  clear_has_orderqty();
}
::google::protobuf::int64 OrderData::orderqty() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.OrderQty)
  return orderqty_;
}
void OrderData::set_orderqty(::google::protobuf::int64 value) {
  set_has_orderqty();
  orderqty_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.OrderQty)
}

// optional int32 OrderBSFlag = 10;
bool OrderData::has_orderbsflag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void OrderData::set_has_orderbsflag() {
  _has_bits_[0] |= 0x00000200u;
}
void OrderData::clear_has_orderbsflag() {
  _has_bits_[0] &= ~0x00000200u;
}
void OrderData::clear_orderbsflag() {
  orderbsflag_ = 0;
  clear_has_orderbsflag();
}
::google::protobuf::int32 OrderData::orderbsflag() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.OrderBSFlag)
  return orderbsflag_;
}
void OrderData::set_orderbsflag(::google::protobuf::int32 value) {
  set_has_orderbsflag();
  orderbsflag_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.OrderBSFlag)
}

// optional int32 ChannelNo = 11;
bool OrderData::has_channelno() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void OrderData::set_has_channelno() {
  _has_bits_[0] |= 0x00000400u;
}
void OrderData::clear_has_channelno() {
  _has_bits_[0] &= ~0x00000400u;
}
void OrderData::clear_channelno() {
  channelno_ = 0;
  clear_has_channelno();
}
::google::protobuf::int32 OrderData::channelno() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.ChannelNo)
  return channelno_;
}
void OrderData::set_channelno(::google::protobuf::int32 value) {
  set_has_channelno();
  channelno_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.ChannelNo)
}

// optional int32 ExchangeDate = 12;
bool OrderData::has_exchangedate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void OrderData::set_has_exchangedate() {
  _has_bits_[0] |= 0x00000800u;
}
void OrderData::clear_has_exchangedate() {
  _has_bits_[0] &= ~0x00000800u;
}
void OrderData::clear_exchangedate() {
  exchangedate_ = 0;
  clear_has_exchangedate();
}
::google::protobuf::int32 OrderData::exchangedate() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.ExchangeDate)
  return exchangedate_;
}
void OrderData::set_exchangedate(::google::protobuf::int32 value) {
  set_has_exchangedate();
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.ExchangeDate)
}

// optional int32 ExchangeTime = 13;
bool OrderData::has_exchangetime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void OrderData::set_has_exchangetime() {
  _has_bits_[0] |= 0x00001000u;
}
void OrderData::clear_has_exchangetime() {
  _has_bits_[0] &= ~0x00001000u;
}
void OrderData::clear_exchangetime() {
  exchangetime_ = 0;
  clear_has_exchangetime();
}
::google::protobuf::int32 OrderData::exchangetime() const {
  // @@protoc_insertion_point(field_get:comm.OrderData.ExchangeTime)
  return exchangetime_;
}
void OrderData::set_exchangetime(::google::protobuf::int32 value) {
  set_has_exchangetime();
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:comm.OrderData.ExchangeTime)
}

inline const OrderData* OrderData::internal_default_instance() {
  return &OrderData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
