// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactionData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transactionData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* TransactionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_transactionData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_transactionData_2eproto() {
  protobuf_AddDesc_transactionData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transactionData.proto");
  GOOGLE_CHECK(file != NULL);
  TransactionData_descriptor_ = file->message_type(0);
  static const int TransactionData_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, htscsecurityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, mddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, mdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, securityidsource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, securitytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradebuyno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradesellno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradebsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradeqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, trademoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, channelno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, exchangedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, exchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradecleanprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, accruedinterestamt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, tradedirtyprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, maturityyield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, fitradingmethod_),
  };
  TransactionData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransactionData_descriptor_,
      TransactionData::internal_default_instance(),
      TransactionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, _has_bits_),
      -1,
      -1,
      sizeof(TransactionData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transactionData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransactionData_descriptor_, TransactionData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transactionData_2eproto() {
  TransactionData_default_instance_.Shutdown();
  delete TransactionData_reflection_;
}

void protobuf_InitDefaults_transactionData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TransactionData_default_instance_.DefaultConstruct();
  TransactionData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_transactionData_2eproto_once_);
void protobuf_InitDefaults_transactionData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_transactionData_2eproto_once_,
                 &protobuf_InitDefaults_transactionData_2eproto_impl);
}
void protobuf_AddDesc_transactionData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_transactionData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025transactionData.proto\022\004comm\"\325\003\n\017Transa"
    "ctionData\022\026\n\016HTSCSecurityID\030\001 \002(\t\022\016\n\006MDD"
    "ate\030\002 \002(\005\022\016\n\006MDTime\030\003 \002(\005\022\030\n\020securityIDS"
    "ource\030\004 \001(\003\022\024\n\014securityType\030\005 \001(\003\022\022\n\nTra"
    "deIndex\030\006 \001(\003\022\022\n\nTradeBuyNo\030\007 \001(\003\022\023\n\013Tra"
    "deSellNo\030\010 \001(\003\022\021\n\tTradeType\030\t \001(\005\022\023\n\013Tra"
    "deBSFlag\030\n \001(\005\022\022\n\nTradePrice\030\013 \001(\003\022\020\n\010Tr"
    "adeQty\030\014 \001(\003\022\022\n\nTradeMoney\030\r \001(\003\022\021\n\tChan"
    "nelNo\030\016 \001(\005\022\024\n\014ExchangeDate\030\017 \001(\005\022\024\n\014Exc"
    "hangeTime\030\020 \001(\005\022\027\n\017TradeCleanPrice\030\021 \001(\003"
    "\022\032\n\022AccruedInterestAmt\030\022 \001(\003\022\027\n\017TradeDir"
    "tyPrice\030\023 \001(\003\022\025\n\rMaturityYield\030\024 \001(\003\022\027\n\017"
    "FITradingMethod\030\025 \001(\t", 501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transactionData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transactionData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_transactionData_2eproto_once_);
void protobuf_AddDesc_transactionData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_transactionData_2eproto_once_,
                 &protobuf_AddDesc_transactionData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transactionData_2eproto {
  StaticDescriptorInitializer_transactionData_2eproto() {
    protobuf_AddDesc_transactionData_2eproto();
  }
} static_descriptor_initializer_transactionData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionData::kHTSCSecurityIDFieldNumber;
const int TransactionData::kMDDateFieldNumber;
const int TransactionData::kMDTimeFieldNumber;
const int TransactionData::kSecurityIDSourceFieldNumber;
const int TransactionData::kSecurityTypeFieldNumber;
const int TransactionData::kTradeIndexFieldNumber;
const int TransactionData::kTradeBuyNoFieldNumber;
const int TransactionData::kTradeSellNoFieldNumber;
const int TransactionData::kTradeTypeFieldNumber;
const int TransactionData::kTradeBSFlagFieldNumber;
const int TransactionData::kTradePriceFieldNumber;
const int TransactionData::kTradeQtyFieldNumber;
const int TransactionData::kTradeMoneyFieldNumber;
const int TransactionData::kChannelNoFieldNumber;
const int TransactionData::kExchangeDateFieldNumber;
const int TransactionData::kExchangeTimeFieldNumber;
const int TransactionData::kTradeCleanPriceFieldNumber;
const int TransactionData::kAccruedInterestAmtFieldNumber;
const int TransactionData::kTradeDirtyPriceFieldNumber;
const int TransactionData::kMaturityYieldFieldNumber;
const int TransactionData::kFITradingMethodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionData::TransactionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transactionData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.TransactionData)
}

void TransactionData::InitAsDefaultInstance() {
}

TransactionData::TransactionData(const TransactionData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.TransactionData)
}

void TransactionData::SharedCtor() {
  _cached_size_ = 0;
  htscsecurityid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fitradingmethod_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mddate_, 0, reinterpret_cast<char*>(&exchangetime_) -
    reinterpret_cast<char*>(&mddate_) + sizeof(exchangetime_));
}

TransactionData::~TransactionData() {
  // @@protoc_insertion_point(destructor:comm.TransactionData)
  SharedDtor();
}

void TransactionData::SharedDtor() {
  htscsecurityid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fitradingmethod_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionData_descriptor_;
}

const TransactionData& TransactionData::default_instance() {
  protobuf_InitDefaults_transactionData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransactionData> TransactionData_default_instance_;

TransactionData* TransactionData::New(::google::protobuf::Arena* arena) const {
  TransactionData* n = new TransactionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.TransactionData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TransactionData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransactionData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(mddate_, tradesellno_);
    if (has_htscsecurityid()) {
      htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(tradetype_, exchangedate_);
    exchangetime_ = 0;
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(tradecleanprice_, maturityyield_);
    if (has_fitradingmethod()) {
      fitradingmethod_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TransactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.TransactionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string HTSCSecurityID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_htscsecurityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->htscsecurityid().data(), this->htscsecurityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.TransactionData.HTSCSecurityID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MDDate;
        break;
      }

      // required int32 MDDate = 2;
      case 2: {
        if (tag == 16) {
         parse_MDDate:
          set_has_mddate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mddate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MDTime;
        break;
      }

      // required int32 MDTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MDTime:
          set_has_mdtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mdtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_securityIDSource;
        break;
      }

      // optional int64 securityIDSource = 4;
      case 4: {
        if (tag == 32) {
         parse_securityIDSource:
          set_has_securityidsource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &securityidsource_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_securityType;
        break;
      }

      // optional int64 securityType = 5;
      case 5: {
        if (tag == 40) {
         parse_securityType:
          set_has_securitytype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &securitytype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TradeIndex;
        break;
      }

      // optional int64 TradeIndex = 6;
      case 6: {
        if (tag == 48) {
         parse_TradeIndex:
          set_has_tradeindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradeindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TradeBuyNo;
        break;
      }

      // optional int64 TradeBuyNo = 7;
      case 7: {
        if (tag == 56) {
         parse_TradeBuyNo:
          set_has_tradebuyno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradebuyno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TradeSellNo;
        break;
      }

      // optional int64 TradeSellNo = 8;
      case 8: {
        if (tag == 64) {
         parse_TradeSellNo:
          set_has_tradesellno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradesellno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TradeType;
        break;
      }

      // optional int32 TradeType = 9;
      case 9: {
        if (tag == 72) {
         parse_TradeType:
          set_has_tradetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradetype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TradeBSFlag;
        break;
      }

      // optional int32 TradeBSFlag = 10;
      case 10: {
        if (tag == 80) {
         parse_TradeBSFlag:
          set_has_tradebsflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradebsflag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_TradePrice;
        break;
      }

      // optional int64 TradePrice = 11;
      case 11: {
        if (tag == 88) {
         parse_TradePrice:
          set_has_tradeprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradeprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_TradeQty;
        break;
      }

      // optional int64 TradeQty = 12;
      case 12: {
        if (tag == 96) {
         parse_TradeQty:
          set_has_tradeqty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradeqty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_TradeMoney;
        break;
      }

      // optional int64 TradeMoney = 13;
      case 13: {
        if (tag == 104) {
         parse_TradeMoney:
          set_has_trademoney();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &trademoney_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ChannelNo;
        break;
      }

      // optional int32 ChannelNo = 14;
      case 14: {
        if (tag == 112) {
         parse_ChannelNo:
          set_has_channelno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelno_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ExchangeDate;
        break;
      }

      // optional int32 ExchangeDate = 15;
      case 15: {
        if (tag == 120) {
         parse_ExchangeDate:
          set_has_exchangedate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangedate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ExchangeTime;
        break;
      }

      // optional int32 ExchangeTime = 16;
      case 16: {
        if (tag == 128) {
         parse_ExchangeTime:
          set_has_exchangetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_TradeCleanPrice;
        break;
      }

      // optional int64 TradeCleanPrice = 17;
      case 17: {
        if (tag == 136) {
         parse_TradeCleanPrice:
          set_has_tradecleanprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradecleanprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_AccruedInterestAmt;
        break;
      }

      // optional int64 AccruedInterestAmt = 18;
      case 18: {
        if (tag == 144) {
         parse_AccruedInterestAmt:
          set_has_accruedinterestamt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accruedinterestamt_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_TradeDirtyPrice;
        break;
      }

      // optional int64 TradeDirtyPrice = 19;
      case 19: {
        if (tag == 152) {
         parse_TradeDirtyPrice:
          set_has_tradedirtyprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradedirtyprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_MaturityYield;
        break;
      }

      // optional int64 MaturityYield = 20;
      case 20: {
        if (tag == 160) {
         parse_MaturityYield:
          set_has_maturityyield();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maturityyield_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_FITradingMethod;
        break;
      }

      // optional string FITradingMethod = 21;
      case 21: {
        if (tag == 170) {
         parse_FITradingMethod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fitradingmethod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fitradingmethod().data(), this->fitradingmethod().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.TransactionData.FITradingMethod");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.TransactionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.TransactionData)
  return false;
#undef DO_
}

void TransactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.TransactionData)
  // required string HTSCSecurityID = 1;
  if (has_htscsecurityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.TransactionData.HTSCSecurityID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->htscsecurityid(), output);
  }

  // required int32 MDDate = 2;
  if (has_mddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mddate(), output);
  }

  // required int32 MDTime = 3;
  if (has_mdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mdtime(), output);
  }

  // optional int64 securityIDSource = 4;
  if (has_securityidsource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->securityidsource(), output);
  }

  // optional int64 securityType = 5;
  if (has_securitytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->securitytype(), output);
  }

  // optional int64 TradeIndex = 6;
  if (has_tradeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tradeindex(), output);
  }

  // optional int64 TradeBuyNo = 7;
  if (has_tradebuyno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->tradebuyno(), output);
  }

  // optional int64 TradeSellNo = 8;
  if (has_tradesellno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->tradesellno(), output);
  }

  // optional int32 TradeType = 9;
  if (has_tradetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tradetype(), output);
  }

  // optional int32 TradeBSFlag = 10;
  if (has_tradebsflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tradebsflag(), output);
  }

  // optional int64 TradePrice = 11;
  if (has_tradeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->tradeprice(), output);
  }

  // optional int64 TradeQty = 12;
  if (has_tradeqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->tradeqty(), output);
  }

  // optional int64 TradeMoney = 13;
  if (has_trademoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->trademoney(), output);
  }

  // optional int32 ChannelNo = 14;
  if (has_channelno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->channelno(), output);
  }

  // optional int32 ExchangeDate = 15;
  if (has_exchangedate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->exchangedate(), output);
  }

  // optional int32 ExchangeTime = 16;
  if (has_exchangetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->exchangetime(), output);
  }

  // optional int64 TradeCleanPrice = 17;
  if (has_tradecleanprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->tradecleanprice(), output);
  }

  // optional int64 AccruedInterestAmt = 18;
  if (has_accruedinterestamt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->accruedinterestamt(), output);
  }

  // optional int64 TradeDirtyPrice = 19;
  if (has_tradedirtyprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->tradedirtyprice(), output);
  }

  // optional int64 MaturityYield = 20;
  if (has_maturityyield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->maturityyield(), output);
  }

  // optional string FITradingMethod = 21;
  if (has_fitradingmethod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fitradingmethod().data(), this->fitradingmethod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.TransactionData.FITradingMethod");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->fitradingmethod(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.TransactionData)
}

::google::protobuf::uint8* TransactionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.TransactionData)
  // required string HTSCSecurityID = 1;
  if (has_htscsecurityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->htscsecurityid().data(), this->htscsecurityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.TransactionData.HTSCSecurityID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->htscsecurityid(), target);
  }

  // required int32 MDDate = 2;
  if (has_mddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mddate(), target);
  }

  // required int32 MDTime = 3;
  if (has_mdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mdtime(), target);
  }

  // optional int64 securityIDSource = 4;
  if (has_securityidsource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->securityidsource(), target);
  }

  // optional int64 securityType = 5;
  if (has_securitytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->securitytype(), target);
  }

  // optional int64 TradeIndex = 6;
  if (has_tradeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tradeindex(), target);
  }

  // optional int64 TradeBuyNo = 7;
  if (has_tradebuyno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->tradebuyno(), target);
  }

  // optional int64 TradeSellNo = 8;
  if (has_tradesellno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->tradesellno(), target);
  }

  // optional int32 TradeType = 9;
  if (has_tradetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tradetype(), target);
  }

  // optional int32 TradeBSFlag = 10;
  if (has_tradebsflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tradebsflag(), target);
  }

  // optional int64 TradePrice = 11;
  if (has_tradeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->tradeprice(), target);
  }

  // optional int64 TradeQty = 12;
  if (has_tradeqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->tradeqty(), target);
  }

  // optional int64 TradeMoney = 13;
  if (has_trademoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->trademoney(), target);
  }

  // optional int32 ChannelNo = 14;
  if (has_channelno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->channelno(), target);
  }

  // optional int32 ExchangeDate = 15;
  if (has_exchangedate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->exchangedate(), target);
  }

  // optional int32 ExchangeTime = 16;
  if (has_exchangetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->exchangetime(), target);
  }

  // optional int64 TradeCleanPrice = 17;
  if (has_tradecleanprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->tradecleanprice(), target);
  }

  // optional int64 AccruedInterestAmt = 18;
  if (has_accruedinterestamt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->accruedinterestamt(), target);
  }

  // optional int64 TradeDirtyPrice = 19;
  if (has_tradedirtyprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->tradedirtyprice(), target);
  }

  // optional int64 MaturityYield = 20;
  if (has_maturityyield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->maturityyield(), target);
  }

  // optional string FITradingMethod = 21;
  if (has_fitradingmethod()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fitradingmethod().data(), this->fitradingmethod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.TransactionData.FITradingMethod");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->fitradingmethod(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.TransactionData)
  return target;
}

size_t TransactionData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:comm.TransactionData)
  size_t total_size = 0;

  if (has_htscsecurityid()) {
    // required string HTSCSecurityID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());
  }

  if (has_mddate()) {
    // required int32 MDDate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());
  }

  if (has_mdtime()) {
    // required int32 MDTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());
  }

  return total_size;
}
size_t TransactionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.TransactionData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string HTSCSecurityID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->htscsecurityid());

    // required int32 MDDate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mddate());

    // required int32 MDTime = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mdtime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional int64 securityIDSource = 4;
    if (has_securityidsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->securityidsource());
    }

    // optional int64 securityType = 5;
    if (has_securitytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->securitytype());
    }

    // optional int64 TradeIndex = 6;
    if (has_tradeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradeindex());
    }

    // optional int64 TradeBuyNo = 7;
    if (has_tradebuyno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradebuyno());
    }

    // optional int64 TradeSellNo = 8;
    if (has_tradesellno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradesellno());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 TradeType = 9;
    if (has_tradetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradetype());
    }

    // optional int32 TradeBSFlag = 10;
    if (has_tradebsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradebsflag());
    }

    // optional int64 TradePrice = 11;
    if (has_tradeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradeprice());
    }

    // optional int64 TradeQty = 12;
    if (has_tradeqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradeqty());
    }

    // optional int64 TradeMoney = 13;
    if (has_trademoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->trademoney());
    }

    // optional int32 ChannelNo = 14;
    if (has_channelno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channelno());
    }

    // optional int32 ExchangeDate = 15;
    if (has_exchangedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangedate());
    }

    // optional int32 ExchangeTime = 16;
    if (has_exchangetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangetime());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional int64 TradeCleanPrice = 17;
    if (has_tradecleanprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradecleanprice());
    }

    // optional int64 AccruedInterestAmt = 18;
    if (has_accruedinterestamt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accruedinterestamt());
    }

    // optional int64 TradeDirtyPrice = 19;
    if (has_tradedirtyprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradedirtyprice());
    }

    // optional int64 MaturityYield = 20;
    if (has_maturityyield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maturityyield());
    }

    // optional string FITradingMethod = 21;
    if (has_fitradingmethod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fitradingmethod());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.TransactionData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransactionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.TransactionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.TransactionData)
    UnsafeMergeFrom(*source);
  }
}

void TransactionData::MergeFrom(const TransactionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.TransactionData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransactionData::UnsafeMergeFrom(const TransactionData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_htscsecurityid()) {
      set_has_htscsecurityid();
      htscsecurityid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.htscsecurityid_);
    }
    if (from.has_mddate()) {
      set_mddate(from.mddate());
    }
    if (from.has_mdtime()) {
      set_mdtime(from.mdtime());
    }
    if (from.has_securityidsource()) {
      set_securityidsource(from.securityidsource());
    }
    if (from.has_securitytype()) {
      set_securitytype(from.securitytype());
    }
    if (from.has_tradeindex()) {
      set_tradeindex(from.tradeindex());
    }
    if (from.has_tradebuyno()) {
      set_tradebuyno(from.tradebuyno());
    }
    if (from.has_tradesellno()) {
      set_tradesellno(from.tradesellno());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tradetype()) {
      set_tradetype(from.tradetype());
    }
    if (from.has_tradebsflag()) {
      set_tradebsflag(from.tradebsflag());
    }
    if (from.has_tradeprice()) {
      set_tradeprice(from.tradeprice());
    }
    if (from.has_tradeqty()) {
      set_tradeqty(from.tradeqty());
    }
    if (from.has_trademoney()) {
      set_trademoney(from.trademoney());
    }
    if (from.has_channelno()) {
      set_channelno(from.channelno());
    }
    if (from.has_exchangedate()) {
      set_exchangedate(from.exchangedate());
    }
    if (from.has_exchangetime()) {
      set_exchangetime(from.exchangetime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tradecleanprice()) {
      set_tradecleanprice(from.tradecleanprice());
    }
    if (from.has_accruedinterestamt()) {
      set_accruedinterestamt(from.accruedinterestamt());
    }
    if (from.has_tradedirtyprice()) {
      set_tradedirtyprice(from.tradedirtyprice());
    }
    if (from.has_maturityyield()) {
      set_maturityyield(from.maturityyield());
    }
    if (from.has_fitradingmethod()) {
      set_has_fitradingmethod();
      fitradingmethod_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fitradingmethod_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TransactionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.TransactionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionData::CopyFrom(const TransactionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.TransactionData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransactionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TransactionData::Swap(TransactionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionData::InternalSwap(TransactionData* other) {
  htscsecurityid_.Swap(&other->htscsecurityid_);
  std::swap(mddate_, other->mddate_);
  std::swap(mdtime_, other->mdtime_);
  std::swap(securityidsource_, other->securityidsource_);
  std::swap(securitytype_, other->securitytype_);
  std::swap(tradeindex_, other->tradeindex_);
  std::swap(tradebuyno_, other->tradebuyno_);
  std::swap(tradesellno_, other->tradesellno_);
  std::swap(tradetype_, other->tradetype_);
  std::swap(tradebsflag_, other->tradebsflag_);
  std::swap(tradeprice_, other->tradeprice_);
  std::swap(tradeqty_, other->tradeqty_);
  std::swap(trademoney_, other->trademoney_);
  std::swap(channelno_, other->channelno_);
  std::swap(exchangedate_, other->exchangedate_);
  std::swap(exchangetime_, other->exchangetime_);
  std::swap(tradecleanprice_, other->tradecleanprice_);
  std::swap(accruedinterestamt_, other->accruedinterestamt_);
  std::swap(tradedirtyprice_, other->tradedirtyprice_);
  std::swap(maturityyield_, other->maturityyield_);
  fitradingmethod_.Swap(&other->fitradingmethod_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionData_descriptor_;
  metadata.reflection = TransactionData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionData

// required string HTSCSecurityID = 1;
bool TransactionData::has_htscsecurityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionData::set_has_htscsecurityid() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionData::clear_has_htscsecurityid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionData::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_htscsecurityid();
}
const ::std::string& TransactionData::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionData::set_htscsecurityid(const ::std::string& value) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.TransactionData.HTSCSecurityID)
}
void TransactionData::set_htscsecurityid(const char* value) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.TransactionData.HTSCSecurityID)
}
void TransactionData::set_htscsecurityid(const char* value, size_t size) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.TransactionData.HTSCSecurityID)
}
::std::string* TransactionData::mutable_htscsecurityid() {
  set_has_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:comm.TransactionData.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionData::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:comm.TransactionData.HTSCSecurityID)
  clear_has_htscsecurityid();
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionData::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    set_has_htscsecurityid();
  } else {
    clear_has_htscsecurityid();
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:comm.TransactionData.HTSCSecurityID)
}

// required int32 MDDate = 2;
bool TransactionData::has_mddate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionData::set_has_mddate() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionData::clear_has_mddate() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionData::clear_mddate() {
  mddate_ = 0;
  clear_has_mddate();
}
::google::protobuf::int32 TransactionData::mddate() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.MDDate)
  return mddate_;
}
void TransactionData::set_mddate(::google::protobuf::int32 value) {
  set_has_mddate();
  mddate_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.MDDate)
}

// required int32 MDTime = 3;
bool TransactionData::has_mdtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionData::set_has_mdtime() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionData::clear_has_mdtime() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionData::clear_mdtime() {
  mdtime_ = 0;
  clear_has_mdtime();
}
::google::protobuf::int32 TransactionData::mdtime() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.MDTime)
  return mdtime_;
}
void TransactionData::set_mdtime(::google::protobuf::int32 value) {
  set_has_mdtime();
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.MDTime)
}

// optional int64 securityIDSource = 4;
bool TransactionData::has_securityidsource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionData::set_has_securityidsource() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionData::clear_has_securityidsource() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionData::clear_securityidsource() {
  securityidsource_ = GOOGLE_LONGLONG(0);
  clear_has_securityidsource();
}
::google::protobuf::int64 TransactionData::securityidsource() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.securityIDSource)
  return securityidsource_;
}
void TransactionData::set_securityidsource(::google::protobuf::int64 value) {
  set_has_securityidsource();
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.securityIDSource)
}

// optional int64 securityType = 5;
bool TransactionData::has_securitytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionData::set_has_securitytype() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionData::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionData::clear_securitytype() {
  securitytype_ = GOOGLE_LONGLONG(0);
  clear_has_securitytype();
}
::google::protobuf::int64 TransactionData::securitytype() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.securityType)
  return securitytype_;
}
void TransactionData::set_securitytype(::google::protobuf::int64 value) {
  set_has_securitytype();
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.securityType)
}

// optional int64 TradeIndex = 6;
bool TransactionData::has_tradeindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransactionData::set_has_tradeindex() {
  _has_bits_[0] |= 0x00000020u;
}
void TransactionData::clear_has_tradeindex() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransactionData::clear_tradeindex() {
  tradeindex_ = GOOGLE_LONGLONG(0);
  clear_has_tradeindex();
}
::google::protobuf::int64 TransactionData::tradeindex() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeIndex)
  return tradeindex_;
}
void TransactionData::set_tradeindex(::google::protobuf::int64 value) {
  set_has_tradeindex();
  tradeindex_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeIndex)
}

// optional int64 TradeBuyNo = 7;
bool TransactionData::has_tradebuyno() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TransactionData::set_has_tradebuyno() {
  _has_bits_[0] |= 0x00000040u;
}
void TransactionData::clear_has_tradebuyno() {
  _has_bits_[0] &= ~0x00000040u;
}
void TransactionData::clear_tradebuyno() {
  tradebuyno_ = GOOGLE_LONGLONG(0);
  clear_has_tradebuyno();
}
::google::protobuf::int64 TransactionData::tradebuyno() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeBuyNo)
  return tradebuyno_;
}
void TransactionData::set_tradebuyno(::google::protobuf::int64 value) {
  set_has_tradebuyno();
  tradebuyno_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeBuyNo)
}

// optional int64 TradeSellNo = 8;
bool TransactionData::has_tradesellno() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TransactionData::set_has_tradesellno() {
  _has_bits_[0] |= 0x00000080u;
}
void TransactionData::clear_has_tradesellno() {
  _has_bits_[0] &= ~0x00000080u;
}
void TransactionData::clear_tradesellno() {
  tradesellno_ = GOOGLE_LONGLONG(0);
  clear_has_tradesellno();
}
::google::protobuf::int64 TransactionData::tradesellno() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeSellNo)
  return tradesellno_;
}
void TransactionData::set_tradesellno(::google::protobuf::int64 value) {
  set_has_tradesellno();
  tradesellno_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeSellNo)
}

// optional int32 TradeType = 9;
bool TransactionData::has_tradetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TransactionData::set_has_tradetype() {
  _has_bits_[0] |= 0x00000100u;
}
void TransactionData::clear_has_tradetype() {
  _has_bits_[0] &= ~0x00000100u;
}
void TransactionData::clear_tradetype() {
  tradetype_ = 0;
  clear_has_tradetype();
}
::google::protobuf::int32 TransactionData::tradetype() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeType)
  return tradetype_;
}
void TransactionData::set_tradetype(::google::protobuf::int32 value) {
  set_has_tradetype();
  tradetype_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeType)
}

// optional int32 TradeBSFlag = 10;
bool TransactionData::has_tradebsflag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TransactionData::set_has_tradebsflag() {
  _has_bits_[0] |= 0x00000200u;
}
void TransactionData::clear_has_tradebsflag() {
  _has_bits_[0] &= ~0x00000200u;
}
void TransactionData::clear_tradebsflag() {
  tradebsflag_ = 0;
  clear_has_tradebsflag();
}
::google::protobuf::int32 TransactionData::tradebsflag() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeBSFlag)
  return tradebsflag_;
}
void TransactionData::set_tradebsflag(::google::protobuf::int32 value) {
  set_has_tradebsflag();
  tradebsflag_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeBSFlag)
}

// optional int64 TradePrice = 11;
bool TransactionData::has_tradeprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TransactionData::set_has_tradeprice() {
  _has_bits_[0] |= 0x00000400u;
}
void TransactionData::clear_has_tradeprice() {
  _has_bits_[0] &= ~0x00000400u;
}
void TransactionData::clear_tradeprice() {
  tradeprice_ = GOOGLE_LONGLONG(0);
  clear_has_tradeprice();
}
::google::protobuf::int64 TransactionData::tradeprice() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradePrice)
  return tradeprice_;
}
void TransactionData::set_tradeprice(::google::protobuf::int64 value) {
  set_has_tradeprice();
  tradeprice_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradePrice)
}

// optional int64 TradeQty = 12;
bool TransactionData::has_tradeqty() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TransactionData::set_has_tradeqty() {
  _has_bits_[0] |= 0x00000800u;
}
void TransactionData::clear_has_tradeqty() {
  _has_bits_[0] &= ~0x00000800u;
}
void TransactionData::clear_tradeqty() {
  tradeqty_ = GOOGLE_LONGLONG(0);
  clear_has_tradeqty();
}
::google::protobuf::int64 TransactionData::tradeqty() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeQty)
  return tradeqty_;
}
void TransactionData::set_tradeqty(::google::protobuf::int64 value) {
  set_has_tradeqty();
  tradeqty_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeQty)
}

// optional int64 TradeMoney = 13;
bool TransactionData::has_trademoney() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TransactionData::set_has_trademoney() {
  _has_bits_[0] |= 0x00001000u;
}
void TransactionData::clear_has_trademoney() {
  _has_bits_[0] &= ~0x00001000u;
}
void TransactionData::clear_trademoney() {
  trademoney_ = GOOGLE_LONGLONG(0);
  clear_has_trademoney();
}
::google::protobuf::int64 TransactionData::trademoney() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeMoney)
  return trademoney_;
}
void TransactionData::set_trademoney(::google::protobuf::int64 value) {
  set_has_trademoney();
  trademoney_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeMoney)
}

// optional int32 ChannelNo = 14;
bool TransactionData::has_channelno() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TransactionData::set_has_channelno() {
  _has_bits_[0] |= 0x00002000u;
}
void TransactionData::clear_has_channelno() {
  _has_bits_[0] &= ~0x00002000u;
}
void TransactionData::clear_channelno() {
  channelno_ = 0;
  clear_has_channelno();
}
::google::protobuf::int32 TransactionData::channelno() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.ChannelNo)
  return channelno_;
}
void TransactionData::set_channelno(::google::protobuf::int32 value) {
  set_has_channelno();
  channelno_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.ChannelNo)
}

// optional int32 ExchangeDate = 15;
bool TransactionData::has_exchangedate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TransactionData::set_has_exchangedate() {
  _has_bits_[0] |= 0x00004000u;
}
void TransactionData::clear_has_exchangedate() {
  _has_bits_[0] &= ~0x00004000u;
}
void TransactionData::clear_exchangedate() {
  exchangedate_ = 0;
  clear_has_exchangedate();
}
::google::protobuf::int32 TransactionData::exchangedate() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.ExchangeDate)
  return exchangedate_;
}
void TransactionData::set_exchangedate(::google::protobuf::int32 value) {
  set_has_exchangedate();
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.ExchangeDate)
}

// optional int32 ExchangeTime = 16;
bool TransactionData::has_exchangetime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TransactionData::set_has_exchangetime() {
  _has_bits_[0] |= 0x00008000u;
}
void TransactionData::clear_has_exchangetime() {
  _has_bits_[0] &= ~0x00008000u;
}
void TransactionData::clear_exchangetime() {
  exchangetime_ = 0;
  clear_has_exchangetime();
}
::google::protobuf::int32 TransactionData::exchangetime() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.ExchangeTime)
  return exchangetime_;
}
void TransactionData::set_exchangetime(::google::protobuf::int32 value) {
  set_has_exchangetime();
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.ExchangeTime)
}

// optional int64 TradeCleanPrice = 17;
bool TransactionData::has_tradecleanprice() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TransactionData::set_has_tradecleanprice() {
  _has_bits_[0] |= 0x00010000u;
}
void TransactionData::clear_has_tradecleanprice() {
  _has_bits_[0] &= ~0x00010000u;
}
void TransactionData::clear_tradecleanprice() {
  tradecleanprice_ = GOOGLE_LONGLONG(0);
  clear_has_tradecleanprice();
}
::google::protobuf::int64 TransactionData::tradecleanprice() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeCleanPrice)
  return tradecleanprice_;
}
void TransactionData::set_tradecleanprice(::google::protobuf::int64 value) {
  set_has_tradecleanprice();
  tradecleanprice_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeCleanPrice)
}

// optional int64 AccruedInterestAmt = 18;
bool TransactionData::has_accruedinterestamt() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TransactionData::set_has_accruedinterestamt() {
  _has_bits_[0] |= 0x00020000u;
}
void TransactionData::clear_has_accruedinterestamt() {
  _has_bits_[0] &= ~0x00020000u;
}
void TransactionData::clear_accruedinterestamt() {
  accruedinterestamt_ = GOOGLE_LONGLONG(0);
  clear_has_accruedinterestamt();
}
::google::protobuf::int64 TransactionData::accruedinterestamt() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.AccruedInterestAmt)
  return accruedinterestamt_;
}
void TransactionData::set_accruedinterestamt(::google::protobuf::int64 value) {
  set_has_accruedinterestamt();
  accruedinterestamt_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.AccruedInterestAmt)
}

// optional int64 TradeDirtyPrice = 19;
bool TransactionData::has_tradedirtyprice() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TransactionData::set_has_tradedirtyprice() {
  _has_bits_[0] |= 0x00040000u;
}
void TransactionData::clear_has_tradedirtyprice() {
  _has_bits_[0] &= ~0x00040000u;
}
void TransactionData::clear_tradedirtyprice() {
  tradedirtyprice_ = GOOGLE_LONGLONG(0);
  clear_has_tradedirtyprice();
}
::google::protobuf::int64 TransactionData::tradedirtyprice() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.TradeDirtyPrice)
  return tradedirtyprice_;
}
void TransactionData::set_tradedirtyprice(::google::protobuf::int64 value) {
  set_has_tradedirtyprice();
  tradedirtyprice_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.TradeDirtyPrice)
}

// optional int64 MaturityYield = 20;
bool TransactionData::has_maturityyield() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TransactionData::set_has_maturityyield() {
  _has_bits_[0] |= 0x00080000u;
}
void TransactionData::clear_has_maturityyield() {
  _has_bits_[0] &= ~0x00080000u;
}
void TransactionData::clear_maturityyield() {
  maturityyield_ = GOOGLE_LONGLONG(0);
  clear_has_maturityyield();
}
::google::protobuf::int64 TransactionData::maturityyield() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.MaturityYield)
  return maturityyield_;
}
void TransactionData::set_maturityyield(::google::protobuf::int64 value) {
  set_has_maturityyield();
  maturityyield_ = value;
  // @@protoc_insertion_point(field_set:comm.TransactionData.MaturityYield)
}

// optional string FITradingMethod = 21;
bool TransactionData::has_fitradingmethod() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TransactionData::set_has_fitradingmethod() {
  _has_bits_[0] |= 0x00100000u;
}
void TransactionData::clear_has_fitradingmethod() {
  _has_bits_[0] &= ~0x00100000u;
}
void TransactionData::clear_fitradingmethod() {
  fitradingmethod_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fitradingmethod();
}
const ::std::string& TransactionData::fitradingmethod() const {
  // @@protoc_insertion_point(field_get:comm.TransactionData.FITradingMethod)
  return fitradingmethod_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionData::set_fitradingmethod(const ::std::string& value) {
  set_has_fitradingmethod();
  fitradingmethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.TransactionData.FITradingMethod)
}
void TransactionData::set_fitradingmethod(const char* value) {
  set_has_fitradingmethod();
  fitradingmethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.TransactionData.FITradingMethod)
}
void TransactionData::set_fitradingmethod(const char* value, size_t size) {
  set_has_fitradingmethod();
  fitradingmethod_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.TransactionData.FITradingMethod)
}
::std::string* TransactionData::mutable_fitradingmethod() {
  set_has_fitradingmethod();
  // @@protoc_insertion_point(field_mutable:comm.TransactionData.FITradingMethod)
  return fitradingmethod_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionData::release_fitradingmethod() {
  // @@protoc_insertion_point(field_release:comm.TransactionData.FITradingMethod)
  clear_has_fitradingmethod();
  return fitradingmethod_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionData::set_allocated_fitradingmethod(::std::string* fitradingmethod) {
  if (fitradingmethod != NULL) {
    set_has_fitradingmethod();
  } else {
    clear_has_fitradingmethod();
  }
  fitradingmethod_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fitradingmethod);
  // @@protoc_insertion_point(field_set_allocated:comm.TransactionData.FITradingMethod)
}

inline const TransactionData* TransactionData::internal_default_instance() {
  return &TransactionData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
