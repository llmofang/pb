// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subStock.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "subStock.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* SubStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubStock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_subStock_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_subStock_2eproto() {
  protobuf_AddDesc_subStock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "subStock.proto");
  GOOGLE_CHECK(file != NULL);
  SubStock_descriptor_ = file->message_type(0);
  static const int SubStock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubStock, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubStock, sub_flag_),
  };
  SubStock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubStock_descriptor_,
      SubStock::internal_default_instance(),
      SubStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubStock, _has_bits_),
      -1,
      -1,
      sizeof(SubStock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubStock, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_subStock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubStock_descriptor_, SubStock::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_subStock_2eproto() {
  SubStock_default_instance_.Shutdown();
  delete SubStock_reflection_;
}

void protobuf_InitDefaults_subStock_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  SubStock_default_instance_.DefaultConstruct();
  SubStock_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_subStock_2eproto_once_);
void protobuf_InitDefaults_subStock_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_subStock_2eproto_once_,
                 &protobuf_InitDefaults_subStock_2eproto_impl);
}
void protobuf_AddDesc_subStock_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_subStock_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016subStock.proto\022\004comm\"0\n\010SubStock\022\022\n\nst"
    "ock_code\030\001 \002(\014\022\020\n\010sub_flag\030\002 \002(\010", 72);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subStock.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_subStock_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_subStock_2eproto_once_);
void protobuf_AddDesc_subStock_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_subStock_2eproto_once_,
                 &protobuf_AddDesc_subStock_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_subStock_2eproto {
  StaticDescriptorInitializer_subStock_2eproto() {
    protobuf_AddDesc_subStock_2eproto();
  }
} static_descriptor_initializer_subStock_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubStock::kStockCodeFieldNumber;
const int SubStock::kSubFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubStock::SubStock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_subStock_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.SubStock)
}

void SubStock::InitAsDefaultInstance() {
}

SubStock::SubStock(const SubStock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.SubStock)
}

void SubStock::SharedCtor() {
  _cached_size_ = 0;
  stock_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_flag_ = false;
}

SubStock::~SubStock() {
  // @@protoc_insertion_point(destructor:comm.SubStock)
  SharedDtor();
}

void SubStock::SharedDtor() {
  stock_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubStock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubStock_descriptor_;
}

const SubStock& SubStock::default_instance() {
  protobuf_InitDefaults_subStock_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<SubStock> SubStock_default_instance_;

SubStock* SubStock::New(::google::protobuf::Arena* arena) const {
  SubStock* n = new SubStock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubStock::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.SubStock)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stock_code()) {
      stock_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sub_flag_ = false;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SubStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.SubStock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes stock_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stock_code()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sub_flag;
        break;
      }

      // required bool sub_flag = 2;
      case 2: {
        if (tag == 16) {
         parse_sub_flag:
          set_has_sub_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sub_flag_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.SubStock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.SubStock)
  return false;
#undef DO_
}

void SubStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.SubStock)
  // required bytes stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->stock_code(), output);
  }

  // required bool sub_flag = 2;
  if (has_sub_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sub_flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.SubStock)
}

::google::protobuf::uint8* SubStock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.SubStock)
  // required bytes stock_code = 1;
  if (has_stock_code()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->stock_code(), target);
  }

  // required bool sub_flag = 2;
  if (has_sub_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sub_flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.SubStock)
  return target;
}

size_t SubStock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:comm.SubStock)
  size_t total_size = 0;

  if (has_stock_code()) {
    // required bytes stock_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stock_code());
  }

  if (has_sub_flag()) {
    // required bool sub_flag = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SubStock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.SubStock)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes stock_code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stock_code());

    // required bool sub_flag = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubStock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.SubStock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SubStock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubStock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.SubStock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.SubStock)
    UnsafeMergeFrom(*source);
  }
}

void SubStock::MergeFrom(const SubStock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.SubStock)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void SubStock::UnsafeMergeFrom(const SubStock& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_has_stock_code();
      stock_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stock_code_);
    }
    if (from.has_sub_flag()) {
      set_sub_flag(from.sub_flag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void SubStock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.SubStock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubStock::CopyFrom(const SubStock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.SubStock)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool SubStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SubStock::Swap(SubStock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubStock::InternalSwap(SubStock* other) {
  stock_code_.Swap(&other->stock_code_);
  std::swap(sub_flag_, other->sub_flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubStock_descriptor_;
  metadata.reflection = SubStock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubStock

// required bytes stock_code = 1;
bool SubStock::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SubStock::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
void SubStock::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void SubStock::clear_stock_code() {
  stock_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_code();
}
const ::std::string& SubStock::stock_code() const {
  // @@protoc_insertion_point(field_get:comm.SubStock.stock_code)
  return stock_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubStock::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.SubStock.stock_code)
}
void SubStock::set_stock_code(const char* value) {
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.SubStock.stock_code)
}
void SubStock::set_stock_code(const void* value, size_t size) {
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.SubStock.stock_code)
}
::std::string* SubStock::mutable_stock_code() {
  set_has_stock_code();
  // @@protoc_insertion_point(field_mutable:comm.SubStock.stock_code)
  return stock_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubStock::release_stock_code() {
  // @@protoc_insertion_point(field_release:comm.SubStock.stock_code)
  clear_has_stock_code();
  return stock_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubStock::set_allocated_stock_code(::std::string* stock_code) {
  if (stock_code != NULL) {
    set_has_stock_code();
  } else {
    clear_has_stock_code();
  }
  stock_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_code);
  // @@protoc_insertion_point(field_set_allocated:comm.SubStock.stock_code)
}

// required bool sub_flag = 2;
bool SubStock::has_sub_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SubStock::set_has_sub_flag() {
  _has_bits_[0] |= 0x00000002u;
}
void SubStock::clear_has_sub_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
void SubStock::clear_sub_flag() {
  sub_flag_ = false;
  clear_has_sub_flag();
}
bool SubStock::sub_flag() const {
  // @@protoc_insertion_point(field_get:comm.SubStock.sub_flag)
  return sub_flag_;
}
void SubStock::set_sub_flag(bool value) {
  set_has_sub_flag();
  sub_flag_ = value;
  // @@protoc_insertion_point(field_set:comm.SubStock.sub_flag)
}

inline const SubStock* SubStock::internal_default_instance() {
  return &SubStock_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
