// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: futureData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "futureData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* FutureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FutureData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_futureData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_futureData_2eproto() {
  protobuf_AddDesc_futureData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "futureData.proto");
  GOOGLE_CHECK(file != NULL);
  FutureData_descriptor_ = file->message_type(0);
  static const int FutureData_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, windcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, actionday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, preopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, presettleprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, settleprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, highlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, lowlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, predelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, currdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, askvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, bidvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, auctionprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, auctionqty_),
  };
  FutureData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FutureData_descriptor_,
      FutureData::internal_default_instance(),
      FutureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, _has_bits_),
      -1,
      -1,
      sizeof(FutureData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_futureData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FutureData_descriptor_, FutureData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_futureData_2eproto() {
  FutureData_default_instance_.Shutdown();
  delete FutureData_reflection_;
}

void protobuf_InitDefaults_futureData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  FutureData_default_instance_.DefaultConstruct();
  FutureData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_futureData_2eproto_once_);
void protobuf_InitDefaults_futureData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_futureData_2eproto_once_,
                 &protobuf_InitDefaults_futureData_2eproto_impl);
}
void protobuf_AddDesc_futureData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_futureData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020futureData.proto\022\004comm\"\204\004\n\nFutureData\022"
    "\020\n\010WindCode\030\001 \002(\t\022\014\n\004Code\030\002 \002(\t\022\021\n\tActio"
    "nDay\030\003 \002(\005\022\022\n\nTradingDay\030\004 \002(\005\022\014\n\004Time\030\005"
    " \002(\005\022\016\n\006Status\030\006 \002(\005\022\027\n\017PreOpenInterest\030"
    "\007 \002(\003\022\020\n\010PreClose\030\010 \002(\r\022\026\n\016PreSettlePric"
    "e\030\t \002(\r\022\014\n\004Open\030\n \002(\r\022\014\n\004High\030\013 \002(\r\022\013\n\003L"
    "ow\030\014 \002(\r\022\r\n\005Match\030\r \002(\r\022\016\n\006Volume\030\016 \002(\003\022"
    "\020\n\010Turnover\030\017 \002(\003\022\024\n\014openInterest\030\020 \002(\003\022"
    "\r\n\005Close\030\021 \002(\r\022\023\n\013SettlePrice\030\022 \002(\r\022\023\n\013H"
    "ighLimited\030\023 \002(\r\022\022\n\nLowLimited\030\024 \002(\r\022\020\n\010"
    "PreDelta\030\025 \002(\005\022\021\n\tCurrDelta\030\026 \002(\005\022\020\n\010Ask"
    "Price\030\027 \003(\r\022\016\n\006AskVol\030\030 \003(\r\022\020\n\010BidPrice\030"
    "\031 \003(\r\022\016\n\006BidVol\030\032 \003(\r\022\024\n\014AuctionPrice\030\033 "
    "\002(\005\022\022\n\nAuctionQty\030\034 \002(\005", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "futureData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_futureData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_futureData_2eproto_once_);
void protobuf_AddDesc_futureData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_futureData_2eproto_once_,
                 &protobuf_AddDesc_futureData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_futureData_2eproto {
  StaticDescriptorInitializer_futureData_2eproto() {
    protobuf_AddDesc_futureData_2eproto();
  }
} static_descriptor_initializer_futureData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FutureData::kWindCodeFieldNumber;
const int FutureData::kCodeFieldNumber;
const int FutureData::kActionDayFieldNumber;
const int FutureData::kTradingDayFieldNumber;
const int FutureData::kTimeFieldNumber;
const int FutureData::kStatusFieldNumber;
const int FutureData::kPreOpenInterestFieldNumber;
const int FutureData::kPreCloseFieldNumber;
const int FutureData::kPreSettlePriceFieldNumber;
const int FutureData::kOpenFieldNumber;
const int FutureData::kHighFieldNumber;
const int FutureData::kLowFieldNumber;
const int FutureData::kMatchFieldNumber;
const int FutureData::kVolumeFieldNumber;
const int FutureData::kTurnoverFieldNumber;
const int FutureData::kOpenInterestFieldNumber;
const int FutureData::kCloseFieldNumber;
const int FutureData::kSettlePriceFieldNumber;
const int FutureData::kHighLimitedFieldNumber;
const int FutureData::kLowLimitedFieldNumber;
const int FutureData::kPreDeltaFieldNumber;
const int FutureData::kCurrDeltaFieldNumber;
const int FutureData::kAskPriceFieldNumber;
const int FutureData::kAskVolFieldNumber;
const int FutureData::kBidPriceFieldNumber;
const int FutureData::kBidVolFieldNumber;
const int FutureData::kAuctionPriceFieldNumber;
const int FutureData::kAuctionQtyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FutureData::FutureData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_futureData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.FutureData)
}

void FutureData::InitAsDefaultInstance() {
}

FutureData::FutureData(const FutureData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.FutureData)
}

void FutureData::SharedCtor() {
  _cached_size_ = 0;
  windcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actionday_, 0, reinterpret_cast<char*>(&auctionqty_) -
    reinterpret_cast<char*>(&actionday_) + sizeof(auctionqty_));
}

FutureData::~FutureData() {
  // @@protoc_insertion_point(destructor:comm.FutureData)
  SharedDtor();
}

void FutureData::SharedDtor() {
  windcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FutureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FutureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FutureData_descriptor_;
}

const FutureData& FutureData::default_instance() {
  protobuf_InitDefaults_futureData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FutureData> FutureData_default_instance_;

FutureData* FutureData::New(::google::protobuf::Arena* arena) const {
  FutureData* n = new FutureData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FutureData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.FutureData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FutureData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FutureData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(actionday_, preclose_);
    if (has_windcode()) {
      windcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_code()) {
      code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(presettleprice_, openinterest_);
  ZR_(close_, currdelta_);
  ZR_(auctionprice_, auctionqty_);

#undef ZR_HELPER_
#undef ZR_

  askprice_.Clear();
  askvol_.Clear();
  bidprice_.Clear();
  bidvol_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FutureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.FutureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string WindCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->windcode().data(), this->windcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.FutureData.WindCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (tag == 18) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.FutureData.Code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ActionDay;
        break;
      }

      // required int32 ActionDay = 3;
      case 3: {
        if (tag == 24) {
         parse_ActionDay:
          set_has_actionday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionday_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TradingDay;
        break;
      }

      // required int32 TradingDay = 4;
      case 4: {
        if (tag == 32) {
         parse_TradingDay:
          set_has_tradingday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Time;
        break;
      }

      // required int32 Time = 5;
      case 5: {
        if (tag == 40) {
         parse_Time:
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Status;
        break;
      }

      // required int32 Status = 6;
      case 6: {
        if (tag == 48) {
         parse_Status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PreOpenInterest;
        break;
      }

      // required int64 PreOpenInterest = 7;
      case 7: {
        if (tag == 56) {
         parse_PreOpenInterest:
          set_has_preopeninterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preopeninterest_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_PreClose;
        break;
      }

      // required uint32 PreClose = 8;
      case 8: {
        if (tag == 64) {
         parse_PreClose:
          set_has_preclose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_PreSettlePrice;
        break;
      }

      // required uint32 PreSettlePrice = 9;
      case 9: {
        if (tag == 72) {
         parse_PreSettlePrice:
          set_has_presettleprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &presettleprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Open;
        break;
      }

      // required uint32 Open = 10;
      case 10: {
        if (tag == 80) {
         parse_Open:
          set_has_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_High;
        break;
      }

      // required uint32 High = 11;
      case 11: {
        if (tag == 88) {
         parse_High:
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Low;
        break;
      }

      // required uint32 Low = 12;
      case 12: {
        if (tag == 96) {
         parse_Low:
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Match;
        break;
      }

      // required uint32 Match = 13;
      case 13: {
        if (tag == 104) {
         parse_Match:
          set_has_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Volume;
        break;
      }

      // required int64 Volume = 14;
      case 14: {
        if (tag == 112) {
         parse_Volume:
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Turnover;
        break;
      }

      // required int64 Turnover = 15;
      case 15: {
        if (tag == 120) {
         parse_Turnover:
          set_has_turnover();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnover_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_openInterest;
        break;
      }

      // required int64 openInterest = 16;
      case 16: {
        if (tag == 128) {
         parse_openInterest:
          set_has_openinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Close;
        break;
      }

      // required uint32 Close = 17;
      case 17: {
        if (tag == 136) {
         parse_Close:
          set_has_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_SettlePrice;
        break;
      }

      // required uint32 SettlePrice = 18;
      case 18: {
        if (tag == 144) {
         parse_SettlePrice:
          set_has_settleprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settleprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_HighLimited;
        break;
      }

      // required uint32 HighLimited = 19;
      case 19: {
        if (tag == 152) {
         parse_HighLimited:
          set_has_highlimited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlimited_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_LowLimited;
        break;
      }

      // required uint32 LowLimited = 20;
      case 20: {
        if (tag == 160) {
         parse_LowLimited:
          set_has_lowlimited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlimited_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_PreDelta;
        break;
      }

      // required int32 PreDelta = 21;
      case 21: {
        if (tag == 168) {
         parse_PreDelta:
          set_has_predelta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predelta_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_CurrDelta;
        break;
      }

      // required int32 CurrDelta = 22;
      case 22: {
        if (tag == 176) {
         parse_CurrDelta:
          set_has_currdelta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currdelta_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_AskPrice;
        break;
      }

      // repeated uint32 AskPrice = 23;
      case 23: {
        if (tag == 184) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 184, input, this->mutable_askprice())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_AskPrice;
        if (input->ExpectTag(192)) goto parse_AskVol;
        break;
      }

      // repeated uint32 AskVol = 24;
      case 24: {
        if (tag == 192) {
         parse_AskVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192, input, this->mutable_askvol())));
        } else if (tag == 194) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_AskVol;
        if (input->ExpectTag(200)) goto parse_BidPrice;
        break;
      }

      // repeated uint32 BidPrice = 25;
      case 25: {
        if (tag == 200) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200, input, this->mutable_bidprice())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_BidPrice;
        if (input->ExpectTag(208)) goto parse_BidVol;
        break;
      }

      // repeated uint32 BidVol = 26;
      case 26: {
        if (tag == 208) {
         parse_BidVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208, input, this->mutable_bidvol())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_BidVol;
        if (input->ExpectTag(216)) goto parse_AuctionPrice;
        break;
      }

      // required int32 AuctionPrice = 27;
      case 27: {
        if (tag == 216) {
         parse_AuctionPrice:
          set_has_auctionprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auctionprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_AuctionQty;
        break;
      }

      // required int32 AuctionQty = 28;
      case 28: {
        if (tag == 224) {
         parse_AuctionQty:
          set_has_auctionqty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auctionqty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.FutureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.FutureData)
  return false;
#undef DO_
}

void FutureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.FutureData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.FutureData.WindCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->windcode(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.FutureData.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionday(), output);
  }

  // required int32 TradingDay = 4;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tradingday(), output);
  }

  // required int32 Time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // required int32 Status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // required int64 PreOpenInterest = 7;
  if (has_preopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->preopeninterest(), output);
  }

  // required uint32 PreClose = 8;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preclose(), output);
  }

  // required uint32 PreSettlePrice = 9;
  if (has_presettleprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->presettleprice(), output);
  }

  // required uint32 Open = 10;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->open(), output);
  }

  // required uint32 High = 11;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->high(), output);
  }

  // required uint32 Low = 12;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->low(), output);
  }

  // required uint32 Match = 13;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->match(), output);
  }

  // required int64 Volume = 14;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->volume(), output);
  }

  // required int64 Turnover = 15;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->turnover(), output);
  }

  // required int64 openInterest = 16;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->openinterest(), output);
  }

  // required uint32 Close = 17;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->close(), output);
  }

  // required uint32 SettlePrice = 18;
  if (has_settleprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->settleprice(), output);
  }

  // required uint32 HighLimited = 19;
  if (has_highlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->highlimited(), output);
  }

  // required uint32 LowLimited = 20;
  if (has_lowlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->lowlimited(), output);
  }

  // required int32 PreDelta = 21;
  if (has_predelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->predelta(), output);
  }

  // required int32 CurrDelta = 22;
  if (has_currdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->currdelta(), output);
  }

  // repeated uint32 AskPrice = 23;
  for (int i = 0; i < this->askprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      23, this->askprice(i), output);
  }

  // repeated uint32 AskVol = 24;
  for (int i = 0; i < this->askvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->askvol(i), output);
  }

  // repeated uint32 BidPrice = 25;
  for (int i = 0; i < this->bidprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->bidprice(i), output);
  }

  // repeated uint32 BidVol = 26;
  for (int i = 0; i < this->bidvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->bidvol(i), output);
  }

  // required int32 AuctionPrice = 27;
  if (has_auctionprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->auctionprice(), output);
  }

  // required int32 AuctionQty = 28;
  if (has_auctionqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->auctionqty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.FutureData)
}

::google::protobuf::uint8* FutureData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.FutureData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.FutureData.WindCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->windcode(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.FutureData.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionday(), target);
  }

  // required int32 TradingDay = 4;
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tradingday(), target);
  }

  // required int32 Time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // required int32 Status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // required int64 PreOpenInterest = 7;
  if (has_preopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->preopeninterest(), target);
  }

  // required uint32 PreClose = 8;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->preclose(), target);
  }

  // required uint32 PreSettlePrice = 9;
  if (has_presettleprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->presettleprice(), target);
  }

  // required uint32 Open = 10;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->open(), target);
  }

  // required uint32 High = 11;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->high(), target);
  }

  // required uint32 Low = 12;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->low(), target);
  }

  // required uint32 Match = 13;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->match(), target);
  }

  // required int64 Volume = 14;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->volume(), target);
  }

  // required int64 Turnover = 15;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->turnover(), target);
  }

  // required int64 openInterest = 16;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->openinterest(), target);
  }

  // required uint32 Close = 17;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->close(), target);
  }

  // required uint32 SettlePrice = 18;
  if (has_settleprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->settleprice(), target);
  }

  // required uint32 HighLimited = 19;
  if (has_highlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->highlimited(), target);
  }

  // required uint32 LowLimited = 20;
  if (has_lowlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->lowlimited(), target);
  }

  // required int32 PreDelta = 21;
  if (has_predelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->predelta(), target);
  }

  // required int32 CurrDelta = 22;
  if (has_currdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->currdelta(), target);
  }

  // repeated uint32 AskPrice = 23;
  for (int i = 0; i < this->askprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(23, this->askprice(i), target);
  }

  // repeated uint32 AskVol = 24;
  for (int i = 0; i < this->askvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(24, this->askvol(i), target);
  }

  // repeated uint32 BidPrice = 25;
  for (int i = 0; i < this->bidprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->bidprice(i), target);
  }

  // repeated uint32 BidVol = 26;
  for (int i = 0; i < this->bidvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(26, this->bidvol(i), target);
  }

  // required int32 AuctionPrice = 27;
  if (has_auctionprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->auctionprice(), target);
  }

  // required int32 AuctionQty = 28;
  if (has_auctionqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->auctionqty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.FutureData)
  return target;
}

size_t FutureData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:comm.FutureData)
  size_t total_size = 0;

  if (has_windcode()) {
    // required string WindCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->windcode());
  }

  if (has_code()) {
    // required string Code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_actionday()) {
    // required int32 ActionDay = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionday());
  }

  if (has_tradingday()) {
    // required int32 TradingDay = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tradingday());
  }

  if (has_time()) {
    // required int32 Time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_status()) {
    // required int32 Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_preopeninterest()) {
    // required int64 PreOpenInterest = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->preopeninterest());
  }

  if (has_preclose()) {
    // required uint32 PreClose = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preclose());
  }

  if (has_presettleprice()) {
    // required uint32 PreSettlePrice = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->presettleprice());
  }

  if (has_open()) {
    // required uint32 Open = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open());
  }

  if (has_high()) {
    // required uint32 High = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high());
  }

  if (has_low()) {
    // required uint32 Low = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());
  }

  if (has_match()) {
    // required uint32 Match = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match());
  }

  if (has_volume()) {
    // required int64 Volume = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());
  }

  if (has_turnover()) {
    // required int64 Turnover = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->turnover());
  }

  if (has_openinterest()) {
    // required int64 openInterest = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->openinterest());
  }

  if (has_close()) {
    // required uint32 Close = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->close());
  }

  if (has_settleprice()) {
    // required uint32 SettlePrice = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->settleprice());
  }

  if (has_highlimited()) {
    // required uint32 HighLimited = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highlimited());
  }

  if (has_lowlimited()) {
    // required uint32 LowLimited = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lowlimited());
  }

  if (has_predelta()) {
    // required int32 PreDelta = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->predelta());
  }

  if (has_currdelta()) {
    // required int32 CurrDelta = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currdelta());
  }

  if (has_auctionprice()) {
    // required int32 AuctionPrice = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auctionprice());
  }

  if (has_auctionqty()) {
    // required int32 AuctionQty = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auctionqty());
  }

  return total_size;
}
size_t FutureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.FutureData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0c3fffff) ^ 0x0c3fffff) == 0) {  // All required fields are present.
    // required string WindCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->windcode());

    // required string Code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int32 ActionDay = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionday());

    // required int32 TradingDay = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tradingday());

    // required int32 Time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required int32 Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required int64 PreOpenInterest = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->preopeninterest());

    // required uint32 PreClose = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preclose());

    // required uint32 PreSettlePrice = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->presettleprice());

    // required uint32 Open = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open());

    // required uint32 High = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high());

    // required uint32 Low = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());

    // required uint32 Match = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match());

    // required int64 Volume = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());

    // required int64 Turnover = 15;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->turnover());

    // required int64 openInterest = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->openinterest());

    // required uint32 Close = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->close());

    // required uint32 SettlePrice = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->settleprice());

    // required uint32 HighLimited = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highlimited());

    // required uint32 LowLimited = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lowlimited());

    // required int32 PreDelta = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->predelta());

    // required int32 CurrDelta = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currdelta());

    // required int32 AuctionPrice = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auctionprice());

    // required int32 AuctionQty = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->auctionqty());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 AskPrice = 23;
  {
    size_t data_size = 0;
    unsigned int count = this->askprice_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askprice(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->askprice_size());
    total_size += data_size;
  }

  // repeated uint32 AskVol = 24;
  {
    size_t data_size = 0;
    unsigned int count = this->askvol_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askvol(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->askvol_size());
    total_size += data_size;
  }

  // repeated uint32 BidPrice = 25;
  {
    size_t data_size = 0;
    unsigned int count = this->bidprice_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidprice(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bidprice_size());
    total_size += data_size;
  }

  // repeated uint32 BidVol = 26;
  {
    size_t data_size = 0;
    unsigned int count = this->bidvol_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidvol(i));
    }
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->bidvol_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FutureData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.FutureData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FutureData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FutureData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.FutureData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.FutureData)
    UnsafeMergeFrom(*source);
  }
}

void FutureData::MergeFrom(const FutureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.FutureData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FutureData::UnsafeMergeFrom(const FutureData& from) {
  GOOGLE_DCHECK(&from != this);
  askprice_.UnsafeMergeFrom(from.askprice_);
  askvol_.UnsafeMergeFrom(from.askvol_);
  bidprice_.UnsafeMergeFrom(from.bidprice_);
  bidvol_.UnsafeMergeFrom(from.bidvol_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_windcode()) {
      set_has_windcode();
      windcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.windcode_);
    }
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (from.has_actionday()) {
      set_actionday(from.actionday());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_preopeninterest()) {
      set_preopeninterest(from.preopeninterest());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_presettleprice()) {
      set_presettleprice(from.presettleprice());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_match()) {
      set_match(from.match());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_settleprice()) {
      set_settleprice(from.settleprice());
    }
    if (from.has_highlimited()) {
      set_highlimited(from.highlimited());
    }
    if (from.has_lowlimited()) {
      set_lowlimited(from.lowlimited());
    }
    if (from.has_predelta()) {
      set_predelta(from.predelta());
    }
    if (from.has_currdelta()) {
      set_currdelta(from.currdelta());
    }
  }
  if (from._has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    if (from.has_auctionprice()) {
      set_auctionprice(from.auctionprice());
    }
    if (from.has_auctionqty()) {
      set_auctionqty(from.auctionqty());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void FutureData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.FutureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureData::CopyFrom(const FutureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.FutureData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FutureData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0c3fffff) != 0x0c3fffff) return false;

  return true;
}

void FutureData::Swap(FutureData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FutureData::InternalSwap(FutureData* other) {
  windcode_.Swap(&other->windcode_);
  code_.Swap(&other->code_);
  std::swap(actionday_, other->actionday_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(time_, other->time_);
  std::swap(status_, other->status_);
  std::swap(preopeninterest_, other->preopeninterest_);
  std::swap(preclose_, other->preclose_);
  std::swap(presettleprice_, other->presettleprice_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(match_, other->match_);
  std::swap(volume_, other->volume_);
  std::swap(turnover_, other->turnover_);
  std::swap(openinterest_, other->openinterest_);
  std::swap(close_, other->close_);
  std::swap(settleprice_, other->settleprice_);
  std::swap(highlimited_, other->highlimited_);
  std::swap(lowlimited_, other->lowlimited_);
  std::swap(predelta_, other->predelta_);
  std::swap(currdelta_, other->currdelta_);
  askprice_.UnsafeArenaSwap(&other->askprice_);
  askvol_.UnsafeArenaSwap(&other->askvol_);
  bidprice_.UnsafeArenaSwap(&other->bidprice_);
  bidvol_.UnsafeArenaSwap(&other->bidvol_);
  std::swap(auctionprice_, other->auctionprice_);
  std::swap(auctionqty_, other->auctionqty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FutureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FutureData_descriptor_;
  metadata.reflection = FutureData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FutureData

// required string WindCode = 1;
bool FutureData::has_windcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FutureData::set_has_windcode() {
  _has_bits_[0] |= 0x00000001u;
}
void FutureData::clear_has_windcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void FutureData::clear_windcode() {
  windcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_windcode();
}
const ::std::string& FutureData::windcode() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.WindCode)
  return windcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FutureData::set_windcode(const ::std::string& value) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.FutureData.WindCode)
}
void FutureData::set_windcode(const char* value) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.FutureData.WindCode)
}
void FutureData::set_windcode(const char* value, size_t size) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.FutureData.WindCode)
}
::std::string* FutureData::mutable_windcode() {
  set_has_windcode();
  // @@protoc_insertion_point(field_mutable:comm.FutureData.WindCode)
  return windcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FutureData::release_windcode() {
  // @@protoc_insertion_point(field_release:comm.FutureData.WindCode)
  clear_has_windcode();
  return windcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FutureData::set_allocated_windcode(::std::string* windcode) {
  if (windcode != NULL) {
    set_has_windcode();
  } else {
    clear_has_windcode();
  }
  windcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), windcode);
  // @@protoc_insertion_point(field_set_allocated:comm.FutureData.WindCode)
}

// required string Code = 2;
bool FutureData::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FutureData::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void FutureData::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void FutureData::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& FutureData::code() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FutureData::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.FutureData.Code)
}
void FutureData::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.FutureData.Code)
}
void FutureData::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.FutureData.Code)
}
::std::string* FutureData::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:comm.FutureData.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FutureData::release_code() {
  // @@protoc_insertion_point(field_release:comm.FutureData.Code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FutureData::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:comm.FutureData.Code)
}

// required int32 ActionDay = 3;
bool FutureData::has_actionday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FutureData::set_has_actionday() {
  _has_bits_[0] |= 0x00000004u;
}
void FutureData::clear_has_actionday() {
  _has_bits_[0] &= ~0x00000004u;
}
void FutureData::clear_actionday() {
  actionday_ = 0;
  clear_has_actionday();
}
::google::protobuf::int32 FutureData::actionday() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.ActionDay)
  return actionday_;
}
void FutureData::set_actionday(::google::protobuf::int32 value) {
  set_has_actionday();
  actionday_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.ActionDay)
}

// required int32 TradingDay = 4;
bool FutureData::has_tradingday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FutureData::set_has_tradingday() {
  _has_bits_[0] |= 0x00000008u;
}
void FutureData::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000008u;
}
void FutureData::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
::google::protobuf::int32 FutureData::tradingday() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.TradingDay)
  return tradingday_;
}
void FutureData::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.TradingDay)
}

// required int32 Time = 5;
bool FutureData::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FutureData::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void FutureData::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void FutureData::clear_time() {
  time_ = 0;
  clear_has_time();
}
::google::protobuf::int32 FutureData::time() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Time)
  return time_;
}
void FutureData::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Time)
}

// required int32 Status = 6;
bool FutureData::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FutureData::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void FutureData::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void FutureData::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 FutureData::status() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Status)
  return status_;
}
void FutureData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Status)
}

// required int64 PreOpenInterest = 7;
bool FutureData::has_preopeninterest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FutureData::set_has_preopeninterest() {
  _has_bits_[0] |= 0x00000040u;
}
void FutureData::clear_has_preopeninterest() {
  _has_bits_[0] &= ~0x00000040u;
}
void FutureData::clear_preopeninterest() {
  preopeninterest_ = GOOGLE_LONGLONG(0);
  clear_has_preopeninterest();
}
::google::protobuf::int64 FutureData::preopeninterest() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.PreOpenInterest)
  return preopeninterest_;
}
void FutureData::set_preopeninterest(::google::protobuf::int64 value) {
  set_has_preopeninterest();
  preopeninterest_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.PreOpenInterest)
}

// required uint32 PreClose = 8;
bool FutureData::has_preclose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FutureData::set_has_preclose() {
  _has_bits_[0] |= 0x00000080u;
}
void FutureData::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000080u;
}
void FutureData::clear_preclose() {
  preclose_ = 0u;
  clear_has_preclose();
}
::google::protobuf::uint32 FutureData::preclose() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.PreClose)
  return preclose_;
}
void FutureData::set_preclose(::google::protobuf::uint32 value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.PreClose)
}

// required uint32 PreSettlePrice = 9;
bool FutureData::has_presettleprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FutureData::set_has_presettleprice() {
  _has_bits_[0] |= 0x00000100u;
}
void FutureData::clear_has_presettleprice() {
  _has_bits_[0] &= ~0x00000100u;
}
void FutureData::clear_presettleprice() {
  presettleprice_ = 0u;
  clear_has_presettleprice();
}
::google::protobuf::uint32 FutureData::presettleprice() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.PreSettlePrice)
  return presettleprice_;
}
void FutureData::set_presettleprice(::google::protobuf::uint32 value) {
  set_has_presettleprice();
  presettleprice_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.PreSettlePrice)
}

// required uint32 Open = 10;
bool FutureData::has_open() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FutureData::set_has_open() {
  _has_bits_[0] |= 0x00000200u;
}
void FutureData::clear_has_open() {
  _has_bits_[0] &= ~0x00000200u;
}
void FutureData::clear_open() {
  open_ = 0u;
  clear_has_open();
}
::google::protobuf::uint32 FutureData::open() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Open)
  return open_;
}
void FutureData::set_open(::google::protobuf::uint32 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Open)
}

// required uint32 High = 11;
bool FutureData::has_high() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FutureData::set_has_high() {
  _has_bits_[0] |= 0x00000400u;
}
void FutureData::clear_has_high() {
  _has_bits_[0] &= ~0x00000400u;
}
void FutureData::clear_high() {
  high_ = 0u;
  clear_has_high();
}
::google::protobuf::uint32 FutureData::high() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.High)
  return high_;
}
void FutureData::set_high(::google::protobuf::uint32 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.High)
}

// required uint32 Low = 12;
bool FutureData::has_low() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FutureData::set_has_low() {
  _has_bits_[0] |= 0x00000800u;
}
void FutureData::clear_has_low() {
  _has_bits_[0] &= ~0x00000800u;
}
void FutureData::clear_low() {
  low_ = 0u;
  clear_has_low();
}
::google::protobuf::uint32 FutureData::low() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Low)
  return low_;
}
void FutureData::set_low(::google::protobuf::uint32 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Low)
}

// required uint32 Match = 13;
bool FutureData::has_match() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FutureData::set_has_match() {
  _has_bits_[0] |= 0x00001000u;
}
void FutureData::clear_has_match() {
  _has_bits_[0] &= ~0x00001000u;
}
void FutureData::clear_match() {
  match_ = 0u;
  clear_has_match();
}
::google::protobuf::uint32 FutureData::match() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Match)
  return match_;
}
void FutureData::set_match(::google::protobuf::uint32 value) {
  set_has_match();
  match_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Match)
}

// required int64 Volume = 14;
bool FutureData::has_volume() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FutureData::set_has_volume() {
  _has_bits_[0] |= 0x00002000u;
}
void FutureData::clear_has_volume() {
  _has_bits_[0] &= ~0x00002000u;
}
void FutureData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
::google::protobuf::int64 FutureData::volume() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Volume)
  return volume_;
}
void FutureData::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Volume)
}

// required int64 Turnover = 15;
bool FutureData::has_turnover() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FutureData::set_has_turnover() {
  _has_bits_[0] |= 0x00004000u;
}
void FutureData::clear_has_turnover() {
  _has_bits_[0] &= ~0x00004000u;
}
void FutureData::clear_turnover() {
  turnover_ = GOOGLE_LONGLONG(0);
  clear_has_turnover();
}
::google::protobuf::int64 FutureData::turnover() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Turnover)
  return turnover_;
}
void FutureData::set_turnover(::google::protobuf::int64 value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Turnover)
}

// required int64 openInterest = 16;
bool FutureData::has_openinterest() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FutureData::set_has_openinterest() {
  _has_bits_[0] |= 0x00008000u;
}
void FutureData::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00008000u;
}
void FutureData::clear_openinterest() {
  openinterest_ = GOOGLE_LONGLONG(0);
  clear_has_openinterest();
}
::google::protobuf::int64 FutureData::openinterest() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.openInterest)
  return openinterest_;
}
void FutureData::set_openinterest(::google::protobuf::int64 value) {
  set_has_openinterest();
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.openInterest)
}

// required uint32 Close = 17;
bool FutureData::has_close() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FutureData::set_has_close() {
  _has_bits_[0] |= 0x00010000u;
}
void FutureData::clear_has_close() {
  _has_bits_[0] &= ~0x00010000u;
}
void FutureData::clear_close() {
  close_ = 0u;
  clear_has_close();
}
::google::protobuf::uint32 FutureData::close() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Close)
  return close_;
}
void FutureData::set_close(::google::protobuf::uint32 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Close)
}

// required uint32 SettlePrice = 18;
bool FutureData::has_settleprice() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void FutureData::set_has_settleprice() {
  _has_bits_[0] |= 0x00020000u;
}
void FutureData::clear_has_settleprice() {
  _has_bits_[0] &= ~0x00020000u;
}
void FutureData::clear_settleprice() {
  settleprice_ = 0u;
  clear_has_settleprice();
}
::google::protobuf::uint32 FutureData::settleprice() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.SettlePrice)
  return settleprice_;
}
void FutureData::set_settleprice(::google::protobuf::uint32 value) {
  set_has_settleprice();
  settleprice_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.SettlePrice)
}

// required uint32 HighLimited = 19;
bool FutureData::has_highlimited() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void FutureData::set_has_highlimited() {
  _has_bits_[0] |= 0x00040000u;
}
void FutureData::clear_has_highlimited() {
  _has_bits_[0] &= ~0x00040000u;
}
void FutureData::clear_highlimited() {
  highlimited_ = 0u;
  clear_has_highlimited();
}
::google::protobuf::uint32 FutureData::highlimited() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.HighLimited)
  return highlimited_;
}
void FutureData::set_highlimited(::google::protobuf::uint32 value) {
  set_has_highlimited();
  highlimited_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.HighLimited)
}

// required uint32 LowLimited = 20;
bool FutureData::has_lowlimited() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void FutureData::set_has_lowlimited() {
  _has_bits_[0] |= 0x00080000u;
}
void FutureData::clear_has_lowlimited() {
  _has_bits_[0] &= ~0x00080000u;
}
void FutureData::clear_lowlimited() {
  lowlimited_ = 0u;
  clear_has_lowlimited();
}
::google::protobuf::uint32 FutureData::lowlimited() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.LowLimited)
  return lowlimited_;
}
void FutureData::set_lowlimited(::google::protobuf::uint32 value) {
  set_has_lowlimited();
  lowlimited_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.LowLimited)
}

// required int32 PreDelta = 21;
bool FutureData::has_predelta() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void FutureData::set_has_predelta() {
  _has_bits_[0] |= 0x00100000u;
}
void FutureData::clear_has_predelta() {
  _has_bits_[0] &= ~0x00100000u;
}
void FutureData::clear_predelta() {
  predelta_ = 0;
  clear_has_predelta();
}
::google::protobuf::int32 FutureData::predelta() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.PreDelta)
  return predelta_;
}
void FutureData::set_predelta(::google::protobuf::int32 value) {
  set_has_predelta();
  predelta_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.PreDelta)
}

// required int32 CurrDelta = 22;
bool FutureData::has_currdelta() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void FutureData::set_has_currdelta() {
  _has_bits_[0] |= 0x00200000u;
}
void FutureData::clear_has_currdelta() {
  _has_bits_[0] &= ~0x00200000u;
}
void FutureData::clear_currdelta() {
  currdelta_ = 0;
  clear_has_currdelta();
}
::google::protobuf::int32 FutureData::currdelta() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.CurrDelta)
  return currdelta_;
}
void FutureData::set_currdelta(::google::protobuf::int32 value) {
  set_has_currdelta();
  currdelta_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.CurrDelta)
}

// repeated uint32 AskPrice = 23;
int FutureData::askprice_size() const {
  return askprice_.size();
}
void FutureData::clear_askprice() {
  askprice_.Clear();
}
::google::protobuf::uint32 FutureData::askprice(int index) const {
  // @@protoc_insertion_point(field_get:comm.FutureData.AskPrice)
  return askprice_.Get(index);
}
void FutureData::set_askprice(int index, ::google::protobuf::uint32 value) {
  askprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.FutureData.AskPrice)
}
void FutureData::add_askprice(::google::protobuf::uint32 value) {
  askprice_.Add(value);
  // @@protoc_insertion_point(field_add:comm.FutureData.AskPrice)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FutureData::askprice() const {
  // @@protoc_insertion_point(field_list:comm.FutureData.AskPrice)
  return askprice_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FutureData::mutable_askprice() {
  // @@protoc_insertion_point(field_mutable_list:comm.FutureData.AskPrice)
  return &askprice_;
}

// repeated uint32 AskVol = 24;
int FutureData::askvol_size() const {
  return askvol_.size();
}
void FutureData::clear_askvol() {
  askvol_.Clear();
}
::google::protobuf::uint32 FutureData::askvol(int index) const {
  // @@protoc_insertion_point(field_get:comm.FutureData.AskVol)
  return askvol_.Get(index);
}
void FutureData::set_askvol(int index, ::google::protobuf::uint32 value) {
  askvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.FutureData.AskVol)
}
void FutureData::add_askvol(::google::protobuf::uint32 value) {
  askvol_.Add(value);
  // @@protoc_insertion_point(field_add:comm.FutureData.AskVol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FutureData::askvol() const {
  // @@protoc_insertion_point(field_list:comm.FutureData.AskVol)
  return askvol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FutureData::mutable_askvol() {
  // @@protoc_insertion_point(field_mutable_list:comm.FutureData.AskVol)
  return &askvol_;
}

// repeated uint32 BidPrice = 25;
int FutureData::bidprice_size() const {
  return bidprice_.size();
}
void FutureData::clear_bidprice() {
  bidprice_.Clear();
}
::google::protobuf::uint32 FutureData::bidprice(int index) const {
  // @@protoc_insertion_point(field_get:comm.FutureData.BidPrice)
  return bidprice_.Get(index);
}
void FutureData::set_bidprice(int index, ::google::protobuf::uint32 value) {
  bidprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.FutureData.BidPrice)
}
void FutureData::add_bidprice(::google::protobuf::uint32 value) {
  bidprice_.Add(value);
  // @@protoc_insertion_point(field_add:comm.FutureData.BidPrice)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FutureData::bidprice() const {
  // @@protoc_insertion_point(field_list:comm.FutureData.BidPrice)
  return bidprice_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FutureData::mutable_bidprice() {
  // @@protoc_insertion_point(field_mutable_list:comm.FutureData.BidPrice)
  return &bidprice_;
}

// repeated uint32 BidVol = 26;
int FutureData::bidvol_size() const {
  return bidvol_.size();
}
void FutureData::clear_bidvol() {
  bidvol_.Clear();
}
::google::protobuf::uint32 FutureData::bidvol(int index) const {
  // @@protoc_insertion_point(field_get:comm.FutureData.BidVol)
  return bidvol_.Get(index);
}
void FutureData::set_bidvol(int index, ::google::protobuf::uint32 value) {
  bidvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.FutureData.BidVol)
}
void FutureData::add_bidvol(::google::protobuf::uint32 value) {
  bidvol_.Add(value);
  // @@protoc_insertion_point(field_add:comm.FutureData.BidVol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FutureData::bidvol() const {
  // @@protoc_insertion_point(field_list:comm.FutureData.BidVol)
  return bidvol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FutureData::mutable_bidvol() {
  // @@protoc_insertion_point(field_mutable_list:comm.FutureData.BidVol)
  return &bidvol_;
}

// required int32 AuctionPrice = 27;
bool FutureData::has_auctionprice() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void FutureData::set_has_auctionprice() {
  _has_bits_[0] |= 0x04000000u;
}
void FutureData::clear_has_auctionprice() {
  _has_bits_[0] &= ~0x04000000u;
}
void FutureData::clear_auctionprice() {
  auctionprice_ = 0;
  clear_has_auctionprice();
}
::google::protobuf::int32 FutureData::auctionprice() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.AuctionPrice)
  return auctionprice_;
}
void FutureData::set_auctionprice(::google::protobuf::int32 value) {
  set_has_auctionprice();
  auctionprice_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.AuctionPrice)
}

// required int32 AuctionQty = 28;
bool FutureData::has_auctionqty() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void FutureData::set_has_auctionqty() {
  _has_bits_[0] |= 0x08000000u;
}
void FutureData::clear_has_auctionqty() {
  _has_bits_[0] &= ~0x08000000u;
}
void FutureData::clear_auctionqty() {
  auctionqty_ = 0;
  clear_has_auctionqty();
}
::google::protobuf::int32 FutureData::auctionqty() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.AuctionQty)
  return auctionqty_;
}
void FutureData::set_auctionqty(::google::protobuf::int32 value) {
  set_has_auctionqty();
  auctionqty_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.AuctionQty)
}

inline const FutureData* FutureData::internal_default_instance() {
  return &FutureData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
