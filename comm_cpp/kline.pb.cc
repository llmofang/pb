// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kline.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kline.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* KLineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KLineData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kline_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_kline_2eproto() {
  protobuf_AddDesc_kline_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kline.proto");
  GOOGLE_CHECK(file != NULL);
  KLineData_descriptor_ = file->message_type(0);
  static const int KLineData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, numtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, totalvolumetrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, totalvaluetrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, iopv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, settleprice_),
  };
  KLineData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KLineData_descriptor_,
      KLineData::internal_default_instance(),
      KLineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, _has_bits_),
      -1,
      -1,
      sizeof(KLineData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLineData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kline_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KLineData_descriptor_, KLineData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kline_2eproto() {
  KLineData_default_instance_.Shutdown();
  delete KLineData_reflection_;
}

void protobuf_InitDefaults_kline_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  KLineData_default_instance_.DefaultConstruct();
  KLineData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_kline_2eproto_once_);
void protobuf_InitDefaults_kline_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_kline_2eproto_once_,
                 &protobuf_InitDefaults_kline_2eproto_impl);
}
void protobuf_AddDesc_kline_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_kline_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013kline.proto\022\004comm\"\217\002\n\tKLineData\022\014\n\004Cod"
    "e\030\001 \002(\t\022\014\n\004Date\030\002 \002(\005\022\014\n\004Time\030\003 \002(\005\022\021\n\tT"
    "imestamp\030\004 \002(\003\022\016\n\006Period\030\005 \001(\005\022\014\n\004Open\030\006"
    " \002(\003\022\r\n\005Close\030\007 \002(\003\022\014\n\004High\030\010 \002(\003\022\013\n\003Low"
    "\030\t \002(\003\022\021\n\tNumTrades\030\n \002(\003\022\030\n\020TotalVolume"
    "Trade\030\013 \002(\003\022\027\n\017TotalValueTrade\030\014 \002(\003\022\014\n\004"
    "IOPV\030\r \001(\003\022\024\n\014OpenInterest\030\016 \001(\003\022\023\n\013Sett"
    "lePrice\030\017 \001(\003", 293);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kline.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kline_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_kline_2eproto_once_);
void protobuf_AddDesc_kline_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_kline_2eproto_once_,
                 &protobuf_AddDesc_kline_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kline_2eproto {
  StaticDescriptorInitializer_kline_2eproto() {
    protobuf_AddDesc_kline_2eproto();
  }
} static_descriptor_initializer_kline_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KLineData::kCodeFieldNumber;
const int KLineData::kDateFieldNumber;
const int KLineData::kTimeFieldNumber;
const int KLineData::kTimestampFieldNumber;
const int KLineData::kPeriodFieldNumber;
const int KLineData::kOpenFieldNumber;
const int KLineData::kCloseFieldNumber;
const int KLineData::kHighFieldNumber;
const int KLineData::kLowFieldNumber;
const int KLineData::kNumTradesFieldNumber;
const int KLineData::kTotalVolumeTradeFieldNumber;
const int KLineData::kTotalValueTradeFieldNumber;
const int KLineData::kIOPVFieldNumber;
const int KLineData::kOpenInterestFieldNumber;
const int KLineData::kSettlePriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KLineData::KLineData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_kline_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.KLineData)
}

void KLineData::InitAsDefaultInstance() {
}

KLineData::KLineData(const KLineData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.KLineData)
}

void KLineData::SharedCtor() {
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&date_, 0, reinterpret_cast<char*>(&period_) -
    reinterpret_cast<char*>(&date_) + sizeof(period_));
}

KLineData::~KLineData() {
  // @@protoc_insertion_point(destructor:comm.KLineData)
  SharedDtor();
}

void KLineData::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KLineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KLineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KLineData_descriptor_;
}

const KLineData& KLineData::default_instance() {
  protobuf_InitDefaults_kline_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<KLineData> KLineData_default_instance_;

KLineData* KLineData::New(::google::protobuf::Arena* arena) const {
  KLineData* n = new KLineData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KLineData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.KLineData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KLineData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KLineData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(date_, high_);
    if (has_code()) {
      code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    period_ = 0;
  }
  ZR_(low_, settleprice_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KLineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.KLineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.KLineData.Code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Date;
        break;
      }

      // required int32 Date = 2;
      case 2: {
        if (tag == 16) {
         parse_Date:
          set_has_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }

      // required int32 Time = 3;
      case 3: {
        if (tag == 24) {
         parse_Time:
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Timestamp;
        break;
      }

      // required int64 Timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_Timestamp:
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Period;
        break;
      }

      // optional int32 Period = 5;
      case 5: {
        if (tag == 40) {
         parse_Period:
          set_has_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Open;
        break;
      }

      // required int64 Open = 6;
      case 6: {
        if (tag == 48) {
         parse_Open:
          set_has_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Close;
        break;
      }

      // required int64 Close = 7;
      case 7: {
        if (tag == 56) {
         parse_Close:
          set_has_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_High;
        break;
      }

      // required int64 High = 8;
      case 8: {
        if (tag == 64) {
         parse_High:
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Low;
        break;
      }

      // required int64 Low = 9;
      case 9: {
        if (tag == 72) {
         parse_Low:
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_NumTrades;
        break;
      }

      // required int64 NumTrades = 10;
      case 10: {
        if (tag == 80) {
         parse_NumTrades:
          set_has_numtrades();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_TotalVolumeTrade;
        break;
      }

      // required int64 TotalVolumeTrade = 11;
      case 11: {
        if (tag == 88) {
         parse_TotalVolumeTrade:
          set_has_totalvolumetrade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvolumetrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_TotalValueTrade;
        break;
      }

      // required int64 TotalValueTrade = 12;
      case 12: {
        if (tag == 96) {
         parse_TotalValueTrade:
          set_has_totalvaluetrade();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalvaluetrade_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IOPV;
        break;
      }

      // optional int64 IOPV = 13;
      case 13: {
        if (tag == 104) {
         parse_IOPV:
          set_has_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iopv_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_OpenInterest;
        break;
      }

      // optional int64 OpenInterest = 14;
      case 14: {
        if (tag == 112) {
         parse_OpenInterest:
          set_has_openinterest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openinterest_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_SettlePrice;
        break;
      }

      // optional int64 SettlePrice = 15;
      case 15: {
        if (tag == 120) {
         parse_SettlePrice:
          set_has_settleprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &settleprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.KLineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.KLineData)
  return false;
#undef DO_
}

void KLineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.KLineData)
  // required string Code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.KLineData.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // required int32 Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->date(), output);
  }

  // required int32 Time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // required int64 Timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // optional int32 Period = 5;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->period(), output);
  }

  // required int64 Open = 6;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->open(), output);
  }

  // required int64 Close = 7;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->close(), output);
  }

  // required int64 High = 8;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->high(), output);
  }

  // required int64 Low = 9;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->low(), output);
  }

  // required int64 NumTrades = 10;
  if (has_numtrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->numtrades(), output);
  }

  // required int64 TotalVolumeTrade = 11;
  if (has_totalvolumetrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->totalvolumetrade(), output);
  }

  // required int64 TotalValueTrade = 12;
  if (has_totalvaluetrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->totalvaluetrade(), output);
  }

  // optional int64 IOPV = 13;
  if (has_iopv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->iopv(), output);
  }

  // optional int64 OpenInterest = 14;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->openinterest(), output);
  }

  // optional int64 SettlePrice = 15;
  if (has_settleprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->settleprice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.KLineData)
}

::google::protobuf::uint8* KLineData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.KLineData)
  // required string Code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.KLineData.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // required int32 Date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->date(), target);
  }

  // required int32 Time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // required int64 Timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // optional int32 Period = 5;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->period(), target);
  }

  // required int64 Open = 6;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->open(), target);
  }

  // required int64 Close = 7;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->close(), target);
  }

  // required int64 High = 8;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->high(), target);
  }

  // required int64 Low = 9;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->low(), target);
  }

  // required int64 NumTrades = 10;
  if (has_numtrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->numtrades(), target);
  }

  // required int64 TotalVolumeTrade = 11;
  if (has_totalvolumetrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->totalvolumetrade(), target);
  }

  // required int64 TotalValueTrade = 12;
  if (has_totalvaluetrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->totalvaluetrade(), target);
  }

  // optional int64 IOPV = 13;
  if (has_iopv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->iopv(), target);
  }

  // optional int64 OpenInterest = 14;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->openinterest(), target);
  }

  // optional int64 SettlePrice = 15;
  if (has_settleprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->settleprice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.KLineData)
  return target;
}

size_t KLineData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:comm.KLineData)
  size_t total_size = 0;

  if (has_code()) {
    // required string Code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_date()) {
    // required int32 Date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->date());
  }

  if (has_time()) {
    // required int32 Time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_timestamp()) {
    // required int64 Timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_open()) {
    // required int64 Open = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->open());
  }

  if (has_close()) {
    // required int64 Close = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->close());
  }

  if (has_high()) {
    // required int64 High = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->high());
  }

  if (has_low()) {
    // required int64 Low = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->low());
  }

  if (has_numtrades()) {
    // required int64 NumTrades = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->numtrades());
  }

  if (has_totalvolumetrade()) {
    // required int64 TotalVolumeTrade = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalvolumetrade());
  }

  if (has_totalvaluetrade()) {
    // required int64 TotalValueTrade = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalvaluetrade());
  }

  return total_size;
}
size_t KLineData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.KLineData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000fef) ^ 0x00000fef) == 0) {  // All required fields are present.
    // required string Code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int32 Date = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->date());

    // required int32 Time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required int64 Timestamp = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int64 Open = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->open());

    // required int64 Close = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->close());

    // required int64 High = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->high());

    // required int64 Low = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->low());

    // required int64 NumTrades = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->numtrades());

    // required int64 TotalVolumeTrade = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalvolumetrade());

    // required int64 TotalValueTrade = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalvaluetrade());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 Period = 5;
  if (has_period()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->period());
  }

  if (_has_bits_[12 / 32] & 28672u) {
    // optional int64 IOPV = 13;
    if (has_iopv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iopv());
    }

    // optional int64 OpenInterest = 14;
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->openinterest());
    }

    // optional int64 SettlePrice = 15;
    if (has_settleprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->settleprice());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KLineData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.KLineData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KLineData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KLineData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.KLineData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.KLineData)
    UnsafeMergeFrom(*source);
  }
}

void KLineData::MergeFrom(const KLineData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.KLineData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void KLineData::UnsafeMergeFrom(const KLineData& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_numtrades()) {
      set_numtrades(from.numtrades());
    }
    if (from.has_totalvolumetrade()) {
      set_totalvolumetrade(from.totalvolumetrade());
    }
    if (from.has_totalvaluetrade()) {
      set_totalvaluetrade(from.totalvaluetrade());
    }
    if (from.has_iopv()) {
      set_iopv(from.iopv());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
    if (from.has_settleprice()) {
      set_settleprice(from.settleprice());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void KLineData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.KLineData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KLineData::CopyFrom(const KLineData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.KLineData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool KLineData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fef) != 0x00000fef) return false;

  return true;
}

void KLineData::Swap(KLineData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KLineData::InternalSwap(KLineData* other) {
  code_.Swap(&other->code_);
  std::swap(date_, other->date_);
  std::swap(time_, other->time_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(period_, other->period_);
  std::swap(open_, other->open_);
  std::swap(close_, other->close_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(numtrades_, other->numtrades_);
  std::swap(totalvolumetrade_, other->totalvolumetrade_);
  std::swap(totalvaluetrade_, other->totalvaluetrade_);
  std::swap(iopv_, other->iopv_);
  std::swap(openinterest_, other->openinterest_);
  std::swap(settleprice_, other->settleprice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KLineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KLineData_descriptor_;
  metadata.reflection = KLineData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KLineData

// required string Code = 1;
bool KLineData::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KLineData::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void KLineData::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void KLineData::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& KLineData::code() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KLineData::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.KLineData.Code)
}
void KLineData::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.KLineData.Code)
}
void KLineData::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.KLineData.Code)
}
::std::string* KLineData::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:comm.KLineData.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KLineData::release_code() {
  // @@protoc_insertion_point(field_release:comm.KLineData.Code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KLineData::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:comm.KLineData.Code)
}

// required int32 Date = 2;
bool KLineData::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KLineData::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
void KLineData::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void KLineData::clear_date() {
  date_ = 0;
  clear_has_date();
}
::google::protobuf::int32 KLineData::date() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Date)
  return date_;
}
void KLineData::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Date)
}

// required int32 Time = 3;
bool KLineData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KLineData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void KLineData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void KLineData::clear_time() {
  time_ = 0;
  clear_has_time();
}
::google::protobuf::int32 KLineData::time() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Time)
  return time_;
}
void KLineData::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Time)
}

// required int64 Timestamp = 4;
bool KLineData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KLineData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void KLineData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void KLineData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 KLineData::timestamp() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Timestamp)
  return timestamp_;
}
void KLineData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Timestamp)
}

// optional int32 Period = 5;
bool KLineData::has_period() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KLineData::set_has_period() {
  _has_bits_[0] |= 0x00000010u;
}
void KLineData::clear_has_period() {
  _has_bits_[0] &= ~0x00000010u;
}
void KLineData::clear_period() {
  period_ = 0;
  clear_has_period();
}
::google::protobuf::int32 KLineData::period() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Period)
  return period_;
}
void KLineData::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Period)
}

// required int64 Open = 6;
bool KLineData::has_open() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KLineData::set_has_open() {
  _has_bits_[0] |= 0x00000020u;
}
void KLineData::clear_has_open() {
  _has_bits_[0] &= ~0x00000020u;
}
void KLineData::clear_open() {
  open_ = GOOGLE_LONGLONG(0);
  clear_has_open();
}
::google::protobuf::int64 KLineData::open() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Open)
  return open_;
}
void KLineData::set_open(::google::protobuf::int64 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Open)
}

// required int64 Close = 7;
bool KLineData::has_close() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KLineData::set_has_close() {
  _has_bits_[0] |= 0x00000040u;
}
void KLineData::clear_has_close() {
  _has_bits_[0] &= ~0x00000040u;
}
void KLineData::clear_close() {
  close_ = GOOGLE_LONGLONG(0);
  clear_has_close();
}
::google::protobuf::int64 KLineData::close() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Close)
  return close_;
}
void KLineData::set_close(::google::protobuf::int64 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Close)
}

// required int64 High = 8;
bool KLineData::has_high() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void KLineData::set_has_high() {
  _has_bits_[0] |= 0x00000080u;
}
void KLineData::clear_has_high() {
  _has_bits_[0] &= ~0x00000080u;
}
void KLineData::clear_high() {
  high_ = GOOGLE_LONGLONG(0);
  clear_has_high();
}
::google::protobuf::int64 KLineData::high() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.High)
  return high_;
}
void KLineData::set_high(::google::protobuf::int64 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.High)
}

// required int64 Low = 9;
bool KLineData::has_low() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KLineData::set_has_low() {
  _has_bits_[0] |= 0x00000100u;
}
void KLineData::clear_has_low() {
  _has_bits_[0] &= ~0x00000100u;
}
void KLineData::clear_low() {
  low_ = GOOGLE_LONGLONG(0);
  clear_has_low();
}
::google::protobuf::int64 KLineData::low() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Low)
  return low_;
}
void KLineData::set_low(::google::protobuf::int64 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Low)
}

// required int64 NumTrades = 10;
bool KLineData::has_numtrades() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void KLineData::set_has_numtrades() {
  _has_bits_[0] |= 0x00000200u;
}
void KLineData::clear_has_numtrades() {
  _has_bits_[0] &= ~0x00000200u;
}
void KLineData::clear_numtrades() {
  numtrades_ = GOOGLE_LONGLONG(0);
  clear_has_numtrades();
}
::google::protobuf::int64 KLineData::numtrades() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.NumTrades)
  return numtrades_;
}
void KLineData::set_numtrades(::google::protobuf::int64 value) {
  set_has_numtrades();
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.NumTrades)
}

// required int64 TotalVolumeTrade = 11;
bool KLineData::has_totalvolumetrade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void KLineData::set_has_totalvolumetrade() {
  _has_bits_[0] |= 0x00000400u;
}
void KLineData::clear_has_totalvolumetrade() {
  _has_bits_[0] &= ~0x00000400u;
}
void KLineData::clear_totalvolumetrade() {
  totalvolumetrade_ = GOOGLE_LONGLONG(0);
  clear_has_totalvolumetrade();
}
::google::protobuf::int64 KLineData::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.TotalVolumeTrade)
  return totalvolumetrade_;
}
void KLineData::set_totalvolumetrade(::google::protobuf::int64 value) {
  set_has_totalvolumetrade();
  totalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.TotalVolumeTrade)
}

// required int64 TotalValueTrade = 12;
bool KLineData::has_totalvaluetrade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void KLineData::set_has_totalvaluetrade() {
  _has_bits_[0] |= 0x00000800u;
}
void KLineData::clear_has_totalvaluetrade() {
  _has_bits_[0] &= ~0x00000800u;
}
void KLineData::clear_totalvaluetrade() {
  totalvaluetrade_ = GOOGLE_LONGLONG(0);
  clear_has_totalvaluetrade();
}
::google::protobuf::int64 KLineData::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.TotalValueTrade)
  return totalvaluetrade_;
}
void KLineData::set_totalvaluetrade(::google::protobuf::int64 value) {
  set_has_totalvaluetrade();
  totalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.TotalValueTrade)
}

// optional int64 IOPV = 13;
bool KLineData::has_iopv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void KLineData::set_has_iopv() {
  _has_bits_[0] |= 0x00001000u;
}
void KLineData::clear_has_iopv() {
  _has_bits_[0] &= ~0x00001000u;
}
void KLineData::clear_iopv() {
  iopv_ = GOOGLE_LONGLONG(0);
  clear_has_iopv();
}
::google::protobuf::int64 KLineData::iopv() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.IOPV)
  return iopv_;
}
void KLineData::set_iopv(::google::protobuf::int64 value) {
  set_has_iopv();
  iopv_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.IOPV)
}

// optional int64 OpenInterest = 14;
bool KLineData::has_openinterest() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void KLineData::set_has_openinterest() {
  _has_bits_[0] |= 0x00002000u;
}
void KLineData::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00002000u;
}
void KLineData::clear_openinterest() {
  openinterest_ = GOOGLE_LONGLONG(0);
  clear_has_openinterest();
}
::google::protobuf::int64 KLineData::openinterest() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.OpenInterest)
  return openinterest_;
}
void KLineData::set_openinterest(::google::protobuf::int64 value) {
  set_has_openinterest();
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.OpenInterest)
}

// optional int64 SettlePrice = 15;
bool KLineData::has_settleprice() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void KLineData::set_has_settleprice() {
  _has_bits_[0] |= 0x00004000u;
}
void KLineData::clear_has_settleprice() {
  _has_bits_[0] &= ~0x00004000u;
}
void KLineData::clear_settleprice() {
  settleprice_ = GOOGLE_LONGLONG(0);
  clear_has_settleprice();
}
::google::protobuf::int64 KLineData::settleprice() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.SettlePrice)
  return settleprice_;
}
void KLineData::set_settleprice(::google::protobuf::int64 value) {
  set_has_settleprice();
  settleprice_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.SettlePrice)
}

inline const KLineData* KLineData::internal_default_instance() {
  return &KLineData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
