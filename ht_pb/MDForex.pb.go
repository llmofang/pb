// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDForex.proto

package com_htsc_mdc_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//外汇信息
type MDForex struct {
	HTSCSecurityID       string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate               int32             `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime               int32             `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp        int64             `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	TradingPhaseCode     string            `protobuf:"bytes,5,opt,name=TradingPhaseCode,proto3" json:"TradingPhaseCode,omitempty"`
	SecurityIDSource     ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType         ESecurityType     `protobuf:"varint,7,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	MaxPx                int64             `protobuf:"varint,8,opt,name=MaxPx,proto3" json:"MaxPx,omitempty"`
	MinPx                int64             `protobuf:"varint,9,opt,name=MinPx,proto3" json:"MinPx,omitempty"`
	PreClosePx           int64             `protobuf:"varint,10,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	TotalVolumeTrade     int64             `protobuf:"varint,11,opt,name=TotalVolumeTrade,proto3" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade      int64             `protobuf:"varint,12,opt,name=TotalValueTrade,proto3" json:"TotalValueTrade,omitempty"`
	LastPx               int64             `protobuf:"varint,13,opt,name=LastPx,proto3" json:"LastPx,omitempty"`
	OpenPx               int64             `protobuf:"varint,14,opt,name=OpenPx,proto3" json:"OpenPx,omitempty"`
	ClosePx              int64             `protobuf:"varint,15,opt,name=ClosePx,proto3" json:"ClosePx,omitempty"`
	HighPx               int64             `protobuf:"varint,16,opt,name=HighPx,proto3" json:"HighPx,omitempty"`
	LowPx                int64             `protobuf:"varint,17,opt,name=LowPx,proto3" json:"LowPx,omitempty"`
	ExchangeDate         int32             `protobuf:"varint,18,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime         int32             `protobuf:"varint,19,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	BuyPriceQueue        []int64           `protobuf:"varint,51,rep,packed,name=BuyPriceQueue,proto3" json:"BuyPriceQueue,omitempty"`
	BuyOrderQtyQueue     []int64           `protobuf:"varint,52,rep,packed,name=BuyOrderQtyQueue,proto3" json:"BuyOrderQtyQueue,omitempty"`
	SellPriceQueue       []int64           `protobuf:"varint,53,rep,packed,name=SellPriceQueue,proto3" json:"SellPriceQueue,omitempty"`
	SellOrderQtyQueue    []int64           `protobuf:"varint,54,rep,packed,name=SellOrderQtyQueue,proto3" json:"SellOrderQtyQueue,omitempty"`
	BuyOrderQueue        []int64           `protobuf:"varint,55,rep,packed,name=BuyOrderQueue,proto3" json:"BuyOrderQueue,omitempty"`
	SellOrderQueue       []int64           `protobuf:"varint,56,rep,packed,name=SellOrderQueue,proto3" json:"SellOrderQueue,omitempty"`
	BuyNumOrdersQueue    []int64           `protobuf:"varint,57,rep,packed,name=BuyNumOrdersQueue,proto3" json:"BuyNumOrdersQueue,omitempty"`
	SellNumOrdersQueue   []int64           `protobuf:"varint,58,rep,packed,name=SellNumOrdersQueue,proto3" json:"SellNumOrdersQueue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MDForex) Reset()         { *m = MDForex{} }
func (m *MDForex) String() string { return proto.CompactTextString(m) }
func (*MDForex) ProtoMessage()    {}
func (*MDForex) Descriptor() ([]byte, []int) {
	return fileDescriptor_369adaf5c08e14f5, []int{0}
}

func (m *MDForex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDForex.Unmarshal(m, b)
}
func (m *MDForex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDForex.Marshal(b, m, deterministic)
}
func (m *MDForex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDForex.Merge(m, src)
}
func (m *MDForex) XXX_Size() int {
	return xxx_messageInfo_MDForex.Size(m)
}
func (m *MDForex) XXX_DiscardUnknown() {
	xxx_messageInfo_MDForex.DiscardUnknown(m)
}

var xxx_messageInfo_MDForex proto.InternalMessageInfo

func (m *MDForex) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDForex) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDForex) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *MDForex) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *MDForex) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDForex) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDForex) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *MDForex) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDForex) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func (m *MDForex) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDForex) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *MDForex) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *MDForex) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *MDForex) GetOpenPx() int64 {
	if m != nil {
		return m.OpenPx
	}
	return 0
}

func (m *MDForex) GetClosePx() int64 {
	if m != nil {
		return m.ClosePx
	}
	return 0
}

func (m *MDForex) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *MDForex) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *MDForex) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *MDForex) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *MDForex) GetBuyPriceQueue() []int64 {
	if m != nil {
		return m.BuyPriceQueue
	}
	return nil
}

func (m *MDForex) GetBuyOrderQtyQueue() []int64 {
	if m != nil {
		return m.BuyOrderQtyQueue
	}
	return nil
}

func (m *MDForex) GetSellPriceQueue() []int64 {
	if m != nil {
		return m.SellPriceQueue
	}
	return nil
}

func (m *MDForex) GetSellOrderQtyQueue() []int64 {
	if m != nil {
		return m.SellOrderQtyQueue
	}
	return nil
}

func (m *MDForex) GetBuyOrderQueue() []int64 {
	if m != nil {
		return m.BuyOrderQueue
	}
	return nil
}

func (m *MDForex) GetSellOrderQueue() []int64 {
	if m != nil {
		return m.SellOrderQueue
	}
	return nil
}

func (m *MDForex) GetBuyNumOrdersQueue() []int64 {
	if m != nil {
		return m.BuyNumOrdersQueue
	}
	return nil
}

func (m *MDForex) GetSellNumOrdersQueue() []int64 {
	if m != nil {
		return m.SellNumOrdersQueue
	}
	return nil
}

func init() {
	proto.RegisterType((*MDForex)(nil), "com.htsc.mdc.insight.model.MDForex")
}

func init() { proto.RegisterFile("MDForex.proto", fileDescriptor_369adaf5c08e14f5) }

var fileDescriptor_369adaf5c08e14f5 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x5f, 0x6f, 0xda, 0x30,
	0x14, 0xc5, 0x95, 0x32, 0xa0, 0xbd, 0x03, 0x0a, 0xee, 0xb4, 0x59, 0x3c, 0x4c, 0xac, 0xda, 0xa6,
	0xa8, 0x0f, 0x11, 0x6a, 0xf7, 0xff, 0x31, 0xc0, 0xc4, 0xa4, 0xb2, 0x86, 0x80, 0xf6, 0xee, 0x05,
	0x0b, 0x22, 0x25, 0x18, 0xc5, 0xb6, 0x96, 0x7c, 0x9b, 0x49, 0xfb, 0xa2, 0x93, 0xed, 0x00, 0x09,
	0xa9, 0xfa, 0xc6, 0xf9, 0x9d, 0x73, 0x2f, 0xd7, 0x37, 0x96, 0xa1, 0x3d, 0x1b, 0x7f, 0x67, 0x09,
	0x4d, 0x9d, 0x5d, 0xc2, 0x04, 0x43, 0xfd, 0x80, 0xc5, 0xce, 0x46, 0xf0, 0xc0, 0x89, 0x57, 0x81,
	0x13, 0x6e, 0x79, 0xb8, 0xde, 0x08, 0x27, 0x66, 0x2b, 0x1a, 0xf5, 0x5f, 0x4d, 0x16, 0x34, 0x90,
	0x49, 0x28, 0xb2, 0x1f, 0xe3, 0x05, 0x93, 0x49, 0x40, 0x4d, 0x51, 0xff, 0xea, 0x60, 0x2c, 0xb3,
	0x5d, 0x0e, 0xaf, 0xff, 0x9d, 0x43, 0x33, 0xef, 0x8d, 0xde, 0x43, 0x67, 0xba, 0x5c, 0x8c, 0x8e,
	0xe5, 0xd8, 0x1a, 0x58, 0xf6, 0x85, 0x7f, 0x42, 0xd1, 0x4b, 0x68, 0xcc, 0xc6, 0x63, 0x22, 0x28,
	0x3e, 0x1b, 0x58, 0x76, 0xdd, 0xcf, 0x95, 0xe1, 0xcb, 0x30, 0xa6, 0xb8, 0xb6, 0xe7, 0x4a, 0xa1,
	0xb7, 0xd0, 0x1e, 0x13, 0x41, 0xd4, 0x6f, 0x2e, 0x48, 0xbc, 0xc3, 0xcf, 0x06, 0x96, 0x5d, 0xf3,
	0xcb, 0x10, 0xdd, 0x40, 0x77, 0x99, 0x90, 0x55, 0xb8, 0x5d, 0x7b, 0x1b, 0xc2, 0xe9, 0x88, 0xad,
	0x28, 0xae, 0xeb, 0xff, 0xaf, 0x70, 0x34, 0x87, 0x2e, 0x3f, 0x39, 0x24, 0x6e, 0x0c, 0x2c, 0xbb,
	0x73, 0xfb, 0xce, 0x29, 0xad, 0x46, 0xaf, 0xc4, 0xa9, 0x6c, 0xc4, 0xaf, 0x94, 0xa3, 0x09, 0xb4,
	0x78, 0x61, 0x3d, 0xb8, 0xa9, 0xdb, 0xbd, 0x79, 0xb2, 0x9d, 0x0a, 0xfa, 0xa5, 0x32, 0xf4, 0x02,
	0xea, 0x33, 0x92, 0x7a, 0x29, 0x3e, 0xd7, 0x67, 0x34, 0x42, 0xd3, 0x70, 0xeb, 0xa5, 0xf8, 0x22,
	0xa7, 0x4a, 0xa0, 0xd7, 0x00, 0x5e, 0x42, 0x47, 0x11, 0xe3, 0xd4, 0x4b, 0x31, 0x68, 0xab, 0x40,
	0xf4, 0x46, 0x98, 0x20, 0xd1, 0x2f, 0x16, 0xc9, 0x98, 0xaa, 0x25, 0x50, 0xfc, 0x5c, 0xa7, 0x2a,
	0x1c, 0xd9, 0x70, 0x69, 0x18, 0x89, 0x64, 0x1e, 0x6d, 0xe9, 0xe8, 0x29, 0x56, 0x5f, 0xe9, 0x9e,
	0x70, 0xe1, 0xa5, 0xb8, 0xad, 0x03, 0xb9, 0x52, 0xfc, 0x61, 0x47, 0xd5, 0x90, 0x1d, 0xc3, 0x8d,
	0x42, 0x18, 0x9a, 0xfb, 0x11, 0x2f, 0xb5, 0xb1, 0x97, 0xaa, 0x62, 0x1a, 0xae, 0x37, 0x5e, 0x8a,
	0xbb, 0xa6, 0xc2, 0x28, 0x75, 0xda, 0x7b, 0xf6, 0xc7, 0x4b, 0x71, 0xcf, 0x9c, 0x56, 0x0b, 0x74,
	0x0d, 0xad, 0x49, 0x1a, 0x6c, 0xc8, 0x76, 0x4d, 0xf5, 0xdd, 0x41, 0xfa, 0x8e, 0x94, 0x58, 0x31,
	0xa3, 0xef, 0xd1, 0x55, 0x39, 0xa3, 0x6f, 0x93, 0x0d, 0x6d, 0x57, 0x66, 0x5e, 0x12, 0x06, 0x74,
	0x2e, 0xa9, 0xa4, 0xf8, 0x6e, 0x50, 0xb3, 0x6b, 0xee, 0x59, 0xd7, 0xf2, 0xcb, 0x06, 0x72, 0xa0,
	0xeb, 0xca, 0xec, 0x21, 0x59, 0xd1, 0x64, 0x2e, 0x32, 0x13, 0xfe, 0x70, 0x08, 0x57, 0x3c, 0x74,
	0x03, 0x9d, 0x05, 0x8d, 0xa2, 0x42, 0xeb, 0x8f, 0x87, 0xf4, 0x89, 0x83, 0x86, 0xd0, 0x53, 0xa4,
	0xdc, 0xfc, 0xd3, 0x21, 0x5e, 0x35, 0xf3, 0xb9, 0x0d, 0xd3, 0xe9, 0xcf, 0xa5, 0xb9, 0x8f, 0xc6,
	0x7e, 0x8e, 0x42, 0xf4, 0x4b, 0x79, 0x8e, 0x42, 0x76, 0x08, 0x3d, 0x57, 0x66, 0x3f, 0x65, 0xac,
	0x19, 0x37, 0xf1, 0xaf, 0xc7, 0x39, 0x2a, 0x26, 0xba, 0x05, 0xa4, 0x7a, 0x9c, 0x94, 0x7c, 0x3b,
	0x94, 0x3c, 0xe2, 0xba, 0x43, 0x78, 0xe2, 0xc5, 0x71, 0xf7, 0x8f, 0x93, 0xa7, 0x5e, 0x14, 0x3e,
	0xb5, 0xfe, 0x5a, 0xd6, 0xef, 0x86, 0x7e, 0x5e, 0xee, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x59,
	0x87, 0x46, 0x23, 0xb9, 0x04, 0x00, 0x00,
}
