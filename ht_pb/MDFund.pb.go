// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDFund.proto

package com_htsc_mdc_insight_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//基金
type MDFund struct {
	HTSCSecurityID        string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate                int32             `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime                int32             `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp         int64             `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	TradingPhaseCode      string            `protobuf:"bytes,5,opt,name=TradingPhaseCode,proto3" json:"TradingPhaseCode,omitempty"`
	SecurityIDSource      ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType          ESecurityType     `protobuf:"varint,7,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	MaxPx                 int64             `protobuf:"varint,8,opt,name=MaxPx,proto3" json:"MaxPx,omitempty"`
	MinPx                 int64             `protobuf:"varint,9,opt,name=MinPx,proto3" json:"MinPx,omitempty"`
	PreClosePx            int64             `protobuf:"varint,10,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	NumTrades             int64             `protobuf:"varint,11,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	TotalVolumeTrade      int64             `protobuf:"varint,12,opt,name=TotalVolumeTrade,proto3" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade       int64             `protobuf:"varint,13,opt,name=TotalValueTrade,proto3" json:"TotalValueTrade,omitempty"`
	LastPx                int64             `protobuf:"varint,14,opt,name=LastPx,proto3" json:"LastPx,omitempty"`
	OpenPx                int64             `protobuf:"varint,15,opt,name=OpenPx,proto3" json:"OpenPx,omitempty"`
	ClosePx               int64             `protobuf:"varint,16,opt,name=ClosePx,proto3" json:"ClosePx,omitempty"`
	HighPx                int64             `protobuf:"varint,17,opt,name=HighPx,proto3" json:"HighPx,omitempty"`
	LowPx                 int64             `protobuf:"varint,18,opt,name=LowPx,proto3" json:"LowPx,omitempty"`
	DiffPx1               int64             `protobuf:"varint,19,opt,name=DiffPx1,proto3" json:"DiffPx1,omitempty"`
	DiffPx2               int64             `protobuf:"varint,20,opt,name=DiffPx2,proto3" json:"DiffPx2,omitempty"`
	TotalBuyQty           int64             `protobuf:"varint,21,opt,name=TotalBuyQty,proto3" json:"TotalBuyQty,omitempty"`
	TotalSellQty          int64             `protobuf:"varint,22,opt,name=TotalSellQty,proto3" json:"TotalSellQty,omitempty"`
	WeightedAvgBuyPx      int64             `protobuf:"varint,23,opt,name=WeightedAvgBuyPx,proto3" json:"WeightedAvgBuyPx,omitempty"`
	WeightedAvgSellPx     int64             `protobuf:"varint,24,opt,name=WeightedAvgSellPx,proto3" json:"WeightedAvgSellPx,omitempty"`
	WithdrawBuyNumber     int64             `protobuf:"varint,25,opt,name=WithdrawBuyNumber,proto3" json:"WithdrawBuyNumber,omitempty"`
	WithdrawBuyAmount     int64             `protobuf:"varint,26,opt,name=WithdrawBuyAmount,proto3" json:"WithdrawBuyAmount,omitempty"`
	WithdrawBuyMoney      int64             `protobuf:"varint,27,opt,name=WithdrawBuyMoney,proto3" json:"WithdrawBuyMoney,omitempty"`
	WithdrawSellNumber    int64             `protobuf:"varint,28,opt,name=WithdrawSellNumber,proto3" json:"WithdrawSellNumber,omitempty"`
	WithdrawSellAmount    int64             `protobuf:"varint,29,opt,name=WithdrawSellAmount,proto3" json:"WithdrawSellAmount,omitempty"`
	WithdrawSellMoney     int64             `protobuf:"varint,30,opt,name=WithdrawSellMoney,proto3" json:"WithdrawSellMoney,omitempty"`
	TotalBuyNumber        int64             `protobuf:"varint,31,opt,name=TotalBuyNumber,proto3" json:"TotalBuyNumber,omitempty"`
	TotalSellNumber       int64             `protobuf:"varint,32,opt,name=TotalSellNumber,proto3" json:"TotalSellNumber,omitempty"`
	BuyTradeMaxDuration   int64             `protobuf:"varint,33,opt,name=BuyTradeMaxDuration,proto3" json:"BuyTradeMaxDuration,omitempty"`
	SellTradeMaxDuration  int64             `protobuf:"varint,34,opt,name=SellTradeMaxDuration,proto3" json:"SellTradeMaxDuration,omitempty"`
	NumBuyOrders          int32             `protobuf:"varint,35,opt,name=NumBuyOrders,proto3" json:"NumBuyOrders,omitempty"`
	NumSellOrders         int32             `protobuf:"varint,36,opt,name=NumSellOrders,proto3" json:"NumSellOrders,omitempty"`
	IOPV                  int64             `protobuf:"varint,37,opt,name=IOPV,proto3" json:"IOPV,omitempty"`
	PreIOPV               int64             `protobuf:"varint,38,opt,name=PreIOPV,proto3" json:"PreIOPV,omitempty"`
	PurchaseNumber        int64             `protobuf:"varint,39,opt,name=PurchaseNumber,proto3" json:"PurchaseNumber,omitempty"`
	PurchaseAmount        int64             `protobuf:"varint,40,opt,name=PurchaseAmount,proto3" json:"PurchaseAmount,omitempty"`
	PurchaseMoney         int64             `protobuf:"varint,41,opt,name=PurchaseMoney,proto3" json:"PurchaseMoney,omitempty"`
	RedemptionNumber      int64             `protobuf:"varint,42,opt,name=RedemptionNumber,proto3" json:"RedemptionNumber,omitempty"`
	RedemptionAmount      int64             `protobuf:"varint,43,opt,name=RedemptionAmount,proto3" json:"RedemptionAmount,omitempty"`
	RedemptionMoney       int64             `protobuf:"varint,44,opt,name=RedemptionMoney,proto3" json:"RedemptionMoney,omitempty"`
	ExchangeDate          int32             `protobuf:"varint,45,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime          int32             `protobuf:"varint,46,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	ChannelNo             int32             `protobuf:"varint,50,opt,name=ChannelNo,proto3" json:"ChannelNo,omitempty"`
	BuyPriceQueue         []int64           `protobuf:"varint,51,rep,packed,name=BuyPriceQueue,proto3" json:"BuyPriceQueue,omitempty"`
	BuyOrderQtyQueue      []int64           `protobuf:"varint,52,rep,packed,name=BuyOrderQtyQueue,proto3" json:"BuyOrderQtyQueue,omitempty"`
	SellPriceQueue        []int64           `protobuf:"varint,53,rep,packed,name=SellPriceQueue,proto3" json:"SellPriceQueue,omitempty"`
	SellOrderQtyQueue     []int64           `protobuf:"varint,54,rep,packed,name=SellOrderQtyQueue,proto3" json:"SellOrderQtyQueue,omitempty"`
	BuyOrderQueue         []int64           `protobuf:"varint,55,rep,packed,name=BuyOrderQueue,proto3" json:"BuyOrderQueue,omitempty"`
	SellOrderQueue        []int64           `protobuf:"varint,56,rep,packed,name=SellOrderQueue,proto3" json:"SellOrderQueue,omitempty"`
	BuyNumOrdersQueue     []int64           `protobuf:"varint,57,rep,packed,name=BuyNumOrdersQueue,proto3" json:"BuyNumOrdersQueue,omitempty"`
	SellNumOrdersQueue    []int64           `protobuf:"varint,58,rep,packed,name=SellNumOrdersQueue,proto3" json:"SellNumOrdersQueue,omitempty"`
	NorminalPx            int64             `protobuf:"varint,59,opt,name=NorminalPx,proto3" json:"NorminalPx,omitempty"`
	ShortSellSharesTraded int64             `protobuf:"varint,60,opt,name=ShortSellSharesTraded,proto3" json:"ShortSellSharesTraded,omitempty"`
	ShortSellTurnover     int64             `protobuf:"varint,61,opt,name=ShortSellTurnover,proto3" json:"ShortSellTurnover,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}          `json:"-"`
	XXX_unrecognized      []byte            `json:"-"`
	XXX_sizecache         int32             `json:"-"`
}

func (m *MDFund) Reset()         { *m = MDFund{} }
func (m *MDFund) String() string { return proto.CompactTextString(m) }
func (*MDFund) ProtoMessage()    {}
func (*MDFund) Descriptor() ([]byte, []int) {
	return fileDescriptor_54b0a9b659cdf632, []int{0}
}

func (m *MDFund) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDFund.Unmarshal(m, b)
}
func (m *MDFund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDFund.Marshal(b, m, deterministic)
}
func (m *MDFund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDFund.Merge(m, src)
}
func (m *MDFund) XXX_Size() int {
	return xxx_messageInfo_MDFund.Size(m)
}
func (m *MDFund) XXX_DiscardUnknown() {
	xxx_messageInfo_MDFund.DiscardUnknown(m)
}

var xxx_messageInfo_MDFund proto.InternalMessageInfo

func (m *MDFund) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDFund) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDFund) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *MDFund) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *MDFund) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDFund) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDFund) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *MDFund) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDFund) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func (m *MDFund) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDFund) GetNumTrades() int64 {
	if m != nil {
		return m.NumTrades
	}
	return 0
}

func (m *MDFund) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *MDFund) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *MDFund) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *MDFund) GetOpenPx() int64 {
	if m != nil {
		return m.OpenPx
	}
	return 0
}

func (m *MDFund) GetClosePx() int64 {
	if m != nil {
		return m.ClosePx
	}
	return 0
}

func (m *MDFund) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *MDFund) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *MDFund) GetDiffPx1() int64 {
	if m != nil {
		return m.DiffPx1
	}
	return 0
}

func (m *MDFund) GetDiffPx2() int64 {
	if m != nil {
		return m.DiffPx2
	}
	return 0
}

func (m *MDFund) GetTotalBuyQty() int64 {
	if m != nil {
		return m.TotalBuyQty
	}
	return 0
}

func (m *MDFund) GetTotalSellQty() int64 {
	if m != nil {
		return m.TotalSellQty
	}
	return 0
}

func (m *MDFund) GetWeightedAvgBuyPx() int64 {
	if m != nil {
		return m.WeightedAvgBuyPx
	}
	return 0
}

func (m *MDFund) GetWeightedAvgSellPx() int64 {
	if m != nil {
		return m.WeightedAvgSellPx
	}
	return 0
}

func (m *MDFund) GetWithdrawBuyNumber() int64 {
	if m != nil {
		return m.WithdrawBuyNumber
	}
	return 0
}

func (m *MDFund) GetWithdrawBuyAmount() int64 {
	if m != nil {
		return m.WithdrawBuyAmount
	}
	return 0
}

func (m *MDFund) GetWithdrawBuyMoney() int64 {
	if m != nil {
		return m.WithdrawBuyMoney
	}
	return 0
}

func (m *MDFund) GetWithdrawSellNumber() int64 {
	if m != nil {
		return m.WithdrawSellNumber
	}
	return 0
}

func (m *MDFund) GetWithdrawSellAmount() int64 {
	if m != nil {
		return m.WithdrawSellAmount
	}
	return 0
}

func (m *MDFund) GetWithdrawSellMoney() int64 {
	if m != nil {
		return m.WithdrawSellMoney
	}
	return 0
}

func (m *MDFund) GetTotalBuyNumber() int64 {
	if m != nil {
		return m.TotalBuyNumber
	}
	return 0
}

func (m *MDFund) GetTotalSellNumber() int64 {
	if m != nil {
		return m.TotalSellNumber
	}
	return 0
}

func (m *MDFund) GetBuyTradeMaxDuration() int64 {
	if m != nil {
		return m.BuyTradeMaxDuration
	}
	return 0
}

func (m *MDFund) GetSellTradeMaxDuration() int64 {
	if m != nil {
		return m.SellTradeMaxDuration
	}
	return 0
}

func (m *MDFund) GetNumBuyOrders() int32 {
	if m != nil {
		return m.NumBuyOrders
	}
	return 0
}

func (m *MDFund) GetNumSellOrders() int32 {
	if m != nil {
		return m.NumSellOrders
	}
	return 0
}

func (m *MDFund) GetIOPV() int64 {
	if m != nil {
		return m.IOPV
	}
	return 0
}

func (m *MDFund) GetPreIOPV() int64 {
	if m != nil {
		return m.PreIOPV
	}
	return 0
}

func (m *MDFund) GetPurchaseNumber() int64 {
	if m != nil {
		return m.PurchaseNumber
	}
	return 0
}

func (m *MDFund) GetPurchaseAmount() int64 {
	if m != nil {
		return m.PurchaseAmount
	}
	return 0
}

func (m *MDFund) GetPurchaseMoney() int64 {
	if m != nil {
		return m.PurchaseMoney
	}
	return 0
}

func (m *MDFund) GetRedemptionNumber() int64 {
	if m != nil {
		return m.RedemptionNumber
	}
	return 0
}

func (m *MDFund) GetRedemptionAmount() int64 {
	if m != nil {
		return m.RedemptionAmount
	}
	return 0
}

func (m *MDFund) GetRedemptionMoney() int64 {
	if m != nil {
		return m.RedemptionMoney
	}
	return 0
}

func (m *MDFund) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *MDFund) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *MDFund) GetChannelNo() int32 {
	if m != nil {
		return m.ChannelNo
	}
	return 0
}

func (m *MDFund) GetBuyPriceQueue() []int64 {
	if m != nil {
		return m.BuyPriceQueue
	}
	return nil
}

func (m *MDFund) GetBuyOrderQtyQueue() []int64 {
	if m != nil {
		return m.BuyOrderQtyQueue
	}
	return nil
}

func (m *MDFund) GetSellPriceQueue() []int64 {
	if m != nil {
		return m.SellPriceQueue
	}
	return nil
}

func (m *MDFund) GetSellOrderQtyQueue() []int64 {
	if m != nil {
		return m.SellOrderQtyQueue
	}
	return nil
}

func (m *MDFund) GetBuyOrderQueue() []int64 {
	if m != nil {
		return m.BuyOrderQueue
	}
	return nil
}

func (m *MDFund) GetSellOrderQueue() []int64 {
	if m != nil {
		return m.SellOrderQueue
	}
	return nil
}

func (m *MDFund) GetBuyNumOrdersQueue() []int64 {
	if m != nil {
		return m.BuyNumOrdersQueue
	}
	return nil
}

func (m *MDFund) GetSellNumOrdersQueue() []int64 {
	if m != nil {
		return m.SellNumOrdersQueue
	}
	return nil
}

func (m *MDFund) GetNorminalPx() int64 {
	if m != nil {
		return m.NorminalPx
	}
	return 0
}

func (m *MDFund) GetShortSellSharesTraded() int64 {
	if m != nil {
		return m.ShortSellSharesTraded
	}
	return 0
}

func (m *MDFund) GetShortSellTurnover() int64 {
	if m != nil {
		return m.ShortSellTurnover
	}
	return 0
}

func init() {
	proto.RegisterType((*MDFund)(nil), "com.htsc.mdc.insight.model.MDFund")
}

func init() { proto.RegisterFile("MDFund.proto", fileDescriptor_54b0a9b659cdf632) }

var fileDescriptor_54b0a9b659cdf632 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0xdb, 0x72, 0xdb, 0x36,
	0x10, 0x86, 0x87, 0x71, 0xec, 0xd4, 0x88, 0x0f, 0x12, 0xec, 0x24, 0xa8, 0xeb, 0xa6, 0x8a, 0xeb,
	0xa4, 0xac, 0x9b, 0xb2, 0xae, 0x92, 0x9e, 0xdb, 0x8b, 0xc8, 0x72, 0xc7, 0x99, 0x89, 0x65, 0x5a,
	0xd2, 0xa4, 0xd7, 0x8c, 0x88, 0x88, 0x9c, 0x11, 0x09, 0x0d, 0x48, 0x24, 0xe4, 0xdb, 0xf4, 0x21,
	0xfb, 0x00, 0x9d, 0x5d, 0x40, 0x3c, 0x6a, 0x72, 0xc7, 0xfd, 0xfe, 0x7f, 0x81, 0xc5, 0x02, 0x04,
	0x49, 0x76, 0xae, 0x87, 0x7f, 0xab, 0xd8, 0x77, 0x96, 0x52, 0xa4, 0x82, 0x1e, 0xcd, 0x44, 0xe4,
	0x04, 0x69, 0x32, 0x73, 0x22, 0x7f, 0xe6, 0x84, 0x71, 0x12, 0xce, 0x83, 0xd4, 0x89, 0x84, 0xcf,
	0x17, 0x47, 0x8f, 0x2e, 0x27, 0x7c, 0xa6, 0x64, 0x98, 0xe6, 0xaf, 0x87, 0x13, 0xa1, 0xe4, 0x8c,
	0xeb, 0xa4, 0xa3, 0x83, 0x42, 0x98, 0xe6, 0x4b, 0x03, 0x4f, 0xfe, 0xeb, 0x92, 0x2d, 0x3d, 0x34,
	0x7d, 0x46, 0xf6, 0xae, 0xa6, 0x93, 0x8b, 0x32, 0x9b, 0x59, 0x3d, 0xcb, 0xde, 0x1e, 0x37, 0x28,
	0x7d, 0x08, 0x19, 0x43, 0x2f, 0xe5, 0xec, 0x4e, 0xcf, 0xb2, 0x37, 0xc7, 0x26, 0xd2, 0x7c, 0x1a,
	0x46, 0x9c, 0x6d, 0xac, 0x38, 0x44, 0xf4, 0x94, 0xec, 0x0e, 0xbd, 0xd4, 0x83, 0xe7, 0x24, 0xf5,
	0xa2, 0x25, 0xbb, 0xdb, 0xb3, 0xec, 0x8d, 0x71, 0x1d, 0xd2, 0x33, 0xd2, 0x99, 0x4a, 0xcf, 0x0f,
	0xe3, 0xb9, 0x1b, 0x78, 0x09, 0xbf, 0x10, 0x3e, 0x67, 0x9b, 0x38, 0x7f, 0x8b, 0xd3, 0x5b, 0xd2,
	0x49, 0x1a, 0x6b, 0x64, 0x5b, 0x3d, 0xcb, 0xde, 0xeb, 0x3f, 0x75, 0x6a, 0x9d, 0xc1, 0x8e, 0x38,
	0xad, 0x86, 0x8c, 0x5b, 0xe9, 0xf4, 0x92, 0xec, 0x24, 0x95, 0xee, 0xb0, 0x7b, 0x38, 0xdc, 0x93,
	0x4f, 0x0e, 0x07, 0xc6, 0x71, 0x2d, 0x8d, 0x1e, 0x92, 0xcd, 0x6b, 0x2f, 0x73, 0x33, 0xf6, 0x19,
	0xae, 0x51, 0x07, 0x48, 0xc3, 0xd8, 0xcd, 0xd8, 0xb6, 0xa1, 0x10, 0xd0, 0xc7, 0x84, 0xb8, 0x92,
	0x5f, 0x2c, 0x44, 0xc2, 0xdd, 0x8c, 0x11, 0x94, 0x2a, 0x84, 0x1e, 0x93, 0xed, 0x91, 0x8a, 0x60,
	0xf1, 0x3c, 0x61, 0xf7, 0x51, 0x2e, 0x01, 0xf6, 0x4b, 0xa4, 0xde, 0xe2, 0xad, 0x58, 0xa8, 0x88,
	0x23, 0x64, 0x3b, 0x68, 0x6a, 0x71, 0x6a, 0x93, 0x7d, 0xcd, 0xbc, 0x85, 0x32, 0xd6, 0x5d, 0xb4,
	0x36, 0x31, 0xec, 0xe1, 0x1b, 0x2f, 0x49, 0xdd, 0x8c, 0xed, 0xa1, 0xc1, 0x44, 0xc0, 0x6f, 0x96,
	0x1c, 0x96, 0xb0, 0xaf, 0xb9, 0x8e, 0x28, 0x23, 0xf7, 0x56, 0x0b, 0xe8, 0xa0, 0xb0, 0x0a, 0x21,
	0xe3, 0x2a, 0x9c, 0x07, 0x6e, 0xc6, 0xba, 0x3a, 0x43, 0x47, 0xd0, 0x8b, 0x37, 0xe2, 0xa3, 0x9b,
	0x31, 0xaa, 0x7b, 0x81, 0x01, 0x8c, 0x33, 0x0c, 0xdf, 0xbf, 0x77, 0xb3, 0x1f, 0xd9, 0x81, 0x1e,
	0xc7, 0x84, 0xa5, 0xd2, 0x67, 0x87, 0x55, 0xa5, 0x4f, 0x7b, 0xe4, 0x3e, 0x96, 0x3f, 0x50, 0xf9,
	0x6d, 0x9a, 0xb3, 0x07, 0xa8, 0x56, 0x11, 0x3d, 0x21, 0x3b, 0x18, 0x4e, 0xf8, 0x62, 0x01, 0x96,
	0x87, 0x68, 0xa9, 0x31, 0xe8, 0xe3, 0x3f, 0x1c, 0x5e, 0x1f, 0xee, 0xbf, 0xfa, 0x30, 0x1f, 0xa8,
	0xdc, 0xcd, 0xd8, 0x23, 0xdd, 0xc7, 0x26, 0xa7, 0xcf, 0x49, 0xb7, 0xc2, 0x60, 0x04, 0x37, 0x63,
	0x0c, 0xcd, 0x6d, 0x01, 0xdd, 0x61, 0x1a, 0xf8, 0xd2, 0xfb, 0x38, 0x50, 0xf9, 0x48, 0x45, 0xef,
	0xb8, 0x64, 0x9f, 0x1b, 0x77, 0x53, 0x68, 0xb8, 0x5f, 0x45, 0x42, 0xc5, 0x29, 0x3b, 0x6a, 0xb9,
	0xb5, 0x80, 0x55, 0x97, 0xf0, 0x5a, 0xc4, 0x3c, 0x67, 0x5f, 0x98, 0xaa, 0x1b, 0x9c, 0x3a, 0x84,
	0xae, 0x18, 0x54, 0x66, 0x0a, 0x39, 0x46, 0xf7, 0x1a, 0xa5, 0xe9, 0x37, 0xa5, 0x7c, 0xd9, 0xf6,
	0x9b, 0x5a, 0x2a, 0x95, 0x03, 0xd5, 0xc5, 0x3c, 0xae, 0x57, 0x5e, 0x08, 0x70, 0xcb, 0xac, 0xb6,
	0xc8, 0x54, 0xf2, 0x15, 0x5a, 0x1b, 0xb4, 0x38, 0xb3, 0x95, 0x92, 0x7b, 0x95, 0x33, 0x5b, 0xa9,
	0xf7, 0x9c, 0x1c, 0x0c, 0x54, 0x8e, 0xe7, 0xf7, 0xda, 0xcb, 0x86, 0x4a, 0x7a, 0x69, 0x28, 0x62,
	0xf6, 0x04, 0xdd, 0xeb, 0x24, 0xda, 0x27, 0x87, 0x90, 0xdf, 0x4a, 0x39, 0xc1, 0x94, 0xb5, 0x1a,
	0x9c, 0xa5, 0x91, 0x8a, 0x06, 0x2a, 0xbf, 0x91, 0x3e, 0x97, 0x09, 0xfb, 0x1a, 0xef, 0xb8, 0x1a,
	0x83, 0x9b, 0x6e, 0xa4, 0x22, 0x48, 0x37, 0xa6, 0x53, 0x34, 0xd5, 0x21, 0xa5, 0xe4, 0xee, 0xeb,
	0x1b, 0xf7, 0x2d, 0x7b, 0x8a, 0xb3, 0xe1, 0x33, 0x9c, 0x72, 0x57, 0x72, 0xc4, 0xcf, 0xf4, 0x29,
	0x37, 0x21, 0xf4, 0xcb, 0x55, 0x72, 0x06, 0x77, 0x9f, 0x69, 0xc3, 0x37, 0xba, 0x5f, 0x75, 0x5a,
	0xf5, 0x99, 0x1d, 0xb3, 0xeb, 0x3e, 0xb3, 0x5b, 0xa7, 0x64, 0x77, 0x45, 0xf4, 0x4e, 0x7d, 0xab,
	0x6f, 0xe3, 0x1a, 0x84, 0xf3, 0x35, 0xe6, 0x3e, 0x8f, 0x96, 0xb0, 0x76, 0x33, 0xef, 0x99, 0x3e,
	0x5f, 0x4d, 0x5e, 0xf7, 0x9a, 0xb9, 0xbf, 0x6b, 0x7a, 0xcd, 0xec, 0x36, 0xd9, 0x2f, 0x99, 0x9e,
	0xff, 0xb9, 0xde, 0xd5, 0x06, 0x86, 0x7e, 0x5f, 0x66, 0xb3, 0xc0, 0x8b, 0xe7, 0x1c, 0xbf, 0x35,
	0xdf, 0xeb, 0x7e, 0x57, 0x59, 0xd5, 0x83, 0xdf, 0x1d, 0xa7, 0xee, 0xc1, 0xaf, 0xcf, 0x31, 0xd9,
	0xbe, 0x08, 0xbc, 0x38, 0xe6, 0x8b, 0x91, 0x60, 0x7d, 0x34, 0x94, 0x80, 0xda, 0x64, 0x17, 0x5e,
	0x6d, 0x19, 0xce, 0xf8, 0xad, 0xe2, 0x8a, 0xb3, 0x17, 0xbd, 0x0d, 0x7b, 0x63, 0x70, 0xa7, 0x63,
	0x8d, 0xeb, 0x02, 0x75, 0x48, 0x67, 0xb5, 0xd1, 0xb7, 0x69, 0xae, 0xcd, 0x2f, 0x0b, 0x73, 0x4b,
	0xa3, 0x67, 0x64, 0x0f, 0xef, 0x81, 0x72, 0xe8, 0x9f, 0x0a, 0x77, 0x43, 0xa1, 0xe7, 0xa4, 0x5b,
	0x9c, 0x8f, 0x62, 0xf0, 0x9f, 0x0b, 0x7b, 0x5b, 0x34, 0x75, 0x6b, 0x86, 0xee, 0x5f, 0x6a, 0x75,
	0x97, 0xc2, 0xaa, 0x8e, 0x8a, 0xf5, 0xd7, 0x7a, 0x1d, 0x15, 0xef, 0x39, 0xe9, 0xea, 0x17, 0x50,
	0x9f, 0x54, 0x6d, 0xff, 0xad, 0xac, 0xa3, 0x25, 0xd2, 0x3e, 0xa1, 0xe6, 0x4d, 0xac, 0xa6, 0xfc,
	0x5e, 0xa4, 0xac, 0x51, 0xe1, 0xbb, 0x37, 0x12, 0x32, 0x0a, 0x63, 0x0f, 0xae, 0xcf, 0x3f, 0xf4,
	0x77, 0xaf, 0x24, 0xf4, 0x25, 0x79, 0x30, 0x09, 0x84, 0x4c, 0x21, 0x75, 0x12, 0x78, 0x92, 0x27,
	0xf8, 0x32, 0xfa, 0xec, 0x4f, 0xb4, 0xae, 0x17, 0xe1, 0x16, 0x2a, 0x84, 0xa9, 0x92, 0xb1, 0xf8,
	0xc0, 0x25, 0xfb, 0x4b, 0xdf, 0x42, 0x2d, 0x61, 0xf0, 0x03, 0xf9, 0xc4, 0x2f, 0xd4, 0xc0, 0xfc,
	0x6c, 0xb9, 0xf0, 0x87, 0x94, 0x5c, 0x59, 0xff, 0x5a, 0xd6, 0xbb, 0x2d, 0xfc, 0x5d, 0x7a, 0xf1,
	0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x9b, 0xf2, 0xfe, 0x88, 0x09, 0x00, 0x00,
}
