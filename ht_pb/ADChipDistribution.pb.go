// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ADChipDistribution.proto

package com_htsc_mdc_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//筹码分布
type ADChipDistribution struct {
	HTSCSecurityID                        string                      `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate                                int32                       `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime                                int32                       `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp                         int64                       `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	SecurityIDSource                      ESecurityIDSource           `protobuf:"varint,5,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType                          ESecurityType               `protobuf:"varint,6,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	ExchangeDate                          int32                       `protobuf:"varint,7,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime                          int32                       `protobuf:"varint,8,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	LastPx                                int64                       `protobuf:"varint,11,opt,name=LastPx,proto3" json:"LastPx,omitempty"`
	PreClosePx                            int64                       `protobuf:"varint,12,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	ShareTotalNumber                      int64                       `protobuf:"varint,13,opt,name=ShareTotalNumber,proto3" json:"ShareTotalNumber,omitempty"`
	IsFinalSettlement                     bool                        `protobuf:"varint,14,opt,name=IsFinalSettlement,proto3" json:"IsFinalSettlement,omitempty"`
	TotalShare                            int64                       `protobuf:"varint,15,opt,name=TotalShare,proto3" json:"TotalShare,omitempty"`
	ATotalShare                           int64                       `protobuf:"varint,16,opt,name=ATotalShare,proto3" json:"ATotalShare,omitempty"`
	AListedTotalShare                     int64                       `protobuf:"varint,17,opt,name=AListedTotalShare,proto3" json:"AListedTotalShare,omitempty"`
	TradableDetails                       []*ADChipDistributionDetail `protobuf:"bytes,20,rep,name=TradableDetails,proto3" json:"TradableDetails,omitempty"`
	TradableMCST                          int64                       `protobuf:"varint,21,opt,name=TradableMCST,proto3" json:"TradableMCST,omitempty"`
	TradableMaxCostOfPositions            int64                       `protobuf:"varint,22,opt,name=TradableMaxCostOfPositions,proto3" json:"TradableMaxCostOfPositions,omitempty"`
	TradableMinCostOfPositions            int64                       `protobuf:"varint,23,opt,name=TradableMinCostOfPositions,proto3" json:"TradableMinCostOfPositions,omitempty"`
	TradableProfitPercent                 int64                       `protobuf:"varint,24,opt,name=TradableProfitPercent,proto3" json:"TradableProfitPercent,omitempty"`
	TradableChipDispersionPercent         int64                       `protobuf:"varint,25,opt,name=TradableChipDispersionPercent,proto3" json:"TradableChipDispersionPercent,omitempty"`
	TradablePreProfitPercent              int64                       `protobuf:"varint,26,opt,name=TradablePreProfitPercent,proto3" json:"TradablePreProfitPercent,omitempty"`
	TradableProfitChangePercent           int64                       `protobuf:"varint,27,opt,name=TradableProfitChangePercent,proto3" json:"TradableProfitChangePercent,omitempty"`
	TradableCentralizedPercent            int64                       `protobuf:"varint,28,opt,name=TradableCentralizedPercent,proto3" json:"TradableCentralizedPercent,omitempty"`
	TradableCentralizedMaxCostOfPositions int64                       `protobuf:"varint,29,opt,name=TradableCentralizedMaxCostOfPositions,proto3" json:"TradableCentralizedMaxCostOfPositions,omitempty"`
	TradableCentralizedMinCostOfPositions int64                       `protobuf:"varint,30,opt,name=TradableCentralizedMinCostOfPositions,proto3" json:"TradableCentralizedMinCostOfPositions,omitempty"`
	TradableShareTotalNumber              int64                       `protobuf:"varint,31,opt,name=TradableShareTotalNumber,proto3" json:"TradableShareTotalNumber,omitempty"`
	TradableSharePercent                  int64                       `protobuf:"varint,32,opt,name=TradableSharePercent,proto3" json:"TradableSharePercent,omitempty"`
	RestrictedDetails                     []*ADChipDistributionDetail `protobuf:"bytes,40,rep,name=RestrictedDetails,proto3" json:"RestrictedDetails,omitempty"`
	RestrictedMCST                        int64                       `protobuf:"varint,41,opt,name=RestrictedMCST,proto3" json:"RestrictedMCST,omitempty"`
	RestrictedMaxCostOfPositions          int64                       `protobuf:"varint,42,opt,name=RestrictedMaxCostOfPositions,proto3" json:"RestrictedMaxCostOfPositions,omitempty"`
	RestrictedMinCostOfPositions          int64                       `protobuf:"varint,43,opt,name=RestrictedMinCostOfPositions,proto3" json:"RestrictedMinCostOfPositions,omitempty"`
	RestrictedShareTotalNumber            int64                       `protobuf:"varint,46,opt,name=RestrictedShareTotalNumber,proto3" json:"RestrictedShareTotalNumber,omitempty"`
	RestrictedSharePercent                int64                       `protobuf:"varint,47,opt,name=RestrictedSharePercent,proto3" json:"RestrictedSharePercent,omitempty"`
	RestrictedHoldDetails                 []*ADChipDistributionDetail `protobuf:"bytes,48,rep,name=RestrictedHoldDetails,proto3" json:"RestrictedHoldDetails,omitempty"`
	LargeShareholdersDetails              []*ADChipDistributionDetail `protobuf:"bytes,50,rep,name=LargeShareholdersDetails,proto3" json:"LargeShareholdersDetails,omitempty"`
	LargeShareholdersMCST                 int64                       `protobuf:"varint,51,opt,name=LargeShareholdersMCST,proto3" json:"LargeShareholdersMCST,omitempty"`
	LargeShareholdersMaxCostOfPositions   int64                       `protobuf:"varint,52,opt,name=LargeShareholdersMaxCostOfPositions,proto3" json:"LargeShareholdersMaxCostOfPositions,omitempty"`
	LargeShareholdersMinCostOfPositions   int64                       `protobuf:"varint,53,opt,name=LargeShareholdersMinCostOfPositions,proto3" json:"LargeShareholdersMinCostOfPositions,omitempty"`
	LargeShareholdersShareTotalNumber     int64                       `protobuf:"varint,54,opt,name=LargeShareholdersShareTotalNumber,proto3" json:"LargeShareholdersShareTotalNumber,omitempty"`
	LargeShareholdersSharePercent         int64                       `protobuf:"varint,55,opt,name=LargeShareholdersSharePercent,proto3" json:"LargeShareholdersSharePercent,omitempty"`
	XXX_NoUnkeyedLiteral                  struct{}                    `json:"-"`
	XXX_unrecognized                      []byte                      `json:"-"`
	XXX_sizecache                         int32                       `json:"-"`
}

func (m *ADChipDistribution) Reset()         { *m = ADChipDistribution{} }
func (m *ADChipDistribution) String() string { return proto.CompactTextString(m) }
func (*ADChipDistribution) ProtoMessage()    {}
func (*ADChipDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eb1e40715fc4e28, []int{0}
}

func (m *ADChipDistribution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ADChipDistribution.Unmarshal(m, b)
}
func (m *ADChipDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ADChipDistribution.Marshal(b, m, deterministic)
}
func (m *ADChipDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ADChipDistribution.Merge(m, src)
}
func (m *ADChipDistribution) XXX_Size() int {
	return xxx_messageInfo_ADChipDistribution.Size(m)
}
func (m *ADChipDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_ADChipDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_ADChipDistribution proto.InternalMessageInfo

func (m *ADChipDistribution) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *ADChipDistribution) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *ADChipDistribution) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *ADChipDistribution) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *ADChipDistribution) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *ADChipDistribution) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *ADChipDistribution) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *ADChipDistribution) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *ADChipDistribution) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *ADChipDistribution) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *ADChipDistribution) GetShareTotalNumber() int64 {
	if m != nil {
		return m.ShareTotalNumber
	}
	return 0
}

func (m *ADChipDistribution) GetIsFinalSettlement() bool {
	if m != nil {
		return m.IsFinalSettlement
	}
	return false
}

func (m *ADChipDistribution) GetTotalShare() int64 {
	if m != nil {
		return m.TotalShare
	}
	return 0
}

func (m *ADChipDistribution) GetATotalShare() int64 {
	if m != nil {
		return m.ATotalShare
	}
	return 0
}

func (m *ADChipDistribution) GetAListedTotalShare() int64 {
	if m != nil {
		return m.AListedTotalShare
	}
	return 0
}

func (m *ADChipDistribution) GetTradableDetails() []*ADChipDistributionDetail {
	if m != nil {
		return m.TradableDetails
	}
	return nil
}

func (m *ADChipDistribution) GetTradableMCST() int64 {
	if m != nil {
		return m.TradableMCST
	}
	return 0
}

func (m *ADChipDistribution) GetTradableMaxCostOfPositions() int64 {
	if m != nil {
		return m.TradableMaxCostOfPositions
	}
	return 0
}

func (m *ADChipDistribution) GetTradableMinCostOfPositions() int64 {
	if m != nil {
		return m.TradableMinCostOfPositions
	}
	return 0
}

func (m *ADChipDistribution) GetTradableProfitPercent() int64 {
	if m != nil {
		return m.TradableProfitPercent
	}
	return 0
}

func (m *ADChipDistribution) GetTradableChipDispersionPercent() int64 {
	if m != nil {
		return m.TradableChipDispersionPercent
	}
	return 0
}

func (m *ADChipDistribution) GetTradablePreProfitPercent() int64 {
	if m != nil {
		return m.TradablePreProfitPercent
	}
	return 0
}

func (m *ADChipDistribution) GetTradableProfitChangePercent() int64 {
	if m != nil {
		return m.TradableProfitChangePercent
	}
	return 0
}

func (m *ADChipDistribution) GetTradableCentralizedPercent() int64 {
	if m != nil {
		return m.TradableCentralizedPercent
	}
	return 0
}

func (m *ADChipDistribution) GetTradableCentralizedMaxCostOfPositions() int64 {
	if m != nil {
		return m.TradableCentralizedMaxCostOfPositions
	}
	return 0
}

func (m *ADChipDistribution) GetTradableCentralizedMinCostOfPositions() int64 {
	if m != nil {
		return m.TradableCentralizedMinCostOfPositions
	}
	return 0
}

func (m *ADChipDistribution) GetTradableShareTotalNumber() int64 {
	if m != nil {
		return m.TradableShareTotalNumber
	}
	return 0
}

func (m *ADChipDistribution) GetTradableSharePercent() int64 {
	if m != nil {
		return m.TradableSharePercent
	}
	return 0
}

func (m *ADChipDistribution) GetRestrictedDetails() []*ADChipDistributionDetail {
	if m != nil {
		return m.RestrictedDetails
	}
	return nil
}

func (m *ADChipDistribution) GetRestrictedMCST() int64 {
	if m != nil {
		return m.RestrictedMCST
	}
	return 0
}

func (m *ADChipDistribution) GetRestrictedMaxCostOfPositions() int64 {
	if m != nil {
		return m.RestrictedMaxCostOfPositions
	}
	return 0
}

func (m *ADChipDistribution) GetRestrictedMinCostOfPositions() int64 {
	if m != nil {
		return m.RestrictedMinCostOfPositions
	}
	return 0
}

func (m *ADChipDistribution) GetRestrictedShareTotalNumber() int64 {
	if m != nil {
		return m.RestrictedShareTotalNumber
	}
	return 0
}

func (m *ADChipDistribution) GetRestrictedSharePercent() int64 {
	if m != nil {
		return m.RestrictedSharePercent
	}
	return 0
}

func (m *ADChipDistribution) GetRestrictedHoldDetails() []*ADChipDistributionDetail {
	if m != nil {
		return m.RestrictedHoldDetails
	}
	return nil
}

func (m *ADChipDistribution) GetLargeShareholdersDetails() []*ADChipDistributionDetail {
	if m != nil {
		return m.LargeShareholdersDetails
	}
	return nil
}

func (m *ADChipDistribution) GetLargeShareholdersMCST() int64 {
	if m != nil {
		return m.LargeShareholdersMCST
	}
	return 0
}

func (m *ADChipDistribution) GetLargeShareholdersMaxCostOfPositions() int64 {
	if m != nil {
		return m.LargeShareholdersMaxCostOfPositions
	}
	return 0
}

func (m *ADChipDistribution) GetLargeShareholdersMinCostOfPositions() int64 {
	if m != nil {
		return m.LargeShareholdersMinCostOfPositions
	}
	return 0
}

func (m *ADChipDistribution) GetLargeShareholdersShareTotalNumber() int64 {
	if m != nil {
		return m.LargeShareholdersShareTotalNumber
	}
	return 0
}

func (m *ADChipDistribution) GetLargeShareholdersSharePercent() int64 {
	if m != nil {
		return m.LargeShareholdersSharePercent
	}
	return 0
}

//筹码分布详情
type ADChipDistributionDetail struct {
	Price                 int64    `protobuf:"varint,1,opt,name=Price,proto3" json:"Price,omitempty"`
	NumberOfShares        int64    `protobuf:"varint,2,opt,name=NumberOfShares,proto3" json:"NumberOfShares,omitempty"`
	NumberOfSharesPercent int64    `protobuf:"varint,3,opt,name=NumberOfSharesPercent,proto3" json:"NumberOfSharesPercent,omitempty"`
	ListedDate            int64    `protobuf:"varint,4,opt,name=ListedDate,proto3" json:"ListedDate,omitempty"`
	ShareHolderName       string   `protobuf:"bytes,5,opt,name=ShareHolderName,proto3" json:"ShareHolderName,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ADChipDistributionDetail) Reset()         { *m = ADChipDistributionDetail{} }
func (m *ADChipDistributionDetail) String() string { return proto.CompactTextString(m) }
func (*ADChipDistributionDetail) ProtoMessage()    {}
func (*ADChipDistributionDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_9eb1e40715fc4e28, []int{1}
}

func (m *ADChipDistributionDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ADChipDistributionDetail.Unmarshal(m, b)
}
func (m *ADChipDistributionDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ADChipDistributionDetail.Marshal(b, m, deterministic)
}
func (m *ADChipDistributionDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ADChipDistributionDetail.Merge(m, src)
}
func (m *ADChipDistributionDetail) XXX_Size() int {
	return xxx_messageInfo_ADChipDistributionDetail.Size(m)
}
func (m *ADChipDistributionDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ADChipDistributionDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ADChipDistributionDetail proto.InternalMessageInfo

func (m *ADChipDistributionDetail) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ADChipDistributionDetail) GetNumberOfShares() int64 {
	if m != nil {
		return m.NumberOfShares
	}
	return 0
}

func (m *ADChipDistributionDetail) GetNumberOfSharesPercent() int64 {
	if m != nil {
		return m.NumberOfSharesPercent
	}
	return 0
}

func (m *ADChipDistributionDetail) GetListedDate() int64 {
	if m != nil {
		return m.ListedDate
	}
	return 0
}

func (m *ADChipDistributionDetail) GetShareHolderName() string {
	if m != nil {
		return m.ShareHolderName
	}
	return ""
}

func init() {
	proto.RegisterType((*ADChipDistribution)(nil), "com.htsc.mdc.insight.model.ADChipDistribution")
	proto.RegisterType((*ADChipDistributionDetail)(nil), "com.htsc.mdc.insight.model.ADChipDistributionDetail")
}

func init() { proto.RegisterFile("ADChipDistribution.proto", fileDescriptor_9eb1e40715fc4e28) }

var fileDescriptor_9eb1e40715fc4e28 = []byte{
	// 853 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x7b, 0x6f, 0xdb, 0x36,
	0x10, 0x87, 0xe6, 0x25, 0x6b, 0x2f, 0x69, 0x1e, 0x6c, 0x92, 0x72, 0xee, 0x63, 0x6a, 0xb6, 0x0e,
	0x5a, 0x37, 0x68, 0x83, 0x9b, 0x75, 0xc0, 0x06, 0x14, 0x4b, 0xac, 0x0c, 0x2e, 0xe0, 0xb6, 0x9a,
	0xec, 0xbf, 0x07, 0xd0, 0x32, 0x13, 0x73, 0xd0, 0xc3, 0x10, 0x69, 0xc0, 0xdd, 0xa7, 0xd9, 0x9f,
	0xfb, 0x48, 0xfb, 0x38, 0x03, 0x4f, 0x56, 0x2c, 0x89, 0x92, 0x17, 0x20, 0xff, 0x99, 0xf7, 0x7b,
	0x90, 0xbc, 0x3b, 0xca, 0x07, 0xf4, 0xdc, 0xeb, 0xcf, 0xc4, 0xdc, 0x13, 0x52, 0x65, 0x62, 0xb2,
	0x50, 0x22, 0x4d, 0xdc, 0x79, 0x96, 0xaa, 0x94, 0x74, 0xc3, 0x34, 0x76, 0x67, 0x4a, 0x86, 0x6e,
	0x3c, 0x0d, 0x5d, 0x91, 0x48, 0x71, 0x3d, 0x53, 0x6e, 0x9c, 0x4e, 0x79, 0xd4, 0x7d, 0x78, 0x39,
	0xe2, 0xe1, 0x22, 0x13, 0xea, 0xe3, 0xf8, 0xe3, 0x9c, 0xe7, 0x82, 0xee, 0xa3, 0x9b, 0xe0, 0x5b,
	0x6f, 0x94, 0x2e, 0xb2, 0x70, 0x05, 0x9c, 0xfe, 0xf3, 0x10, 0x88, 0xb9, 0x0d, 0xf9, 0x1a, 0xf6,
	0x06, 0xe3, 0x51, 0x7f, 0x2d, 0xa2, 0x96, 0x6d, 0x39, 0xf7, 0x83, 0x5a, 0x94, 0x9c, 0xc0, 0xf6,
	0x3b, 0xcf, 0x63, 0x8a, 0xd3, 0x4f, 0x6c, 0xcb, 0xd9, 0x0a, 0x56, 0xab, 0x3c, 0x3e, 0x16, 0x31,
	0xa7, 0x9d, 0x22, 0xae, 0x57, 0xe4, 0x2b, 0x78, 0xe0, 0x31, 0xc5, 0xf4, 0x6f, 0xa9, 0x58, 0x3c,
	0xa7, 0x9f, 0xda, 0x96, 0xd3, 0x09, 0xaa, 0x41, 0xf2, 0x3b, 0x1c, 0xc8, 0xda, 0x71, 0xe9, 0x96,
	0x6d, 0x39, 0x7b, 0xbd, 0x17, 0x6e, 0xe5, 0xe6, 0x78, 0x63, 0xd7, 0xb8, 0x5b, 0x60, 0xc8, 0xc9,
	0x25, 0xec, 0xca, 0x52, 0x5a, 0xe8, 0x36, 0xda, 0x3d, 0xdf, 0x68, 0xa7, 0x89, 0x41, 0x45, 0x46,
	0x4e, 0x61, 0xf7, 0x72, 0x19, 0xce, 0x58, 0x72, 0xcd, 0xf1, 0xd6, 0x9f, 0xe1, 0xed, 0x2a, 0xb1,
	0x32, 0x07, 0x33, 0x70, 0xaf, 0xca, 0xc1, 0x3c, 0x9c, 0xc0, 0xf6, 0x90, 0x49, 0xe5, 0x2f, 0xe9,
	0x0e, 0x26, 0x60, 0xb5, 0x22, 0xcf, 0x00, 0xfc, 0x8c, 0xf7, 0xa3, 0x54, 0x72, 0x7f, 0x49, 0x77,
	0x11, 0x2b, 0x45, 0xc8, 0x4b, 0x38, 0x18, 0xcd, 0x58, 0xc6, 0xc7, 0xa9, 0x62, 0xd1, 0xfb, 0x45,
	0x3c, 0xe1, 0x19, 0x7d, 0x80, 0x2c, 0x23, 0x4e, 0xbe, 0x83, 0xc3, 0xb7, 0xf2, 0x37, 0x91, 0xb0,
	0x68, 0xc4, 0x95, 0x8a, 0x78, 0xcc, 0x13, 0x45, 0xf7, 0x6c, 0xcb, 0xb9, 0x17, 0x98, 0x80, 0xde,
	0x19, 0xc5, 0x68, 0x43, 0xf7, 0xf3, 0x9d, 0xd7, 0x11, 0x62, 0xc3, 0xce, 0x79, 0x89, 0x70, 0x80,
	0x84, 0x72, 0x48, 0xef, 0x77, 0x3e, 0x14, 0x52, 0xf1, 0x69, 0x89, 0x77, 0x88, 0x3c, 0x13, 0x20,
	0x7f, 0xc0, 0xfe, 0x38, 0x63, 0x53, 0x36, 0x89, 0xb8, 0xc7, 0x15, 0x13, 0x91, 0xa4, 0x47, 0x76,
	0xc7, 0xd9, 0xe9, 0x9d, 0xb9, 0xed, 0xcd, 0xed, 0x9a, 0xad, 0x9a, 0x8b, 0x83, 0xba, 0x99, 0xae,
	0x42, 0x11, 0x7a, 0xd7, 0x1f, 0x8d, 0xe9, 0x31, 0x1e, 0xa4, 0x12, 0x23, 0x6f, 0xa0, 0x7b, 0xb3,
	0x66, 0xcb, 0x7e, 0x2a, 0xd5, 0x87, 0x2b, 0x3f, 0x95, 0x42, 0xfb, 0x4a, 0x7a, 0x82, 0x8a, 0x0d,
	0x8c, 0x8a, 0x5e, 0x24, 0x75, 0xfd, 0xa3, 0x9a, 0xde, 0x60, 0x90, 0x33, 0x38, 0x2e, 0x50, 0x3f,
	0x4b, 0xaf, 0x84, 0xf2, 0x79, 0x16, 0xea, 0x2a, 0x51, 0x94, 0x36, 0x83, 0xc4, 0x83, 0xa7, 0x05,
	0xb0, 0x4a, 0xc6, 0x9c, 0x67, 0x52, 0xa4, 0x49, 0xa1, 0xfe, 0x1c, 0xd5, 0x9b, 0x49, 0xe4, 0x67,
	0xa0, 0x6b, 0xfb, 0xda, 0xf6, 0x5d, 0x34, 0x68, 0xc5, 0xc9, 0xaf, 0xf0, 0xb8, 0x7a, 0xb4, 0x3e,
	0x76, 0x76, 0x21, 0x7f, 0x8c, 0xf2, 0x4d, 0x94, 0x72, 0xe6, 0xfa, 0x3c, 0x51, 0x19, 0x8b, 0xc4,
	0x5f, 0x7c, 0x5a, 0x18, 0x3c, 0xa9, 0x66, 0xce, 0x64, 0x90, 0x31, 0xbc, 0x68, 0x40, 0x1b, 0x8a,
	0xf8, 0x14, 0xad, 0x6e, 0x47, 0x6e, 0x73, 0x35, 0x4b, 0xfb, 0xac, 0xdd, 0xd5, 0xac, 0x72, 0x29,
	0xd3, 0xc6, 0xdb, 0xfd, 0xa2, 0x9a, 0x69, 0xe3, 0x0d, 0xf7, 0xe0, 0xa8, 0x82, 0x15, 0x19, 0xb2,
	0x51, 0xd7, 0x88, 0x91, 0x09, 0x1c, 0x06, 0x5c, 0x3f, 0x90, 0x50, 0xf1, 0x69, 0xf1, 0xb6, 0x9c,
	0x3b, 0xbc, 0x2d, 0xd3, 0x4e, 0xff, 0x3f, 0xac, 0x83, 0xf8, 0xbe, 0xbe, 0xc1, 0x13, 0xd5, 0xa2,
	0xe4, 0x02, 0x9e, 0x94, 0x22, 0x66, 0x79, 0x5e, 0xa2, 0x6a, 0x23, 0xa7, 0xe6, 0x61, 0x16, 0xe3,
	0x5b, 0xc3, 0xc3, 0xac, 0xc1, 0x1b, 0xe8, 0xae, 0x71, 0xa3, 0x0a, 0x6e, 0xde, 0x6f, 0xed, 0x0c,
	0xf2, 0x1a, 0x4e, 0x6a, 0x68, 0x51, 0x89, 0xef, 0x51, 0xdb, 0x82, 0x92, 0x3f, 0xe1, 0x78, 0x8d,
	0x0c, 0xd2, 0xe8, 0xa6, 0x1e, 0x3f, 0xdc, 0xa1, 0x1e, 0xcd, 0x96, 0x64, 0x0e, 0x74, 0xc8, 0xb2,
	0xeb, 0xbc, 0x19, 0x66, 0x69, 0x34, 0xe5, 0x99, 0x2c, 0xb6, 0xeb, 0xdd, 0x61, 0xbb, 0x56, 0x57,
	0xfd, 0xfd, 0x32, 0x30, 0x6c, 0x86, 0x57, 0xf9, 0xf7, 0xab, 0x11, 0x24, 0x3e, 0x7c, 0x69, 0x02,
	0x66, 0x6b, 0x9c, 0xa1, 0xc7, 0x6d, 0xa8, 0xcd, 0x8e, 0x66, 0xa3, 0xfc, 0xd8, 0xe6, 0x68, 0xf6,
	0xcb, 0x10, 0x9e, 0x1b, 0x34, 0xa3, 0x6d, 0x5e, 0xa3, 0xdf, 0xff, 0x13, 0xf5, 0x17, 0xbb, 0x99,
	0x54, 0x34, 0xd1, 0x4f, 0xf9, 0x17, 0x7b, 0x23, 0xe9, 0xf4, 0x5f, 0xab, 0x69, 0x22, 0xcc, 0x6b,
	0x41, 0x8e, 0x60, 0xcb, 0xcf, 0x44, 0xc8, 0x71, 0x4e, 0xeb, 0x04, 0xf9, 0x42, 0x3f, 0xd3, 0xfc,
	0x08, 0x1f, 0xae, 0xd0, 0x4a, 0xe2, 0x98, 0xd6, 0x09, 0x6a, 0x51, 0x5d, 0xc8, 0x6a, 0xa4, 0x38,
	0x58, 0x27, 0x2f, 0x64, 0x23, 0xa8, 0x47, 0x86, 0xfc, 0x6f, 0x1d, 0x47, 0xa1, 0x7c, 0x92, 0x2b,
	0x45, 0x88, 0x03, 0xfb, 0x28, 0x18, 0xe0, 0x65, 0xde, 0xb3, 0x38, 0x9f, 0xe2, 0xee, 0x07, 0xf5,
	0xf0, 0xc5, 0x2f, 0xb0, 0x61, 0xa2, 0xbd, 0x68, 0xb8, 0xb5, 0xaf, 0x87, 0x57, 0x39, 0xb0, 0xfe,
	0xb6, 0xac, 0xc9, 0x36, 0x4e, 0xb2, 0xaf, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x0c, 0x23,
	0x2c, 0x2f, 0x0b, 0x00, 0x00,
}
