// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ADOrderbookSnapshot.proto

package com_htsc_mdc_insight_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//基于订单簿推算的行情快照
type ADOrderbookSnapshot struct {
	HTSCSecurityID          string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate                  int32             `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime                  int32             `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp           int64             `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	TradingPhaseCode        string            `protobuf:"bytes,5,opt,name=TradingPhaseCode,proto3" json:"TradingPhaseCode,omitempty"`
	SecurityIDSource        ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType            ESecurityType     `protobuf:"varint,7,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	ChannelNo               int32             `protobuf:"varint,8,opt,name=ChannelNo,proto3" json:"ChannelNo,omitempty"`
	ApplSeqNum              int64             `protobuf:"varint,9,opt,name=ApplSeqNum,proto3" json:"ApplSeqNum,omitempty"`
	SnapshotMDDateTime      int64             `protobuf:"varint,10,opt,name=SnapshotMDDateTime,proto3" json:"SnapshotMDDateTime,omitempty"`
	NumTrades               int64             `protobuf:"varint,11,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	TotalVolumeTrade        int64             `protobuf:"varint,12,opt,name=TotalVolumeTrade,proto3" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade         int64             `protobuf:"varint,13,opt,name=TotalValueTrade,proto3" json:"TotalValueTrade,omitempty"`
	LastPx                  int64             `protobuf:"varint,14,opt,name=LastPx,proto3" json:"LastPx,omitempty"`
	HighPx                  int64             `protobuf:"varint,17,opt,name=HighPx,proto3" json:"HighPx,omitempty"`
	LowPx                   int64             `protobuf:"varint,18,opt,name=LowPx,proto3" json:"LowPx,omitempty"`
	TotalBuyQty             int64             `protobuf:"varint,19,opt,name=TotalBuyQty,proto3" json:"TotalBuyQty,omitempty"`
	TotalSellQty            int64             `protobuf:"varint,20,opt,name=TotalSellQty,proto3" json:"TotalSellQty,omitempty"`
	WeightedAvgBuyPx        int64             `protobuf:"varint,21,opt,name=WeightedAvgBuyPx,proto3" json:"WeightedAvgBuyPx,omitempty"`
	WeightedAvgSellPx       int64             `protobuf:"varint,22,opt,name=WeightedAvgSellPx,proto3" json:"WeightedAvgSellPx,omitempty"`
	TotalBuyNumber          int64             `protobuf:"varint,23,opt,name=TotalBuyNumber,proto3" json:"TotalBuyNumber,omitempty"`
	TotalSellNumber         int64             `protobuf:"varint,24,opt,name=TotalSellNumber,proto3" json:"TotalSellNumber,omitempty"`
	NumBuyOrders            int32             `protobuf:"varint,25,opt,name=NumBuyOrders,proto3" json:"NumBuyOrders,omitempty"`
	NumSellOrders           int32             `protobuf:"varint,26,opt,name=NumSellOrders,proto3" json:"NumSellOrders,omitempty"`
	ExchangeDate            int32             `protobuf:"varint,27,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime            int32             `protobuf:"varint,28,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	BuyEntries              []*ADEntryDetail  `protobuf:"bytes,30,rep,name=BuyEntries,proto3" json:"BuyEntries,omitempty"`
	SellEntries             []*ADEntryDetail  `protobuf:"bytes,31,rep,name=SellEntries,proto3" json:"SellEntries,omitempty"`
	BuyMarketOrders         []int64           `protobuf:"varint,32,rep,packed,name=BuyMarketOrders,proto3" json:"BuyMarketOrders,omitempty"`
	SellMarketOrders        []int64           `protobuf:"varint,33,rep,packed,name=SellMarketOrders,proto3" json:"SellMarketOrders,omitempty"`
	AfterMatchedBuyEntries  []*ADEntryDetail  `protobuf:"bytes,34,rep,name=afterMatchedBuyEntries,proto3" json:"afterMatchedBuyEntries,omitempty"`
	AfterMatchedSellEntries []*ADEntryDetail  `protobuf:"bytes,35,rep,name=afterMatchedSellEntries,proto3" json:"afterMatchedSellEntries,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}          `json:"-"`
	XXX_unrecognized        []byte            `json:"-"`
	XXX_sizecache           int32             `json:"-"`
}

func (m *ADOrderbookSnapshot) Reset()         { *m = ADOrderbookSnapshot{} }
func (m *ADOrderbookSnapshot) String() string { return proto.CompactTextString(m) }
func (*ADOrderbookSnapshot) ProtoMessage()    {}
func (*ADOrderbookSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01d5c3ea9dd8734, []int{0}
}

func (m *ADOrderbookSnapshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ADOrderbookSnapshot.Unmarshal(m, b)
}
func (m *ADOrderbookSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ADOrderbookSnapshot.Marshal(b, m, deterministic)
}
func (m *ADOrderbookSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ADOrderbookSnapshot.Merge(m, src)
}
func (m *ADOrderbookSnapshot) XXX_Size() int {
	return xxx_messageInfo_ADOrderbookSnapshot.Size(m)
}
func (m *ADOrderbookSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_ADOrderbookSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_ADOrderbookSnapshot proto.InternalMessageInfo

func (m *ADOrderbookSnapshot) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *ADOrderbookSnapshot) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *ADOrderbookSnapshot) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *ADOrderbookSnapshot) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *ADOrderbookSnapshot) GetChannelNo() int32 {
	if m != nil {
		return m.ChannelNo
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetApplSeqNum() int64 {
	if m != nil {
		return m.ApplSeqNum
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetSnapshotMDDateTime() int64 {
	if m != nil {
		return m.SnapshotMDDateTime
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetNumTrades() int64 {
	if m != nil {
		return m.NumTrades
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetTotalBuyQty() int64 {
	if m != nil {
		return m.TotalBuyQty
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetTotalSellQty() int64 {
	if m != nil {
		return m.TotalSellQty
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetWeightedAvgBuyPx() int64 {
	if m != nil {
		return m.WeightedAvgBuyPx
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetWeightedAvgSellPx() int64 {
	if m != nil {
		return m.WeightedAvgSellPx
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetTotalBuyNumber() int64 {
	if m != nil {
		return m.TotalBuyNumber
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetTotalSellNumber() int64 {
	if m != nil {
		return m.TotalSellNumber
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetNumBuyOrders() int32 {
	if m != nil {
		return m.NumBuyOrders
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetNumSellOrders() int32 {
	if m != nil {
		return m.NumSellOrders
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *ADOrderbookSnapshot) GetBuyEntries() []*ADEntryDetail {
	if m != nil {
		return m.BuyEntries
	}
	return nil
}

func (m *ADOrderbookSnapshot) GetSellEntries() []*ADEntryDetail {
	if m != nil {
		return m.SellEntries
	}
	return nil
}

func (m *ADOrderbookSnapshot) GetBuyMarketOrders() []int64 {
	if m != nil {
		return m.BuyMarketOrders
	}
	return nil
}

func (m *ADOrderbookSnapshot) GetSellMarketOrders() []int64 {
	if m != nil {
		return m.SellMarketOrders
	}
	return nil
}

func (m *ADOrderbookSnapshot) GetAfterMatchedBuyEntries() []*ADEntryDetail {
	if m != nil {
		return m.AfterMatchedBuyEntries
	}
	return nil
}

func (m *ADOrderbookSnapshot) GetAfterMatchedSellEntries() []*ADEntryDetail {
	if m != nil {
		return m.AfterMatchedSellEntries
	}
	return nil
}

//买卖盘档位信息
type ADEntryDetail struct {
	Level                int32    `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	Price                int64    `protobuf:"varint,2,opt,name=Price,proto3" json:"Price,omitempty"`
	TotalQty             int32    `protobuf:"varint,3,opt,name=TotalQty,proto3" json:"TotalQty,omitempty"`
	NumberOfOrders       int32    `protobuf:"varint,4,opt,name=NumberOfOrders,proto3" json:"NumberOfOrders,omitempty"`
	OrderQtyList         []int32  `protobuf:"varint,5,rep,packed,name=OrderQtyList,proto3" json:"OrderQtyList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ADEntryDetail) Reset()         { *m = ADEntryDetail{} }
func (m *ADEntryDetail) String() string { return proto.CompactTextString(m) }
func (*ADEntryDetail) ProtoMessage()    {}
func (*ADEntryDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_e01d5c3ea9dd8734, []int{1}
}

func (m *ADEntryDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ADEntryDetail.Unmarshal(m, b)
}
func (m *ADEntryDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ADEntryDetail.Marshal(b, m, deterministic)
}
func (m *ADEntryDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ADEntryDetail.Merge(m, src)
}
func (m *ADEntryDetail) XXX_Size() int {
	return xxx_messageInfo_ADEntryDetail.Size(m)
}
func (m *ADEntryDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_ADEntryDetail.DiscardUnknown(m)
}

var xxx_messageInfo_ADEntryDetail proto.InternalMessageInfo

func (m *ADEntryDetail) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ADEntryDetail) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ADEntryDetail) GetTotalQty() int32 {
	if m != nil {
		return m.TotalQty
	}
	return 0
}

func (m *ADEntryDetail) GetNumberOfOrders() int32 {
	if m != nil {
		return m.NumberOfOrders
	}
	return 0
}

func (m *ADEntryDetail) GetOrderQtyList() []int32 {
	if m != nil {
		return m.OrderQtyList
	}
	return nil
}

func init() {
	proto.RegisterType((*ADOrderbookSnapshot)(nil), "com.htsc.mdc.insight.model.ADOrderbookSnapshot")
	proto.RegisterType((*ADEntryDetail)(nil), "com.htsc.mdc.insight.model.ADEntryDetail")
}

func init() { proto.RegisterFile("ADOrderbookSnapshot.proto", fileDescriptor_e01d5c3ea9dd8734) }

var fileDescriptor_e01d5c3ea9dd8734 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0xc7, 0x65, 0x42, 0x78, 0x30, 0x09, 0x10, 0x16, 0x1e, 0x2c, 0x79, 0x88, 0x67, 0xd2, 0x16,
	0xb9, 0x15, 0xf2, 0x81, 0x5e, 0x7b, 0x89, 0x49, 0x24, 0x50, 0x21, 0x18, 0x27, 0x6a, 0xcf, 0x8b,
	0xb3, 0xc4, 0x16, 0x76, 0x9c, 0xda, 0x6b, 0x1a, 0x7f, 0x9b, 0xde, 0xfa, 0x41, 0xfa, 0xc5, 0xaa,
	0x1d, 0x3b, 0x89, 0xed, 0x00, 0x12, 0xb7, 0xcc, 0x6f, 0xfe, 0x33, 0xeb, 0xfd, 0x67, 0x67, 0x17,
	0x0e, 0xdb, 0x9d, 0xdb, 0x70, 0xc8, 0xc3, 0xfb, 0x20, 0x78, 0xec, 0x8f, 0xd9, 0x24, 0x72, 0x02,
	0xa1, 0x4f, 0xc2, 0x40, 0x04, 0xa4, 0x69, 0x07, 0xbe, 0xee, 0x88, 0xc8, 0xd6, 0xfd, 0xa1, 0xad,
	0xbb, 0xe3, 0xc8, 0x1d, 0x39, 0x42, 0xf7, 0x83, 0x21, 0xf7, 0x9a, 0xbb, 0xdd, 0x3e, 0xb7, 0xe3,
	0xd0, 0x15, 0xc9, 0x20, 0x99, 0xf0, 0xb4, 0xa0, 0x79, 0x30, 0x87, 0x57, 0x9d, 0x7e, 0x10, 0x87,
	0x76, 0x96, 0x68, 0xfd, 0xa9, 0xc1, 0xee, 0x33, 0xeb, 0x90, 0x53, 0xd8, 0xba, 0x1c, 0xf4, 0x2f,
	0x16, 0x55, 0x54, 0x51, 0x15, 0x6d, 0xc3, 0x2a, 0x51, 0xb2, 0x0f, 0x6b, 0x37, 0x9d, 0x0e, 0x13,
	0x9c, 0xae, 0xa8, 0x8a, 0x56, 0xb5, 0xb2, 0x28, 0xe5, 0x03, 0xd7, 0xe7, 0xb4, 0x32, 0xe3, 0x32,
	0x22, 0xef, 0x61, 0xb3, 0xc3, 0x04, 0x93, 0xbf, 0x23, 0xc1, 0xfc, 0x09, 0x5d, 0x55, 0x15, 0xad,
	0x62, 0x15, 0x21, 0xf9, 0x04, 0x8d, 0x41, 0xc8, 0x86, 0xee, 0x78, 0x64, 0x3a, 0x2c, 0xe2, 0x17,
	0xc1, 0x90, 0xd3, 0x2a, 0xae, 0xbf, 0xc4, 0xc9, 0x1d, 0x34, 0xa2, 0xd2, 0xde, 0xe8, 0x9a, 0xaa,
	0x68, 0x5b, 0xe7, 0x1f, 0xf4, 0x82, 0x4d, 0x68, 0x8f, 0xbe, 0x64, 0x84, 0xb5, 0x54, 0x4e, 0xba,
	0x50, 0x8f, 0x72, 0x1e, 0xd2, 0x7f, 0xb0, 0xdd, 0xc9, 0xab, 0xed, 0xa4, 0xd0, 0x2a, 0x94, 0x91,
	0x23, 0xd8, 0xb8, 0x70, 0xd8, 0x78, 0xcc, 0xbd, 0x5e, 0x40, 0xd7, 0xd1, 0x86, 0x05, 0x20, 0xc7,
	0x00, 0xed, 0xc9, 0xc4, 0xeb, 0xf3, 0x1f, 0xbd, 0xd8, 0xa7, 0x1b, 0x68, 0x43, 0x8e, 0x10, 0x1d,
	0xc8, 0xec, 0xdf, 0x48, 0x3d, 0x45, 0x37, 0x01, 0x75, 0xcf, 0x64, 0xe4, 0x6a, 0xbd, 0xd8, 0x97,
	0xf6, 0xf0, 0x88, 0xd6, 0x50, 0xb6, 0x00, 0xe8, 0x68, 0x20, 0x98, 0xf7, 0x2d, 0xf0, 0x62, 0x9f,
	0x23, 0xa4, 0x75, 0x14, 0x2d, 0x71, 0xa2, 0xc1, 0x76, 0xca, 0x98, 0x17, 0x67, 0xd2, 0x4d, 0x94,
	0x96, 0xb1, 0xfc, 0x97, 0xaf, 0x59, 0x24, 0xcc, 0x29, 0xdd, 0x42, 0x41, 0x16, 0x49, 0x7e, 0xe9,
	0x8e, 0x1c, 0x73, 0x4a, 0x77, 0x52, 0x9e, 0x46, 0x64, 0x0f, 0xaa, 0xd7, 0xc1, 0x4f, 0x73, 0x4a,
	0x09, 0xe2, 0x34, 0x20, 0x2a, 0xd4, 0xb0, 0xb1, 0x11, 0x27, 0x77, 0x22, 0xa1, 0xbb, 0x98, 0xcb,
	0x23, 0xd2, 0x82, 0x3a, 0x86, 0x7d, 0xee, 0x79, 0x52, 0xb2, 0x87, 0x92, 0x02, 0x93, 0x3b, 0xfc,
	0xce, 0xe5, 0x1c, 0xf0, 0x61, 0xfb, 0x69, 0x64, 0xc4, 0x89, 0x39, 0xa5, 0xff, 0xa6, 0x3b, 0x2c,
	0x73, 0x72, 0x06, 0x3b, 0x39, 0x26, 0x3b, 0x98, 0x53, 0xba, 0x8f, 0xe2, 0xe5, 0x84, 0x9c, 0x85,
	0xd9, 0xc7, 0xf4, 0x62, 0xff, 0x9e, 0x87, 0xf4, 0x00, 0xa5, 0x25, 0x3a, 0xf7, 0x4d, 0x96, 0x65,
	0x42, 0x9a, 0xf3, 0x6d, 0x81, 0xe5, 0x7e, 0x7a, 0xb1, 0x6f, 0xc4, 0x09, 0x0e, 0x5e, 0x44, 0x0f,
	0xf1, 0x70, 0x14, 0x98, 0x9c, 0x94, 0x5e, 0xec, 0xcb, 0xa2, 0x4c, 0xd4, 0x44, 0x51, 0x11, 0xca,
	0x4e, 0xdd, 0xa9, 0xed, 0xb0, 0xf1, 0x88, 0xe3, 0x14, 0xfe, 0x97, 0x76, 0xca, 0xb3, 0xbc, 0x06,
	0xcf, 0xd0, 0x51, 0x51, 0x83, 0xa7, 0xe7, 0x0a, 0xc0, 0x88, 0x93, 0xee, 0x58, 0x84, 0x2e, 0x8f,
	0xe8, 0xb1, 0x5a, 0xd1, 0x6a, 0xe7, 0x1f, 0xf5, 0x97, 0xaf, 0x19, 0xbd, 0xdd, 0x91, 0xe2, 0xa4,
	0xc3, 0x05, 0x73, 0x3d, 0x2b, 0x57, 0x4c, 0xbe, 0x42, 0x4d, 0x7e, 0xe0, 0xac, 0xd7, 0xff, 0x6f,
	0xed, 0x95, 0xaf, 0x26, 0x67, 0xb0, 0x6d, 0xc4, 0xc9, 0x0d, 0x0b, 0x1f, 0xb9, 0xc8, 0x7c, 0x50,
	0xd5, 0x8a, 0x56, 0x31, 0x56, 0x1a, 0x8a, 0x55, 0x4e, 0x11, 0x1d, 0x1a, 0xb2, 0xb8, 0x20, 0x3f,
	0x99, 0xcb, 0x97, 0x72, 0x84, 0xc1, 0x3e, 0x7b, 0x10, 0x3c, 0xbc, 0x61, 0xc2, 0x76, 0xf8, 0x30,
	0xe7, 0x40, 0xeb, 0xad, 0x5f, 0xfd, 0x42, 0x23, 0x62, 0xc3, 0x41, 0x3e, 0x93, 0x77, 0xe6, 0xdd,
	0x5b, 0xd7, 0x78, 0xa9, 0x53, 0xeb, 0xb7, 0x02, 0x9b, 0x05, 0x29, 0x4e, 0x1a, 0x7f, 0xe2, 0x1e,
	0x5e, 0xdb, 0x55, 0x2b, 0x0d, 0x24, 0x35, 0x43, 0xd7, 0x4e, 0x2f, 0xeb, 0x8a, 0x95, 0x06, 0xa4,
	0x09, 0xeb, 0x78, 0x40, 0xe5, 0x64, 0xa5, 0xb7, 0xf5, 0x3c, 0x96, 0x67, 0x3f, 0x3d, 0xb3, 0xb7,
	0x0f, 0x99, 0x9f, 0xab, 0xa8, 0x28, 0x51, 0x72, 0x0a, 0x75, 0xfc, 0x75, 0x27, 0x92, 0x6b, 0x37,
	0x12, 0xb4, 0xaa, 0x56, 0xb4, 0x2a, 0xba, 0x5e, 0xe0, 0xc6, 0x17, 0x78, 0xe5, 0xed, 0x32, 0x9e,
	0x7b, 0xf2, 0x4c, 0xf9, 0x4e, 0x45, 0x97, 0xca, 0x2f, 0x45, 0xb9, 0x5f, 0xc3, 0x47, 0xeb, 0xf3,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x15, 0x22, 0x45, 0x17, 0x1b, 0x07, 0x00, 0x00,
}
