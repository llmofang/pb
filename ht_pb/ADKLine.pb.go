// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ADKLine.proto

package com_htsc_mdc_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//K线指标
type ADKLine struct {
	HTSCSecurityID             string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate                     int32             `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime                     int32             `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp              int64             `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	SecurityIDSource           ESecurityIDSource `protobuf:"varint,5,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType               ESecurityType     `protobuf:"varint,6,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	PeriodType                 EMDPeriodType     `protobuf:"varint,7,opt,name=PeriodType,proto3,enum=com.htsc.mdc.model.EMDPeriodType" json:"PeriodType,omitempty"`
	OpenPx                     int64             `protobuf:"varint,8,opt,name=OpenPx,proto3" json:"OpenPx,omitempty"`
	ClosePx                    int64             `protobuf:"varint,9,opt,name=ClosePx,proto3" json:"ClosePx,omitempty"`
	HighPx                     int64             `protobuf:"varint,10,opt,name=HighPx,proto3" json:"HighPx,omitempty"`
	LowPx                      int64             `protobuf:"varint,11,opt,name=LowPx,proto3" json:"LowPx,omitempty"`
	NumTrades                  int64             `protobuf:"varint,12,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	TotalVolumeTrade           int64             `protobuf:"varint,13,opt,name=TotalVolumeTrade,proto3" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade            int64             `protobuf:"varint,14,opt,name=TotalValueTrade,proto3" json:"TotalValueTrade,omitempty"`
	IOPV                       int64             `protobuf:"varint,15,opt,name=IOPV,proto3" json:"IOPV,omitempty"`
	OpenInterest               int64             `protobuf:"varint,16,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	SettlePrice                int64             `protobuf:"varint,17,opt,name=SettlePrice,proto3" json:"SettlePrice,omitempty"`
	ExchangeDate               int32             `protobuf:"varint,18,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime               int32             `protobuf:"varint,19,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	KLineCategory              int32             `protobuf:"varint,20,opt,name=KLineCategory,proto3" json:"KLineCategory,omitempty"`
	AfterHoursNumTrades        int64             `protobuf:"varint,21,opt,name=AfterHoursNumTrades,proto3" json:"AfterHoursNumTrades,omitempty"`
	AfterHoursTotalVolumeTrade int64             `protobuf:"varint,22,opt,name=AfterHoursTotalVolumeTrade,proto3" json:"AfterHoursTotalVolumeTrade,omitempty"`
	AfterHoursTotalValueTrade  int64             `protobuf:"varint,23,opt,name=AfterHoursTotalValueTrade,proto3" json:"AfterHoursTotalValueTrade,omitempty"`
	PreClosePx                 int64             `protobuf:"varint,24,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	PreCloseYield              int64             `protobuf:"varint,25,opt,name=PreCloseYield,proto3" json:"PreCloseYield,omitempty"`
	PreWeightedAvgPx           int64             `protobuf:"varint,26,opt,name=PreWeightedAvgPx,proto3" json:"PreWeightedAvgPx,omitempty"`
	PreWeightedAvgYield        int64             `protobuf:"varint,27,opt,name=PreWeightedAvgYield,proto3" json:"PreWeightedAvgYield,omitempty"`
	CloseWeightedAvgPx         int64             `protobuf:"varint,28,opt,name=CloseWeightedAvgPx,proto3" json:"CloseWeightedAvgPx,omitempty"`
	CloseWeightedAvgYield      int64             `protobuf:"varint,29,opt,name=CloseWeightedAvgYield,proto3" json:"CloseWeightedAvgYield,omitempty"`
	OpenYield                  int64             `protobuf:"varint,30,opt,name=OpenYield,proto3" json:"OpenYield,omitempty"`
	HighYield                  int64             `protobuf:"varint,31,opt,name=HighYield,proto3" json:"HighYield,omitempty"`
	LowYield                   int64             `protobuf:"varint,32,opt,name=LowYield,proto3" json:"LowYield,omitempty"`
	CloseYield                 int64             `protobuf:"varint,33,opt,name=CloseYield,proto3" json:"CloseYield,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}          `json:"-"`
	XXX_unrecognized           []byte            `json:"-"`
	XXX_sizecache              int32             `json:"-"`
}

func (m *ADKLine) Reset()         { *m = ADKLine{} }
func (m *ADKLine) String() string { return proto.CompactTextString(m) }
func (*ADKLine) ProtoMessage()    {}
func (*ADKLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d948c1d14207efa, []int{0}
}

func (m *ADKLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ADKLine.Unmarshal(m, b)
}
func (m *ADKLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ADKLine.Marshal(b, m, deterministic)
}
func (m *ADKLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ADKLine.Merge(m, src)
}
func (m *ADKLine) XXX_Size() int {
	return xxx_messageInfo_ADKLine.Size(m)
}
func (m *ADKLine) XXX_DiscardUnknown() {
	xxx_messageInfo_ADKLine.DiscardUnknown(m)
}

var xxx_messageInfo_ADKLine proto.InternalMessageInfo

func (m *ADKLine) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *ADKLine) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *ADKLine) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *ADKLine) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *ADKLine) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *ADKLine) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *ADKLine) GetPeriodType() EMDPeriodType {
	if m != nil {
		return m.PeriodType
	}
	return EMDPeriodType_DefaultPeriod
}

func (m *ADKLine) GetOpenPx() int64 {
	if m != nil {
		return m.OpenPx
	}
	return 0
}

func (m *ADKLine) GetClosePx() int64 {
	if m != nil {
		return m.ClosePx
	}
	return 0
}

func (m *ADKLine) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *ADKLine) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *ADKLine) GetNumTrades() int64 {
	if m != nil {
		return m.NumTrades
	}
	return 0
}

func (m *ADKLine) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *ADKLine) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *ADKLine) GetIOPV() int64 {
	if m != nil {
		return m.IOPV
	}
	return 0
}

func (m *ADKLine) GetOpenInterest() int64 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *ADKLine) GetSettlePrice() int64 {
	if m != nil {
		return m.SettlePrice
	}
	return 0
}

func (m *ADKLine) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *ADKLine) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *ADKLine) GetKLineCategory() int32 {
	if m != nil {
		return m.KLineCategory
	}
	return 0
}

func (m *ADKLine) GetAfterHoursNumTrades() int64 {
	if m != nil {
		return m.AfterHoursNumTrades
	}
	return 0
}

func (m *ADKLine) GetAfterHoursTotalVolumeTrade() int64 {
	if m != nil {
		return m.AfterHoursTotalVolumeTrade
	}
	return 0
}

func (m *ADKLine) GetAfterHoursTotalValueTrade() int64 {
	if m != nil {
		return m.AfterHoursTotalValueTrade
	}
	return 0
}

func (m *ADKLine) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *ADKLine) GetPreCloseYield() int64 {
	if m != nil {
		return m.PreCloseYield
	}
	return 0
}

func (m *ADKLine) GetPreWeightedAvgPx() int64 {
	if m != nil {
		return m.PreWeightedAvgPx
	}
	return 0
}

func (m *ADKLine) GetPreWeightedAvgYield() int64 {
	if m != nil {
		return m.PreWeightedAvgYield
	}
	return 0
}

func (m *ADKLine) GetCloseWeightedAvgPx() int64 {
	if m != nil {
		return m.CloseWeightedAvgPx
	}
	return 0
}

func (m *ADKLine) GetCloseWeightedAvgYield() int64 {
	if m != nil {
		return m.CloseWeightedAvgYield
	}
	return 0
}

func (m *ADKLine) GetOpenYield() int64 {
	if m != nil {
		return m.OpenYield
	}
	return 0
}

func (m *ADKLine) GetHighYield() int64 {
	if m != nil {
		return m.HighYield
	}
	return 0
}

func (m *ADKLine) GetLowYield() int64 {
	if m != nil {
		return m.LowYield
	}
	return 0
}

func (m *ADKLine) GetCloseYield() int64 {
	if m != nil {
		return m.CloseYield
	}
	return 0
}

func init() {
	proto.RegisterType((*ADKLine)(nil), "com.htsc.mdc.insight.model.ADKLine")
}

func init() { proto.RegisterFile("ADKLine.proto", fileDescriptor_9d948c1d14207efa) }

var fileDescriptor_9d948c1d14207efa = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x65, 0x7a, 0x9e, 0x1e, 0x99, 0xf4, 0xb0, 0x0d, 0xa5, 0xa4, 0x15, 0xa0, 0x88, 0x0b,
	0xab, 0x02, 0x2e, 0x11, 0x52, 0xda, 0x44, 0x4a, 0x45, 0x4b, 0x4d, 0x12, 0x15, 0x71, 0x69, 0x9c,
	0x25, 0xb1, 0x64, 0x67, 0xa3, 0xf5, 0x86, 0x3a, 0x6f, 0xc3, 0x33, 0xf0, 0x84, 0x68, 0x67, 0xed,
	0xf8, 0x90, 0x90, 0xbb, 0xcc, 0xf7, 0xff, 0x33, 0xf6, 0xfe, 0x19, 0x2f, 0xec, 0x36, 0x9a, 0x5f,
	0xee, 0xfc, 0x11, 0xb7, 0xc7, 0x52, 0x28, 0x81, 0x55, 0x4f, 0x84, 0xf6, 0x50, 0x45, 0x9e, 0x1d,
	0xf6, 0x3d, 0xdb, 0x1f, 0x45, 0xfe, 0x60, 0xa8, 0xec, 0x50, 0xf4, 0x79, 0x50, 0xad, 0xb4, 0xee,
	0x9b, 0x0e, 0x97, 0xbe, 0xe8, 0xf7, 0xa6, 0xe3, 0xa4, 0xa1, 0x5a, 0x69, 0x75, 0xb9, 0x37, 0x91,
	0xbe, 0x9a, 0xe6, 0xe0, 0xc9, 0x0c, 0xde, 0x36, 0xbb, 0x62, 0x22, 0xbd, 0x44, 0xb8, 0xfc, 0x0b,
	0xb0, 0x91, 0x3c, 0x10, 0xdf, 0xc2, 0x5e, 0xbb, 0xd7, 0xbd, 0xc9, 0x9c, 0xcc, 0xaa, 0x59, 0xf5,
	0xad, 0x4e, 0x89, 0xe2, 0x31, 0xac, 0xdf, 0x37, 0x9b, 0xae, 0xe2, 0xec, 0x59, 0xcd, 0xaa, 0xaf,
	0x75, 0x92, 0xca, 0xf0, 0x9e, 0x1f, 0x72, 0xb6, 0x92, 0x72, 0x5d, 0xe1, 0x6b, 0xd8, 0x6d, 0xba,
	0xca, 0xd5, 0xbf, 0x23, 0xe5, 0x86, 0x63, 0xb6, 0x5a, 0xb3, 0xea, 0x2b, 0x9d, 0x22, 0xc4, 0x6f,
	0x70, 0x10, 0x95, 0xde, 0x91, 0xad, 0xd5, 0xac, 0xfa, 0xde, 0xfb, 0x37, 0x76, 0x21, 0x03, 0x3a,
	0xbb, 0x3d, 0x77, 0xa0, 0xce, 0x5c, 0x3b, 0xb6, 0x60, 0x27, 0xca, 0x65, 0xc1, 0xd6, 0x69, 0xdc,
	0xc5, 0xd2, 0x71, 0xda, 0xd8, 0x29, 0xb4, 0x61, 0x03, 0x20, 0x4b, 0x99, 0x6d, 0x2c, 0x19, 0x92,
	0xff, 0x3b, 0x3a, 0xb9, 0x26, 0x1d, 0xcd, 0xc3, 0x98, 0x8f, 0x9c, 0x98, 0x6d, 0xd2, 0xd9, 0x93,
	0x0a, 0x19, 0x6c, 0xdc, 0x04, 0x22, 0xe2, 0x4e, 0xcc, 0xb6, 0x48, 0x48, 0x4b, 0xdd, 0xd1, 0xf6,
	0x07, 0x43, 0x27, 0x66, 0x60, 0x3a, 0x4c, 0x85, 0x87, 0xb0, 0x76, 0x27, 0x9e, 0x9c, 0x98, 0x6d,
	0x13, 0x36, 0x05, 0x9e, 0xc1, 0xd6, 0xd7, 0x49, 0xd8, 0x93, 0x6e, 0x9f, 0x47, 0x6c, 0x87, 0x94,
	0x0c, 0xe0, 0x3b, 0x38, 0xe8, 0x09, 0xe5, 0x06, 0x8f, 0x22, 0x98, 0x84, 0x9c, 0x20, 0xdb, 0x25,
	0xd3, 0x1c, 0xc7, 0x3a, 0xec, 0x1b, 0xe6, 0x06, 0x93, 0xc4, 0xba, 0x47, 0xd6, 0x32, 0x46, 0x84,
	0xd5, 0xdb, 0x07, 0xe7, 0x91, 0xed, 0x93, 0x4c, 0xbf, 0xf1, 0x12, 0x76, 0xf4, 0xc9, 0x6e, 0x47,
	0x8a, 0x4b, 0x1e, 0x29, 0x76, 0x40, 0x5a, 0x81, 0x61, 0x0d, 0xb6, 0xbb, 0x5c, 0xa9, 0x80, 0x3b,
	0xd2, 0xf7, 0x38, 0x7b, 0x4e, 0x96, 0x3c, 0xd2, 0x53, 0x5a, 0xb1, 0x37, 0x74, 0x47, 0x03, 0x4e,
	0x6b, 0x86, 0xb4, 0x4e, 0x05, 0x96, 0xf7, 0xd0, 0xca, 0x55, 0x8a, 0x9e, 0x74, 0xf1, 0x68, 0xb3,
	0x6f, 0x5c, 0xc5, 0x07, 0x42, 0x4e, 0xd9, 0x21, 0x99, 0x8a, 0x10, 0xaf, 0xa0, 0xd2, 0xf8, 0xa5,
	0xb8, 0x6c, 0x8b, 0x89, 0x8c, 0xb2, 0x14, 0x8f, 0xe8, 0xbd, 0x16, 0x49, 0xf8, 0x19, 0xaa, 0x19,
	0x9e, 0x4b, 0xf6, 0x98, 0x1a, 0x97, 0x38, 0xf0, 0x13, 0x9c, 0x96, 0xd5, 0x2c, 0xed, 0x13, 0x6a,
	0xff, 0xbf, 0x01, 0xcf, 0x01, 0x1c, 0xc9, 0xd3, 0xb5, 0x61, 0x64, 0xcf, 0x11, 0x7d, 0xea, 0xb4,
	0xfa, 0xe1, 0xf3, 0xa0, 0xcf, 0x4e, 0xcd, 0xe7, 0x56, 0x80, 0x7a, 0x27, 0x1c, 0xc9, 0xbf, 0x73,
	0x7d, 0x9d, 0xf0, 0x7e, 0xe3, 0xf7, 0xc0, 0x89, 0x59, 0xd5, 0xec, 0x44, 0x99, 0xeb, 0x84, 0x8a,
	0xcc, 0xcc, 0x7d, 0x61, 0x12, 0x5a, 0x20, 0xa1, 0x0d, 0x48, 0xcf, 0x2a, 0xce, 0x3f, 0xa3, 0x86,
	0x05, 0x0a, 0x7e, 0x84, 0xa3, 0x32, 0x35, 0xcf, 0x78, 0x49, 0x2d, 0x8b, 0x45, 0xbd, 0xf5, 0x7a,
	0xb3, 0x8c, 0xf3, 0xdc, 0x6c, 0xfd, 0x0c, 0x68, 0x55, 0x7f, 0x33, 0x46, 0x7d, 0x65, 0xd4, 0x19,
	0xc0, 0x2a, 0x6c, 0xde, 0x89, 0x27, 0x23, 0xd6, 0x48, 0x9c, 0xd5, 0x3a, 0xe1, 0x5c, 0x7c, 0x17,
	0x26, 0xe1, 0x8c, 0x5c, 0x5f, 0xc1, 0x92, 0x5b, 0xf9, 0x3a, 0xbd, 0xc0, 0x1d, 0x7d, 0xc1, 0x46,
	0x6d, 0xeb, 0x8f, 0x65, 0xfd, 0x5c, 0xa7, 0xdb, 0xf6, 0xc3, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x64, 0x77, 0x61, 0x13, 0xdd, 0x05, 0x00, 0x00,
}
