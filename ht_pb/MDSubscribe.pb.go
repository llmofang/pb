// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDSubscribe.proto

/*
Package com_htsc_mdc_insight_model is a generated protocol buffer package.

It is generated from these files:
	MDSubscribe.proto

It has these top-level messages:
	MDSubscribeRequest
	SubscribeAll
	SubscribeByID
	SubscribeByIDDetail
	SubscribeBySourceType
	SubscribeBySourceTypeDetail
	MDSubscribeResponse
*/
package com_htsc_mdc_insight_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 订阅方式
type ESubscribeActionType int32

const (
	ESubscribeActionType_COVERAGE ESubscribeActionType = 0
	ESubscribeActionType_ADD      ESubscribeActionType = 1
	ESubscribeActionType_DECREASE ESubscribeActionType = 2
	ESubscribeActionType_CANCEL   ESubscribeActionType = 3
)

var ESubscribeActionType_name = map[int32]string{
	0: "COVERAGE",
	1: "ADD",
	2: "DECREASE",
	3: "CANCEL",
}
var ESubscribeActionType_value = map[string]int32{
	"COVERAGE": 0,
	"ADD":      1,
	"DECREASE": 2,
	"CANCEL":   3,
}

func (x ESubscribeActionType) String() string {
	return proto.EnumName(ESubscribeActionType_name, int32(x))
}

// 订阅请求
type MDSubscribeRequest struct {
	SubscribeActionType   ESubscribeActionType   `protobuf:"varint,1,opt,name=subscribeActionType,enum=com.htsc.mdc.insight.model.ESubscribeActionType" json:"subscribeActionType,omitempty"`
	SubscribeAll          *SubscribeAll          `protobuf:"bytes,2,opt,name=subscribeAll" json:"subscribeAll,omitempty"`
	SubscribeBySourceType *SubscribeBySourceType `protobuf:"bytes,3,opt,name=subscribeBySourceType" json:"subscribeBySourceType,omitempty"`
	SubscribeByID         *SubscribeByID         `protobuf:"bytes,4,opt,name=subscribeByID" json:"subscribeByID,omitempty"`
}

func (m *MDSubscribeRequest) Reset()         { *m = MDSubscribeRequest{} }
func (m *MDSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*MDSubscribeRequest) ProtoMessage()    {}

func (m *MDSubscribeRequest) GetSubscribeActionType() ESubscribeActionType {
	if m != nil {
		return m.SubscribeActionType
	}
	return ESubscribeActionType_COVERAGE
}

func (m *MDSubscribeRequest) GetSubscribeAll() *SubscribeAll {
	if m != nil {
		return m.SubscribeAll
	}
	return nil
}

func (m *MDSubscribeRequest) GetSubscribeBySourceType() *SubscribeBySourceType {
	if m != nil {
		return m.SubscribeBySourceType
	}
	return nil
}

func (m *MDSubscribeRequest) GetSubscribeByID() *SubscribeByID {
	if m != nil {
		return m.SubscribeByID
	}
	return nil
}

// 订阅所有标的数据
type SubscribeAll struct {
	MarketDataTypes []EMarketDataType `protobuf:"varint,1,rep,packed,name=marketDataTypes,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"marketDataTypes,omitempty"`
}

func (m *SubscribeAll) Reset()         { *m = SubscribeAll{} }
func (m *SubscribeAll) String() string { return proto.CompactTextString(m) }
func (*SubscribeAll) ProtoMessage()    {}

func (m *SubscribeAll) GetMarketDataTypes() []EMarketDataType {
	if m != nil {
		return m.MarketDataTypes
	}
	return nil
}

// 根据证券代码集合来进行订阅
type SubscribeByID struct {
	SubscribeByIDDetails  []*SubscribeByIDDetail `protobuf:"bytes,1,rep,name=subscribeByIDDetails" json:"subscribeByIDDetails,omitempty"`
	GlobalMarketDataTypes []EMarketDataType      `protobuf:"varint,2,rep,packed,name=globalMarketDataTypes,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"globalMarketDataTypes,omitempty"`
}

func (m *SubscribeByID) Reset()         { *m = SubscribeByID{} }
func (m *SubscribeByID) String() string { return proto.CompactTextString(m) }
func (*SubscribeByID) ProtoMessage()    {}

func (m *SubscribeByID) GetSubscribeByIDDetails() []*SubscribeByIDDetail {
	if m != nil {
		return m.SubscribeByIDDetails
	}
	return nil
}

func (m *SubscribeByID) GetGlobalMarketDataTypes() []EMarketDataType {
	if m != nil {
		return m.GlobalMarketDataTypes
	}
	return nil
}

// 根据证券代码来进行订阅的详细信息
type SubscribeByIDDetail struct {
	HtscSecurityID  string            `protobuf:"bytes,1,opt,name=htscSecurityID" json:"htscSecurityID,omitempty"`
	MarketDataTypes []EMarketDataType `protobuf:"varint,2,rep,packed,name=marketDataTypes,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"marketDataTypes,omitempty"`
}

func (m *SubscribeByIDDetail) Reset()         { *m = SubscribeByIDDetail{} }
func (m *SubscribeByIDDetail) String() string { return proto.CompactTextString(m) }
func (*SubscribeByIDDetail) ProtoMessage()    {}

func (m *SubscribeByIDDetail) GetHtscSecurityID() string {
	if m != nil {
		return m.HtscSecurityID
	}
	return ""
}

func (m *SubscribeByIDDetail) GetMarketDataTypes() []EMarketDataType {
	if m != nil {
		return m.MarketDataTypes
	}
	return nil
}

// 根据市场类型及证券类型进行订阅
type SubscribeBySourceType struct {
	SubscribeBySourceTypeDetail []*SubscribeBySourceTypeDetail `protobuf:"bytes,1,rep,name=subscribeBySourceTypeDetail" json:"subscribeBySourceTypeDetail,omitempty"`
}

func (m *SubscribeBySourceType) Reset()         { *m = SubscribeBySourceType{} }
func (m *SubscribeBySourceType) String() string { return proto.CompactTextString(m) }
func (*SubscribeBySourceType) ProtoMessage()    {}

func (m *SubscribeBySourceType) GetSubscribeBySourceTypeDetail() []*SubscribeBySourceTypeDetail {
	if m != nil {
		return m.SubscribeBySourceTypeDetail
	}
	return nil
}

// 根据市场类型及证券类型进行订阅的详细信息
type SubscribeBySourceTypeDetail struct {
	SecuritySourceTypes *SecuritySourceType `protobuf:"bytes,1,opt,name=securitySourceTypes" json:"securitySourceTypes,omitempty"`
	MarketDataTypes     []EMarketDataType   `protobuf:"varint,2,rep,packed,name=marketDataTypes,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"marketDataTypes,omitempty"`
}

func (m *SubscribeBySourceTypeDetail) Reset()         { *m = SubscribeBySourceTypeDetail{} }
func (m *SubscribeBySourceTypeDetail) String() string { return proto.CompactTextString(m) }
func (*SubscribeBySourceTypeDetail) ProtoMessage()    {}

func (m *SubscribeBySourceTypeDetail) GetSecuritySourceTypes() *SecuritySourceType {
	if m != nil {
		return m.SecuritySourceTypes
	}
	return nil
}

func (m *SubscribeBySourceTypeDetail) GetMarketDataTypes() []EMarketDataType {
	if m != nil {
		return m.MarketDataTypes
	}
	return nil
}

// 订阅应答
type MDSubscribeResponse struct {
	IsSuccess    bool                 `protobuf:"varint,1,opt,name=isSuccess" json:"isSuccess,omitempty"`
	ErrorContext *InsightErrorContext `protobuf:"bytes,2,opt,name=errorContext" json:"errorContext,omitempty"`
}

func (m *MDSubscribeResponse) Reset()         { *m = MDSubscribeResponse{} }
func (m *MDSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*MDSubscribeResponse) ProtoMessage()    {}

func (m *MDSubscribeResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *MDSubscribeResponse) GetErrorContext() *InsightErrorContext {
	if m != nil {
		return m.ErrorContext
	}
	return nil
}

func init() {
	proto.RegisterType((*MDSubscribeRequest)(nil), "com.htsc.mdc.insight.model.MDSubscribeRequest")
	proto.RegisterType((*SubscribeAll)(nil), "com.htsc.mdc.insight.model.SubscribeAll")
	proto.RegisterType((*SubscribeByID)(nil), "com.htsc.mdc.insight.model.SubscribeByID")
	proto.RegisterType((*SubscribeByIDDetail)(nil), "com.htsc.mdc.insight.model.SubscribeByIDDetail")
	proto.RegisterType((*SubscribeBySourceType)(nil), "com.htsc.mdc.insight.model.SubscribeBySourceType")
	proto.RegisterType((*SubscribeBySourceTypeDetail)(nil), "com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail")
	proto.RegisterType((*MDSubscribeResponse)(nil), "com.htsc.mdc.insight.model.MDSubscribeResponse")
	proto.RegisterEnum("com.htsc.mdc.insight.model.ESubscribeActionType", ESubscribeActionType_name, ESubscribeActionType_value)
}
