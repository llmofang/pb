// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDSubscribe.proto

package ht_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//订阅方式
type ESubscribeActionType int32

const (
	ESubscribeActionType_COVERAGE ESubscribeActionType = 0
	ESubscribeActionType_ADD      ESubscribeActionType = 1
	ESubscribeActionType_DECREASE ESubscribeActionType = 2
	ESubscribeActionType_CANCEL   ESubscribeActionType = 3
)

var ESubscribeActionType_name = map[int32]string{
	0: "COVERAGE",
	1: "ADD",
	2: "DECREASE",
	3: "CANCEL",
}

var ESubscribeActionType_value = map[string]int32{
	"COVERAGE": 0,
	"ADD":      1,
	"DECREASE": 2,
	"CANCEL":   3,
}

func (x ESubscribeActionType) String() string {
	return proto.EnumName(ESubscribeActionType_name, int32(x))
}

func (ESubscribeActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fb8daaeb55827f9d, []int{0}
}

//订阅请求
type MDSubscribeRequest struct {
	SubscribeActionType   ESubscribeActionType   `protobuf:"varint,1,opt,name=subscribeActionType,proto3,enum=com.htsc.mdc.insight.model.ESubscribeActionType" json:"subscribeActionType,omitempty"`
	SubscribeAll          *SubscribeAll          `protobuf:"bytes,2,opt,name=subscribeAll,proto3" json:"subscribeAll,omitempty"`
	SubscribeBySourceType *SubscribeBySourceType `protobuf:"bytes,3,opt,name=subscribeBySourceType,proto3" json:"subscribeBySourceType,omitempty"`
	SubscribeByID         *SubscribeByID         `protobuf:"bytes,4,opt,name=subscribeByID,proto3" json:"subscribeByID,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *MDSubscribeRequest) Reset()         { *m = MDSubscribeRequest{} }
func (m *MDSubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*MDSubscribeRequest) ProtoMessage()    {}
func (*MDSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb8daaeb55827f9d, []int{0}
}

func (m *MDSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDSubscribeRequest.Unmarshal(m, b)
}
func (m *MDSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDSubscribeRequest.Marshal(b, m, deterministic)
}
func (m *MDSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDSubscribeRequest.Merge(m, src)
}
func (m *MDSubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_MDSubscribeRequest.Size(m)
}
func (m *MDSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MDSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MDSubscribeRequest proto.InternalMessageInfo

func (m *MDSubscribeRequest) GetSubscribeActionType() ESubscribeActionType {
	if m != nil {
		return m.SubscribeActionType
	}
	return ESubscribeActionType_COVERAGE
}

func (m *MDSubscribeRequest) GetSubscribeAll() *SubscribeAll {
	if m != nil {
		return m.SubscribeAll
	}
	return nil
}

func (m *MDSubscribeRequest) GetSubscribeBySourceType() *SubscribeBySourceType {
	if m != nil {
		return m.SubscribeBySourceType
	}
	return nil
}

func (m *MDSubscribeRequest) GetSubscribeByID() *SubscribeByID {
	if m != nil {
		return m.SubscribeByID
	}
	return nil
}

//订阅所有标的数据
type SubscribeAll struct {
	MarketDataTypes      []EMarketDataType `protobuf:"varint,1,rep,packed,name=marketDataTypes,proto3,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"marketDataTypes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubscribeAll) Reset()         { *m = SubscribeAll{} }
func (m *SubscribeAll) String() string { return proto.CompactTextString(m) }
func (*SubscribeAll) ProtoMessage()    {}
func (*SubscribeAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb8daaeb55827f9d, []int{1}
}

func (m *SubscribeAll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeAll.Unmarshal(m, b)
}
func (m *SubscribeAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeAll.Marshal(b, m, deterministic)
}
func (m *SubscribeAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeAll.Merge(m, src)
}
func (m *SubscribeAll) XXX_Size() int {
	return xxx_messageInfo_SubscribeAll.Size(m)
}
func (m *SubscribeAll) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeAll.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeAll proto.InternalMessageInfo

func (m *SubscribeAll) GetMarketDataTypes() []EMarketDataType {
	if m != nil {
		return m.MarketDataTypes
	}
	return nil
}

//根据证券代码集合来进行订阅
type SubscribeByID struct {
	SubscribeByIDDetails  []*SubscribeByIDDetail `protobuf:"bytes,1,rep,name=subscribeByIDDetails,proto3" json:"subscribeByIDDetails,omitempty"`
	GlobalMarketDataTypes []EMarketDataType      `protobuf:"varint,2,rep,packed,name=globalMarketDataTypes,proto3,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"globalMarketDataTypes,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *SubscribeByID) Reset()         { *m = SubscribeByID{} }
func (m *SubscribeByID) String() string { return proto.CompactTextString(m) }
func (*SubscribeByID) ProtoMessage()    {}
func (*SubscribeByID) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb8daaeb55827f9d, []int{2}
}

func (m *SubscribeByID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeByID.Unmarshal(m, b)
}
func (m *SubscribeByID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeByID.Marshal(b, m, deterministic)
}
func (m *SubscribeByID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeByID.Merge(m, src)
}
func (m *SubscribeByID) XXX_Size() int {
	return xxx_messageInfo_SubscribeByID.Size(m)
}
func (m *SubscribeByID) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeByID.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeByID proto.InternalMessageInfo

func (m *SubscribeByID) GetSubscribeByIDDetails() []*SubscribeByIDDetail {
	if m != nil {
		return m.SubscribeByIDDetails
	}
	return nil
}

func (m *SubscribeByID) GetGlobalMarketDataTypes() []EMarketDataType {
	if m != nil {
		return m.GlobalMarketDataTypes
	}
	return nil
}

//根据证券代码来进行订阅的详细信息
type SubscribeByIDDetail struct {
	HtscSecurityID       string            `protobuf:"bytes,1,opt,name=htscSecurityID,proto3" json:"htscSecurityID,omitempty"`
	MarketDataTypes      []EMarketDataType `protobuf:"varint,2,rep,packed,name=marketDataTypes,proto3,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"marketDataTypes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubscribeByIDDetail) Reset()         { *m = SubscribeByIDDetail{} }
func (m *SubscribeByIDDetail) String() string { return proto.CompactTextString(m) }
func (*SubscribeByIDDetail) ProtoMessage()    {}
func (*SubscribeByIDDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb8daaeb55827f9d, []int{3}
}

func (m *SubscribeByIDDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeByIDDetail.Unmarshal(m, b)
}
func (m *SubscribeByIDDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeByIDDetail.Marshal(b, m, deterministic)
}
func (m *SubscribeByIDDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeByIDDetail.Merge(m, src)
}
func (m *SubscribeByIDDetail) XXX_Size() int {
	return xxx_messageInfo_SubscribeByIDDetail.Size(m)
}
func (m *SubscribeByIDDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeByIDDetail.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeByIDDetail proto.InternalMessageInfo

func (m *SubscribeByIDDetail) GetHtscSecurityID() string {
	if m != nil {
		return m.HtscSecurityID
	}
	return ""
}

func (m *SubscribeByIDDetail) GetMarketDataTypes() []EMarketDataType {
	if m != nil {
		return m.MarketDataTypes
	}
	return nil
}

//根据市场类型及证券类型进行订阅
type SubscribeBySourceType struct {
	SubscribeBySourceTypeDetail []*SubscribeBySourceTypeDetail `protobuf:"bytes,1,rep,name=subscribeBySourceTypeDetail,proto3" json:"subscribeBySourceTypeDetail,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}                       `json:"-"`
	XXX_unrecognized            []byte                         `json:"-"`
	XXX_sizecache               int32                          `json:"-"`
}

func (m *SubscribeBySourceType) Reset()         { *m = SubscribeBySourceType{} }
func (m *SubscribeBySourceType) String() string { return proto.CompactTextString(m) }
func (*SubscribeBySourceType) ProtoMessage()    {}
func (*SubscribeBySourceType) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb8daaeb55827f9d, []int{4}
}

func (m *SubscribeBySourceType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeBySourceType.Unmarshal(m, b)
}
func (m *SubscribeBySourceType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeBySourceType.Marshal(b, m, deterministic)
}
func (m *SubscribeBySourceType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeBySourceType.Merge(m, src)
}
func (m *SubscribeBySourceType) XXX_Size() int {
	return xxx_messageInfo_SubscribeBySourceType.Size(m)
}
func (m *SubscribeBySourceType) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeBySourceType.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeBySourceType proto.InternalMessageInfo

func (m *SubscribeBySourceType) GetSubscribeBySourceTypeDetail() []*SubscribeBySourceTypeDetail {
	if m != nil {
		return m.SubscribeBySourceTypeDetail
	}
	return nil
}

//根据市场类型及证券类型进行订阅的详细信息
type SubscribeBySourceTypeDetail struct {
	SecuritySourceTypes  *SecuritySourceType `protobuf:"bytes,1,opt,name=securitySourceTypes,proto3" json:"securitySourceTypes,omitempty"`
	MarketDataTypes      []EMarketDataType   `protobuf:"varint,2,rep,packed,name=marketDataTypes,proto3,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"marketDataTypes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscribeBySourceTypeDetail) Reset()         { *m = SubscribeBySourceTypeDetail{} }
func (m *SubscribeBySourceTypeDetail) String() string { return proto.CompactTextString(m) }
func (*SubscribeBySourceTypeDetail) ProtoMessage()    {}
func (*SubscribeBySourceTypeDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb8daaeb55827f9d, []int{5}
}

func (m *SubscribeBySourceTypeDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeBySourceTypeDetail.Unmarshal(m, b)
}
func (m *SubscribeBySourceTypeDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeBySourceTypeDetail.Marshal(b, m, deterministic)
}
func (m *SubscribeBySourceTypeDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeBySourceTypeDetail.Merge(m, src)
}
func (m *SubscribeBySourceTypeDetail) XXX_Size() int {
	return xxx_messageInfo_SubscribeBySourceTypeDetail.Size(m)
}
func (m *SubscribeBySourceTypeDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeBySourceTypeDetail.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeBySourceTypeDetail proto.InternalMessageInfo

func (m *SubscribeBySourceTypeDetail) GetSecuritySourceTypes() *SecuritySourceType {
	if m != nil {
		return m.SecuritySourceTypes
	}
	return nil
}

func (m *SubscribeBySourceTypeDetail) GetMarketDataTypes() []EMarketDataType {
	if m != nil {
		return m.MarketDataTypes
	}
	return nil
}

//订阅应答
type MDSubscribeResponse struct {
	IsSuccess            bool                 `protobuf:"varint,1,opt,name=isSuccess,proto3" json:"isSuccess,omitempty"`
	ErrorContext         *InsightErrorContext `protobuf:"bytes,2,opt,name=errorContext,proto3" json:"errorContext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MDSubscribeResponse) Reset()         { *m = MDSubscribeResponse{} }
func (m *MDSubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*MDSubscribeResponse) ProtoMessage()    {}
func (*MDSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb8daaeb55827f9d, []int{6}
}

func (m *MDSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDSubscribeResponse.Unmarshal(m, b)
}
func (m *MDSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDSubscribeResponse.Marshal(b, m, deterministic)
}
func (m *MDSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDSubscribeResponse.Merge(m, src)
}
func (m *MDSubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_MDSubscribeResponse.Size(m)
}
func (m *MDSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MDSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MDSubscribeResponse proto.InternalMessageInfo

func (m *MDSubscribeResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *MDSubscribeResponse) GetErrorContext() *InsightErrorContext {
	if m != nil {
		return m.ErrorContext
	}
	return nil
}

func init() {
	proto.RegisterEnum("com.htsc.mdc.insight.model.ESubscribeActionType", ESubscribeActionType_name, ESubscribeActionType_value)
	proto.RegisterType((*MDSubscribeRequest)(nil), "com.htsc.mdc.insight.model.MDSubscribeRequest")
	proto.RegisterType((*SubscribeAll)(nil), "com.htsc.mdc.insight.model.SubscribeAll")
	proto.RegisterType((*SubscribeByID)(nil), "com.htsc.mdc.insight.model.SubscribeByID")
	proto.RegisterType((*SubscribeByIDDetail)(nil), "com.htsc.mdc.insight.model.SubscribeByIDDetail")
	proto.RegisterType((*SubscribeBySourceType)(nil), "com.htsc.mdc.insight.model.SubscribeBySourceType")
	proto.RegisterType((*SubscribeBySourceTypeDetail)(nil), "com.htsc.mdc.insight.model.SubscribeBySourceTypeDetail")
	proto.RegisterType((*MDSubscribeResponse)(nil), "com.htsc.mdc.insight.model.MDSubscribeResponse")
}

func init() { proto.RegisterFile("MDSubscribe.proto", fileDescriptor_fb8daaeb55827f9d) }

var fileDescriptor_fb8daaeb55827f9d = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x71, 0x83, 0xc6, 0xf6, 0xb6, 0x2b, 0xc5, 0x5d, 0xa5, 0xd0, 0x71, 0xa8, 0x72, 0x40,
	0x05, 0xa4, 0x00, 0x01, 0x89, 0x73, 0x9a, 0x44, 0xa3, 0xd2, 0xca, 0x90, 0x03, 0x9c, 0x49, 0x3c,
	0xab, 0x8b, 0x48, 0xeb, 0x12, 0x3b, 0x12, 0xbd, 0x71, 0xe4, 0x8c, 0xf8, 0x00, 0x7c, 0x2a, 0xf8,
	0x3a, 0xa8, 0x49, 0xc7, 0x9c, 0xd6, 0x44, 0x9d, 0xc4, 0x8e, 0x7d, 0xdd, 0xe7, 0xf7, 0xfe, 0xf1,
	0x9b, 0xc7, 0x70, 0x6f, 0xe2, 0x87, 0x79, 0x2c, 0x68, 0x96, 0xc4, 0xcc, 0x5e, 0x64, 0x5c, 0x72,
	0xdc, 0xa7, 0x7c, 0x66, 0x5f, 0x48, 0x41, 0xed, 0xd9, 0x39, 0xb5, 0x93, 0xb9, 0x48, 0xa6, 0x17,
	0xd2, 0x9e, 0xf1, 0x73, 0x96, 0xf6, 0xcd, 0x90, 0xd1, 0x3c, 0x4b, 0xe4, 0x32, 0xe4, 0x79, 0x46,
	0xd9, 0xbb, 0xe5, 0x62, 0xad, 0xea, 0xf7, 0x82, 0x49, 0x94, 0x7d, 0x62, 0xd2, 0x8f, 0x64, 0xa4,
	0x84, 0xef, 0x8f, 0x4b, 0x7d, 0x90, 0x65, 0x3c, 0xf3, 0xf8, 0x5c, 0xb2, 0x2f, 0xb2, 0x3c, 0xb2,
	0xbe, 0x1a, 0x80, 0x95, 0xec, 0x84, 0x7d, 0xce, 0x99, 0x90, 0x38, 0x86, 0xae, 0xb8, 0x8c, 0xb9,
	0x54, 0x26, 0x7c, 0xbe, 0xc2, 0x99, 0x68, 0x80, 0x86, 0x6d, 0xe7, 0x99, 0xfd, 0xef, 0xe2, 0xec,
	0x20, 0xdc, 0xd6, 0x11, 0x1d, 0x0c, 0x9f, 0x42, 0xeb, 0x2a, 0x9c, 0xa6, 0x66, 0x63, 0x80, 0x86,
	0x4d, 0x67, 0x58, 0x07, 0x0f, 0x95, 0xff, 0x93, 0x8a, 0x1a, 0x4f, 0xa1, 0xf7, 0xf7, 0xf7, 0x48,
	0x99, 0x8c, 0x69, 0x14, 0xd8, 0xe7, 0x3b, 0x61, 0x55, 0x21, 0xd1, 0xf3, 0xf0, 0x19, 0x1c, 0x2a,
	0x07, 0x63, 0xdf, 0xbc, 0x5d, 0x24, 0x78, 0xb4, 0x63, 0x82, 0xb1, 0x4f, 0xaa, 0x7a, 0x8b, 0x41,
	0x4b, 0xed, 0x0b, 0xbf, 0x87, 0xbb, 0xb3, 0xca, 0x2d, 0x0a, 0x13, 0x0d, 0x8c, 0x61, 0xdb, 0x79,
	0x52, 0x3b, 0xf7, 0xea, 0xcd, 0x93, 0x4d, 0x86, 0xf5, 0x1b, 0xc1, 0x61, 0xa5, 0x0e, 0x4c, 0xe1,
	0xa8, 0x52, 0x89, 0xcf, 0x64, 0x94, 0xa4, 0x65, 0xb6, 0xa6, 0xf3, 0x74, 0xe7, 0x86, 0x4a, 0x1d,
	0xd1, 0xc2, 0x70, 0x04, 0xbd, 0x69, 0xca, 0xe3, 0x28, 0x9d, 0x6c, 0xf4, 0xd4, 0xb8, 0x7e, 0x4f,
	0x7a, 0x92, 0xf5, 0x03, 0x41, 0x57, 0x53, 0x10, 0x7e, 0x08, 0xed, 0x15, 0xf8, 0xf2, 0x6b, 0x19,
	0xfb, 0xc5, 0xfe, 0x1e, 0x90, 0x8d, 0xa8, 0x6e, 0xe0, 0x8d, 0xff, 0x30, 0xf0, 0xef, 0x08, 0x7a,
	0xda, 0xcd, 0xc2, 0x4b, 0x38, 0xd6, 0xee, 0x56, 0x59, 0xf7, 0x7a, 0xfe, 0xaf, 0xae, 0xbd, 0xb1,
	0xeb, 0x7b, 0xa8, 0x63, 0x5b, 0xbf, 0x10, 0x1c, 0xd7, 0x88, 0xf1, 0x47, 0xe8, 0x8a, 0x2d, 0x77,
	0x11, 0xc5, 0xe0, 0x9a, 0x8e, 0x5d, 0x5b, 0xd2, 0x96, 0x8c, 0xe8, 0x50, 0x37, 0x35, 0xed, 0x6f,
	0x08, 0xba, 0x15, 0x23, 0x13, 0x0b, 0x3e, 0x17, 0x0c, 0x3f, 0x80, 0x83, 0x44, 0x84, 0x39, 0xa5,
	0x4c, 0x94, 0x6d, 0xec, 0x93, 0xab, 0x00, 0x0e, 0xa1, 0xc5, 0x14, 0x53, 0x5c, 0x7b, 0x50, 0xed,
	0xea, 0x6b, 0xbc, 0x94, 0x54, 0x20, 0x8f, 0x4f, 0xe0, 0x48, 0xe7, 0x82, 0xb8, 0x05, 0xfb, 0xde,
	0xd9, 0x87, 0x80, 0xb8, 0x27, 0x41, 0xe7, 0x16, 0xbe, 0x03, 0x86, 0xeb, 0xfb, 0x1d, 0xb4, 0x0a,
	0xfb, 0x81, 0x47, 0x02, 0x37, 0x0c, 0x3a, 0x0d, 0x0c, 0xb0, 0xe7, 0xb9, 0x6f, 0xbc, 0xe0, 0xb4,
	0x63, 0x8c, 0x5e, 0x42, 0xcd, 0x33, 0x30, 0x52, 0x5f, 0x8d, 0xb7, 0x2b, 0x33, 0x17, 0xaf, 0xd1,
	0x4f, 0x84, 0xe2, 0xbd, 0xc2, 0xd9, 0x5f, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x78, 0xd9,
	0x81, 0x56, 0x06, 0x00, 0x00,
}
