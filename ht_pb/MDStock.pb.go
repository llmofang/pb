// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDStock.proto

package com_htsc_mdc_insight_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//股票信息
type MDStock struct {
	HTSCSecurityID             string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate                     int32             `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime                     int32             `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp              int64             `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	TradingPhaseCode           string            `protobuf:"bytes,5,opt,name=TradingPhaseCode,proto3" json:"TradingPhaseCode,omitempty"`
	SecurityIDSource           ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType               ESecurityType     `protobuf:"varint,7,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	MaxPx                      int64             `protobuf:"varint,8,opt,name=MaxPx,proto3" json:"MaxPx,omitempty"`
	MinPx                      int64             `protobuf:"varint,9,opt,name=MinPx,proto3" json:"MinPx,omitempty"`
	PreClosePx                 int64             `protobuf:"varint,10,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	NumTrades                  int64             `protobuf:"varint,11,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	TotalVolumeTrade           int64             `protobuf:"varint,12,opt,name=TotalVolumeTrade,proto3" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade            int64             `protobuf:"varint,13,opt,name=TotalValueTrade,proto3" json:"TotalValueTrade,omitempty"`
	LastPx                     int64             `protobuf:"varint,14,opt,name=LastPx,proto3" json:"LastPx,omitempty"`
	OpenPx                     int64             `protobuf:"varint,15,opt,name=OpenPx,proto3" json:"OpenPx,omitempty"`
	ClosePx                    int64             `protobuf:"varint,16,opt,name=ClosePx,proto3" json:"ClosePx,omitempty"`
	HighPx                     int64             `protobuf:"varint,17,opt,name=HighPx,proto3" json:"HighPx,omitempty"`
	LowPx                      int64             `protobuf:"varint,18,opt,name=LowPx,proto3" json:"LowPx,omitempty"`
	DiffPx1                    int64             `protobuf:"varint,19,opt,name=DiffPx1,proto3" json:"DiffPx1,omitempty"`
	DiffPx2                    int64             `protobuf:"varint,20,opt,name=DiffPx2,proto3" json:"DiffPx2,omitempty"`
	TotalBuyQty                int64             `protobuf:"varint,21,opt,name=TotalBuyQty,proto3" json:"TotalBuyQty,omitempty"`
	TotalSellQty               int64             `protobuf:"varint,22,opt,name=TotalSellQty,proto3" json:"TotalSellQty,omitempty"`
	WeightedAvgBuyPx           int64             `protobuf:"varint,23,opt,name=WeightedAvgBuyPx,proto3" json:"WeightedAvgBuyPx,omitempty"`
	WeightedAvgSellPx          int64             `protobuf:"varint,24,opt,name=WeightedAvgSellPx,proto3" json:"WeightedAvgSellPx,omitempty"`
	WithdrawBuyNumber          int64             `protobuf:"varint,25,opt,name=WithdrawBuyNumber,proto3" json:"WithdrawBuyNumber,omitempty"`
	WithdrawBuyAmount          int64             `protobuf:"varint,26,opt,name=WithdrawBuyAmount,proto3" json:"WithdrawBuyAmount,omitempty"`
	WithdrawBuyMoney           int64             `protobuf:"varint,27,opt,name=WithdrawBuyMoney,proto3" json:"WithdrawBuyMoney,omitempty"`
	WithdrawSellNumber         int64             `protobuf:"varint,28,opt,name=WithdrawSellNumber,proto3" json:"WithdrawSellNumber,omitempty"`
	WithdrawSellAmount         int64             `protobuf:"varint,29,opt,name=WithdrawSellAmount,proto3" json:"WithdrawSellAmount,omitempty"`
	WithdrawSellMoney          int64             `protobuf:"varint,30,opt,name=WithdrawSellMoney,proto3" json:"WithdrawSellMoney,omitempty"`
	TotalBuyNumber             int64             `protobuf:"varint,31,opt,name=TotalBuyNumber,proto3" json:"TotalBuyNumber,omitempty"`
	TotalSellNumber            int64             `protobuf:"varint,32,opt,name=TotalSellNumber,proto3" json:"TotalSellNumber,omitempty"`
	BuyTradeMaxDuration        int64             `protobuf:"varint,33,opt,name=BuyTradeMaxDuration,proto3" json:"BuyTradeMaxDuration,omitempty"`
	SellTradeMaxDuration       int64             `protobuf:"varint,34,opt,name=SellTradeMaxDuration,proto3" json:"SellTradeMaxDuration,omitempty"`
	NumBuyOrders               int32             `protobuf:"varint,35,opt,name=NumBuyOrders,proto3" json:"NumBuyOrders,omitempty"`
	NumSellOrders              int32             `protobuf:"varint,36,opt,name=NumSellOrders,proto3" json:"NumSellOrders,omitempty"`
	NorminalPx                 int64             `protobuf:"varint,37,opt,name=NorminalPx,proto3" json:"NorminalPx,omitempty"`
	ShortSellSharesTraded      int64             `protobuf:"varint,38,opt,name=ShortSellSharesTraded,proto3" json:"ShortSellSharesTraded,omitempty"`
	ShortSellTurnover          int64             `protobuf:"varint,39,opt,name=ShortSellTurnover,proto3" json:"ShortSellTurnover,omitempty"`
	ReferencePx                int64             `protobuf:"varint,40,opt,name=ReferencePx,proto3" json:"ReferencePx,omitempty"`
	ComplexEventStartTime      int64             `protobuf:"varint,41,opt,name=ComplexEventStartTime,proto3" json:"ComplexEventStartTime,omitempty"`
	ComplexEventEndTime        int64             `protobuf:"varint,42,opt,name=ComplexEventEndTime,proto3" json:"ComplexEventEndTime,omitempty"`
	ExchangeDate               int32             `protobuf:"varint,43,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime               int32             `protobuf:"varint,44,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	AfterHoursNumTrades        int64             `protobuf:"varint,45,opt,name=AfterHoursNumTrades,proto3" json:"AfterHoursNumTrades,omitempty"`
	AfterHoursTotalVolumeTrade int64             `protobuf:"varint,46,opt,name=AfterHoursTotalVolumeTrade,proto3" json:"AfterHoursTotalVolumeTrade,omitempty"`
	AfterHoursTotalValueTrade  int64             `protobuf:"varint,47,opt,name=AfterHoursTotalValueTrade,proto3" json:"AfterHoursTotalValueTrade,omitempty"`
	ChannelNo                  int32             `protobuf:"varint,50,opt,name=ChannelNo,proto3" json:"ChannelNo,omitempty"`
	BuyPriceQueue              []int64           `protobuf:"varint,51,rep,packed,name=BuyPriceQueue,proto3" json:"BuyPriceQueue,omitempty"`
	BuyOrderQtyQueue           []int64           `protobuf:"varint,52,rep,packed,name=BuyOrderQtyQueue,proto3" json:"BuyOrderQtyQueue,omitempty"`
	SellPriceQueue             []int64           `protobuf:"varint,53,rep,packed,name=SellPriceQueue,proto3" json:"SellPriceQueue,omitempty"`
	SellOrderQtyQueue          []int64           `protobuf:"varint,54,rep,packed,name=SellOrderQtyQueue,proto3" json:"SellOrderQtyQueue,omitempty"`
	BuyOrderQueue              []int64           `protobuf:"varint,55,rep,packed,name=BuyOrderQueue,proto3" json:"BuyOrderQueue,omitempty"`
	SellOrderQueue             []int64           `protobuf:"varint,56,rep,packed,name=SellOrderQueue,proto3" json:"SellOrderQueue,omitempty"`
	BuyNumOrdersQueue          []int64           `protobuf:"varint,57,rep,packed,name=BuyNumOrdersQueue,proto3" json:"BuyNumOrdersQueue,omitempty"`
	SellNumOrdersQueue         []int64           `protobuf:"varint,58,rep,packed,name=SellNumOrdersQueue,proto3" json:"SellNumOrdersQueue,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}          `json:"-"`
	XXX_unrecognized           []byte            `json:"-"`
	XXX_sizecache              int32             `json:"-"`
}

func (m *MDStock) Reset()         { *m = MDStock{} }
func (m *MDStock) String() string { return proto.CompactTextString(m) }
func (*MDStock) ProtoMessage()    {}
func (*MDStock) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b40ce079666881b, []int{0}
}

func (m *MDStock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDStock.Unmarshal(m, b)
}
func (m *MDStock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDStock.Marshal(b, m, deterministic)
}
func (m *MDStock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDStock.Merge(m, src)
}
func (m *MDStock) XXX_Size() int {
	return xxx_messageInfo_MDStock.Size(m)
}
func (m *MDStock) XXX_DiscardUnknown() {
	xxx_messageInfo_MDStock.DiscardUnknown(m)
}

var xxx_messageInfo_MDStock proto.InternalMessageInfo

func (m *MDStock) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDStock) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDStock) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *MDStock) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *MDStock) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDStock) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDStock) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *MDStock) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDStock) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func (m *MDStock) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDStock) GetNumTrades() int64 {
	if m != nil {
		return m.NumTrades
	}
	return 0
}

func (m *MDStock) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *MDStock) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *MDStock) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *MDStock) GetOpenPx() int64 {
	if m != nil {
		return m.OpenPx
	}
	return 0
}

func (m *MDStock) GetClosePx() int64 {
	if m != nil {
		return m.ClosePx
	}
	return 0
}

func (m *MDStock) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *MDStock) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *MDStock) GetDiffPx1() int64 {
	if m != nil {
		return m.DiffPx1
	}
	return 0
}

func (m *MDStock) GetDiffPx2() int64 {
	if m != nil {
		return m.DiffPx2
	}
	return 0
}

func (m *MDStock) GetTotalBuyQty() int64 {
	if m != nil {
		return m.TotalBuyQty
	}
	return 0
}

func (m *MDStock) GetTotalSellQty() int64 {
	if m != nil {
		return m.TotalSellQty
	}
	return 0
}

func (m *MDStock) GetWeightedAvgBuyPx() int64 {
	if m != nil {
		return m.WeightedAvgBuyPx
	}
	return 0
}

func (m *MDStock) GetWeightedAvgSellPx() int64 {
	if m != nil {
		return m.WeightedAvgSellPx
	}
	return 0
}

func (m *MDStock) GetWithdrawBuyNumber() int64 {
	if m != nil {
		return m.WithdrawBuyNumber
	}
	return 0
}

func (m *MDStock) GetWithdrawBuyAmount() int64 {
	if m != nil {
		return m.WithdrawBuyAmount
	}
	return 0
}

func (m *MDStock) GetWithdrawBuyMoney() int64 {
	if m != nil {
		return m.WithdrawBuyMoney
	}
	return 0
}

func (m *MDStock) GetWithdrawSellNumber() int64 {
	if m != nil {
		return m.WithdrawSellNumber
	}
	return 0
}

func (m *MDStock) GetWithdrawSellAmount() int64 {
	if m != nil {
		return m.WithdrawSellAmount
	}
	return 0
}

func (m *MDStock) GetWithdrawSellMoney() int64 {
	if m != nil {
		return m.WithdrawSellMoney
	}
	return 0
}

func (m *MDStock) GetTotalBuyNumber() int64 {
	if m != nil {
		return m.TotalBuyNumber
	}
	return 0
}

func (m *MDStock) GetTotalSellNumber() int64 {
	if m != nil {
		return m.TotalSellNumber
	}
	return 0
}

func (m *MDStock) GetBuyTradeMaxDuration() int64 {
	if m != nil {
		return m.BuyTradeMaxDuration
	}
	return 0
}

func (m *MDStock) GetSellTradeMaxDuration() int64 {
	if m != nil {
		return m.SellTradeMaxDuration
	}
	return 0
}

func (m *MDStock) GetNumBuyOrders() int32 {
	if m != nil {
		return m.NumBuyOrders
	}
	return 0
}

func (m *MDStock) GetNumSellOrders() int32 {
	if m != nil {
		return m.NumSellOrders
	}
	return 0
}

func (m *MDStock) GetNorminalPx() int64 {
	if m != nil {
		return m.NorminalPx
	}
	return 0
}

func (m *MDStock) GetShortSellSharesTraded() int64 {
	if m != nil {
		return m.ShortSellSharesTraded
	}
	return 0
}

func (m *MDStock) GetShortSellTurnover() int64 {
	if m != nil {
		return m.ShortSellTurnover
	}
	return 0
}

func (m *MDStock) GetReferencePx() int64 {
	if m != nil {
		return m.ReferencePx
	}
	return 0
}

func (m *MDStock) GetComplexEventStartTime() int64 {
	if m != nil {
		return m.ComplexEventStartTime
	}
	return 0
}

func (m *MDStock) GetComplexEventEndTime() int64 {
	if m != nil {
		return m.ComplexEventEndTime
	}
	return 0
}

func (m *MDStock) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *MDStock) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *MDStock) GetAfterHoursNumTrades() int64 {
	if m != nil {
		return m.AfterHoursNumTrades
	}
	return 0
}

func (m *MDStock) GetAfterHoursTotalVolumeTrade() int64 {
	if m != nil {
		return m.AfterHoursTotalVolumeTrade
	}
	return 0
}

func (m *MDStock) GetAfterHoursTotalValueTrade() int64 {
	if m != nil {
		return m.AfterHoursTotalValueTrade
	}
	return 0
}

func (m *MDStock) GetChannelNo() int32 {
	if m != nil {
		return m.ChannelNo
	}
	return 0
}

func (m *MDStock) GetBuyPriceQueue() []int64 {
	if m != nil {
		return m.BuyPriceQueue
	}
	return nil
}

func (m *MDStock) GetBuyOrderQtyQueue() []int64 {
	if m != nil {
		return m.BuyOrderQtyQueue
	}
	return nil
}

func (m *MDStock) GetSellPriceQueue() []int64 {
	if m != nil {
		return m.SellPriceQueue
	}
	return nil
}

func (m *MDStock) GetSellOrderQtyQueue() []int64 {
	if m != nil {
		return m.SellOrderQtyQueue
	}
	return nil
}

func (m *MDStock) GetBuyOrderQueue() []int64 {
	if m != nil {
		return m.BuyOrderQueue
	}
	return nil
}

func (m *MDStock) GetSellOrderQueue() []int64 {
	if m != nil {
		return m.SellOrderQueue
	}
	return nil
}

func (m *MDStock) GetBuyNumOrdersQueue() []int64 {
	if m != nil {
		return m.BuyNumOrdersQueue
	}
	return nil
}

func (m *MDStock) GetSellNumOrdersQueue() []int64 {
	if m != nil {
		return m.SellNumOrdersQueue
	}
	return nil
}

func init() {
	proto.RegisterType((*MDStock)(nil), "com.htsc.mdc.insight.model.MDStock")
}

func init() { proto.RegisterFile("MDStock.proto", fileDescriptor_2b40ce079666881b) }

var fileDescriptor_2b40ce079666881b = []byte{
	// 939 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xed, 0x6e, 0xdb, 0x36,
	0x14, 0x85, 0x9b, 0x25, 0x59, 0xd8, 0x24, 0x4d, 0x98, 0xb4, 0x65, 0xbd, 0xae, 0x73, 0xb3, 0xb6,
	0xf3, 0xb2, 0x4e, 0xcb, 0xdc, 0xee, 0x13, 0xc3, 0x80, 0xf8, 0x03, 0xc8, 0x80, 0xda, 0x55, 0x6c,
	0x63, 0xfb, 0xcd, 0x4a, 0x8c, 0x25, 0x4c, 0x12, 0x0d, 0x8a, 0x4c, 0xa5, 0x47, 0xd8, 0x5b, 0xec,
	0x51, 0x07, 0x5e, 0xea, 0x5b, 0x5e, 0xfe, 0xf9, 0x9e, 0x73, 0xee, 0xd5, 0xe1, 0x25, 0x79, 0x4d,
	0x74, 0x30, 0x1d, 0x2f, 0x24, 0x77, 0xfe, 0xb6, 0xd6, 0x82, 0x4b, 0x8e, 0xbb, 0x0e, 0x0f, 0x2d,
	0x4f, 0xc6, 0x8e, 0x15, 0xba, 0x8e, 0xe5, 0x47, 0xb1, 0xbf, 0xf2, 0xa4, 0x15, 0x72, 0x97, 0x05,
	0xdd, 0xc7, 0x93, 0x05, 0x73, 0x94, 0xf0, 0x65, 0xfa, 0xc7, 0x78, 0xc1, 0x95, 0x70, 0x98, 0x49,
	0xea, 0x9e, 0x14, 0xc4, 0x32, 0x5d, 0x67, 0xe0, 0xd9, 0x3f, 0x18, 0xed, 0x66, 0xb5, 0xf1, 0x2b,
	0x74, 0x78, 0xb5, 0x5c, 0x8c, 0xca, 0x74, 0xd2, 0xe9, 0x75, 0xfa, 0x7b, 0xf3, 0x06, 0x8a, 0x1f,
	0xa1, 0x9d, 0xe9, 0x78, 0x4c, 0x25, 0x23, 0xf7, 0x7a, 0x9d, 0xfe, 0xf6, 0x3c, 0x8b, 0x0c, 0xbe,
	0xf4, 0x43, 0x46, 0xb6, 0x72, 0x5c, 0x47, 0xf8, 0x05, 0x3a, 0x18, 0x53, 0x49, 0xf5, 0xef, 0x58,
	0xd2, 0x70, 0x4d, 0x3e, 0xe9, 0x75, 0xfa, 0x5b, 0xf3, 0x3a, 0x88, 0xcf, 0xd1, 0xd1, 0x52, 0x50,
	0xd7, 0x8f, 0x56, 0xb6, 0x47, 0x63, 0x36, 0xe2, 0x2e, 0x23, 0xdb, 0xf0, 0xfd, 0x16, 0x8e, 0xaf,
	0xd1, 0x51, 0xdc, 0x58, 0x24, 0xd9, 0xe9, 0x75, 0xfa, 0x87, 0x83, 0x97, 0x56, 0xad, 0x35, 0xd0,
	0x12, 0xab, 0xd5, 0x91, 0x79, 0x2b, 0x1d, 0x4f, 0xd0, 0x7e, 0x5c, 0x69, 0x0f, 0xd9, 0x85, 0x72,
	0xcf, 0xef, 0x2c, 0xa7, 0x85, 0xf3, 0x5a, 0x1a, 0x3e, 0x45, 0xdb, 0x53, 0x9a, 0xd8, 0x09, 0xf9,
	0x14, 0xd6, 0x68, 0x02, 0x40, 0xfd, 0xc8, 0x4e, 0xc8, 0x5e, 0x86, 0xea, 0x00, 0x3f, 0x43, 0xc8,
	0x16, 0x6c, 0x14, 0xf0, 0x98, 0xd9, 0x09, 0x41, 0x40, 0x55, 0x10, 0xfc, 0x14, 0xed, 0xcd, 0x54,
	0xa8, 0x17, 0xcf, 0x62, 0x72, 0x1f, 0xe8, 0x12, 0x80, 0x7e, 0x71, 0x49, 0x83, 0x3f, 0x79, 0xa0,
	0x42, 0x06, 0x20, 0xd9, 0x07, 0x51, 0x0b, 0xc7, 0x7d, 0xf4, 0xc0, 0x60, 0x34, 0x50, 0x99, 0xf4,
	0x00, 0xa4, 0x4d, 0x58, 0xef, 0xe1, 0x3b, 0x1a, 0x4b, 0x3b, 0x21, 0x87, 0x20, 0xc8, 0x22, 0x8d,
	0xbf, 0x5f, 0x33, 0xbd, 0x84, 0x07, 0x06, 0x37, 0x11, 0x26, 0x68, 0x37, 0x5f, 0xc0, 0x11, 0x10,
	0x79, 0xa8, 0x33, 0xae, 0xfc, 0x95, 0x67, 0x27, 0xe4, 0xd8, 0x64, 0x98, 0x48, 0xf7, 0xe2, 0x1d,
	0xff, 0x68, 0x27, 0x04, 0x9b, 0x5e, 0x40, 0xa0, 0xeb, 0x8c, 0xfd, 0x9b, 0x1b, 0x3b, 0xf9, 0x9e,
	0x9c, 0x98, 0x3a, 0x59, 0x58, 0x32, 0x03, 0x72, 0x5a, 0x65, 0x06, 0xb8, 0x87, 0xee, 0x83, 0xfd,
	0xa1, 0x4a, 0xaf, 0x65, 0x4a, 0x1e, 0x02, 0x5b, 0x85, 0xf0, 0x19, 0xda, 0x87, 0x70, 0xc1, 0x82,
	0x40, 0x4b, 0x1e, 0x81, 0xa4, 0x86, 0xe9, 0x3e, 0xfe, 0xc5, 0xf4, 0xfd, 0x61, 0xee, 0xe5, 0xed,
	0x6a, 0xa8, 0x52, 0x3b, 0x21, 0x8f, 0x4d, 0x1f, 0x9b, 0x38, 0x7e, 0x8d, 0x8e, 0x2b, 0x98, 0xae,
	0x60, 0x27, 0x84, 0x80, 0xb8, 0x4d, 0x80, 0xda, 0x97, 0x9e, 0x2b, 0xe8, 0xc7, 0xa1, 0x4a, 0x67,
	0x2a, 0xfc, 0xc0, 0x04, 0x79, 0x92, 0xa9, 0x9b, 0x44, 0x43, 0x7d, 0x19, 0x72, 0x15, 0x49, 0xd2,
	0x6d, 0xa9, 0x0d, 0x01, 0xae, 0x4b, 0x70, 0xca, 0x23, 0x96, 0x92, 0xcf, 0x32, 0xd7, 0x0d, 0x1c,
	0x5b, 0x08, 0xe7, 0x98, 0x76, 0x96, 0x19, 0x79, 0x0a, 0xea, 0x0d, 0x4c, 0x53, 0x9f, 0x59, 0xf9,
	0xbc, 0xad, 0xcf, 0xbc, 0x54, 0x9c, 0x6b, 0xd4, 0x98, 0x79, 0x56, 0x77, 0x5e, 0x10, 0x7a, 0xca,
	0xe4, 0x5b, 0x94, 0x39, 0xf9, 0x02, 0xa4, 0x0d, 0xb4, 0x38, 0xb3, 0x15, 0xcb, 0xbd, 0xca, 0x99,
	0xad, 0xf8, 0xbd, 0x40, 0x27, 0x43, 0x95, 0xc2, 0xf9, 0x9d, 0xd2, 0x64, 0xac, 0x04, 0x95, 0x3e,
	0x8f, 0xc8, 0x73, 0x50, 0x6f, 0xa2, 0xf0, 0x00, 0x9d, 0xea, 0xfc, 0x56, 0xca, 0x19, 0xa4, 0x6c,
	0xe4, 0xf4, 0x59, 0x9a, 0xa9, 0x70, 0xa8, 0xd2, 0xf7, 0xc2, 0x65, 0x22, 0x26, 0x5f, 0xc2, 0x8c,
	0xab, 0x61, 0x7a, 0xd2, 0xcd, 0x54, 0xa8, 0xd3, 0x33, 0xd1, 0x0b, 0x10, 0xd5, 0x41, 0x7d, 0xef,
	0x67, 0x5c, 0x84, 0x7e, 0x44, 0xf5, 0xf1, 0x79, 0x69, 0xee, 0x7d, 0x89, 0xe0, 0xb7, 0xe8, 0xe1,
	0xc2, 0xe3, 0x42, 0xea, 0x94, 0x85, 0x47, 0x05, 0x8b, 0xc1, 0x8c, 0x4b, 0x5e, 0x81, 0x74, 0x33,
	0xa9, 0x77, 0xa1, 0x20, 0x96, 0x4a, 0x44, 0xfc, 0x96, 0x09, 0xf2, 0x95, 0xd9, 0x85, 0x16, 0xa1,
	0xef, 0xce, 0x9c, 0xdd, 0x30, 0xc1, 0x22, 0x47, 0xdf, 0xdd, 0xbe, 0xb9, 0x3b, 0x15, 0x48, 0xbb,
	0x18, 0xf1, 0x70, 0x1d, 0xb0, 0x64, 0x72, 0xcb, 0x22, 0xb9, 0x90, 0x54, 0x48, 0x18, 0xee, 0x5f,
	0x1b, 0x17, 0x1b, 0x49, 0xbd, 0x17, 0x55, 0x62, 0x12, 0xb9, 0x90, 0x73, 0x6e, 0xf6, 0x62, 0x03,
	0xa5, 0xfb, 0x3a, 0x49, 0x1c, 0x8f, 0x46, 0x2b, 0x06, 0xff, 0x29, 0xdf, 0x98, 0xbe, 0x56, 0xb1,
	0xaa, 0x06, 0xca, 0xbd, 0xae, 0x6b, 0xf2, 0x2f, 0x5f, 0xde, 0x48, 0x26, 0xae, 0xb8, 0x12, 0x71,
	0x39, 0x37, 0xbf, 0x35, 0x5f, 0xde, 0x40, 0xe1, 0xdf, 0x51, 0xb7, 0x84, 0x5b, 0xb3, 0xd4, 0x82,
	0xc4, 0x3b, 0x14, 0xf8, 0x37, 0xf4, 0xa4, 0xc9, 0x96, 0xf3, 0xf5, 0x3b, 0x48, 0xff, 0x7f, 0x81,
	0x9e, 0xee, 0x23, 0x8f, 0x46, 0x11, 0x0b, 0x66, 0x9c, 0x0c, 0x60, 0x41, 0x25, 0x80, 0xfb, 0xe8,
	0x40, 0x8f, 0x1c, 0xe1, 0x3b, 0xec, 0x5a, 0x31, 0xc5, 0xc8, 0x9b, 0xde, 0x56, 0x7f, 0x6b, 0x78,
	0xef, 0xa8, 0x33, 0xaf, 0x13, 0xd8, 0x42, 0x47, 0xf9, 0x01, 0xbc, 0x96, 0xa9, 0x11, 0xbf, 0x2d,
	0xc4, 0x2d, 0x0e, 0x9f, 0xa3, 0x43, 0x98, 0x4f, 0x65, 0xe9, 0x1f, 0x0a, 0x75, 0x83, 0xc1, 0x17,
	0xe8, 0xb8, 0x38, 0xb7, 0x45, 0xf1, 0x1f, 0x0b, 0x79, 0x9b, 0xcc, 0x7c, 0x1b, 0x0c, 0xd4, 0x3f,
	0xd5, 0x7c, 0x97, 0x44, 0xee, 0xa3, 0x22, 0xfd, 0xb9, 0xee, 0xa3, 0xa2, 0xbd, 0x40, 0xc7, 0x66,
	0x30, 0x98, 0x1b, 0x64, 0xe4, 0xbf, 0x94, 0x3e, 0x5a, 0x24, 0x1e, 0x20, 0x9c, 0x4d, 0x88, 0x6a,
	0xca, 0xaf, 0x45, 0xca, 0x06, 0x76, 0x78, 0x81, 0xee, 0x78, 0x57, 0x0d, 0xf3, 0x27, 0x98, 0xad,
	0xdf, 0x4d, 0xf1, 0x55, 0xe7, 0xdf, 0x4e, 0xe7, 0xc3, 0x0e, 0x3c, 0xa2, 0xde, 0xfc, 0x17, 0x00,
	0x00, 0xff, 0xff, 0x61, 0xb4, 0xfb, 0x5c, 0x9f, 0x09, 0x00, 0x00,
}
