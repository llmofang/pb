// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MarketData.proto

/*
Package com_htsc_mdc_insight_model is a generated protocol buffer package.

It is generated from these files:
	MarketData.proto

It has these top-level messages:
	MarketData
	MarketDataStream
*/
package com_htsc_mdc_insight_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import com_htsc_mdc_insight_model1 "."
import com_htsc_mdc_model "."
import com_htsc_mdc_model1 "."
import com_htsc_mdc_insight_model2 "."
import com_htsc_mdc_insight_model3 "."
import com_htsc_mdc_insight_model4 "."
import com_htsc_mdc_insight_model5 "."
import com_htsc_mdc_insight_model6 "."
import com_htsc_mdc_insight_model7 "."
import com_htsc_mdc_insight_model8 "."
import com_htsc_mdc_insight_model9 "."
import com_htsc_mdc_insight_model10 "."
import com_htsc_mdc_insight_model11 "."
import com_htsc_mdc_insight_model12 "."
import com_htsc_mdc_insight_model13 "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 行情数据
type MarketData struct {
	MarketDataType   com_htsc_mdc_insight_model1.EMarketDataType `protobuf:"varint,1,opt,name=marketDataType,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"marketDataType,omitempty"`
	HtscSecurityID   string                                      `protobuf:"bytes,2,opt,name=htscSecurityID" json:"htscSecurityID,omitempty"`
	SecurityIDSource com_htsc_mdc_model.ESecurityIDSource        `protobuf:"varint,3,opt,name=securityIDSource,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType     com_htsc_mdc_model1.ESecurityType           `protobuf:"varint,4,opt,name=securityType,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	MdStock          *com_htsc_mdc_insight_model2.MDStock        `protobuf:"bytes,10,opt,name=mdStock" json:"mdStock,omitempty"`
	MdIndex          *com_htsc_mdc_insight_model6.MDIndex        `protobuf:"bytes,11,opt,name=mdIndex" json:"mdIndex,omitempty"`
	MdBond           *com_htsc_mdc_insight_model3.MDBond         `protobuf:"bytes,12,opt,name=mdBond" json:"mdBond,omitempty"`
	MdFund           *com_htsc_mdc_insight_model4.MDFund         `protobuf:"bytes,13,opt,name=mdFund" json:"mdFund,omitempty"`
	MdOption         *com_htsc_mdc_insight_model5.MDOption       `protobuf:"bytes,14,opt,name=mdOption" json:"mdOption,omitempty"`
	MdFuture         *com_htsc_mdc_insight_model7.MDFuture       `protobuf:"bytes,15,opt,name=mdFuture" json:"mdFuture,omitempty"`
	MdTransaction    *com_htsc_mdc_insight_model8.MDTransaction  `protobuf:"bytes,16,opt,name=mdTransaction" json:"mdTransaction,omitempty"`
	MdOrder          *com_htsc_mdc_insight_model9.MDOrder        `protobuf:"bytes,17,opt,name=mdOrder" json:"mdOrder,omitempty"`
	MdKLine          *com_htsc_mdc_insight_model10.ADKLine       `protobuf:"bytes,18,opt,name=mdKLine" json:"mdKLine,omitempty"`
	MdTwap           *com_htsc_mdc_insight_model11.ADTwap        `protobuf:"bytes,19,opt,name=mdTwap" json:"mdTwap,omitempty"`
	MdVwap           *com_htsc_mdc_insight_model12.ADVwap        `protobuf:"bytes,20,opt,name=mdVwap" json:"mdVwap,omitempty"`
	MdConstant       *com_htsc_mdc_insight_model13.MDBasicInfo   `protobuf:"bytes,21,opt,name=mdConstant" json:"mdConstant,omitempty"`
}

func (m *MarketData) Reset()                    { *m = MarketData{} }
func (m *MarketData) String() string            { return proto.CompactTextString(m) }
func (*MarketData) ProtoMessage()               {}
func (*MarketData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MarketData) GetMarketDataType() com_htsc_mdc_insight_model1.EMarketDataType {
	if m != nil {
		return m.MarketDataType
	}
	return com_htsc_mdc_insight_model1.EMarketDataType_UNKNOWN_DATA_TYPE
}

func (m *MarketData) GetHtscSecurityID() string {
	if m != nil {
		return m.HtscSecurityID
	}
	return ""
}

func (m *MarketData) GetSecurityIDSource() com_htsc_mdc_model.ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return com_htsc_mdc_model.ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MarketData) GetSecurityType() com_htsc_mdc_model1.ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return com_htsc_mdc_model1.ESecurityType_DefaultSecurityType
}

func (m *MarketData) GetMdStock() *com_htsc_mdc_insight_model2.MDStock {
	if m != nil {
		return m.MdStock
	}
	return nil
}

func (m *MarketData) GetMdIndex() *com_htsc_mdc_insight_model6.MDIndex {
	if m != nil {
		return m.MdIndex
	}
	return nil
}

func (m *MarketData) GetMdBond() *com_htsc_mdc_insight_model3.MDBond {
	if m != nil {
		return m.MdBond
	}
	return nil
}

func (m *MarketData) GetMdFund() *com_htsc_mdc_insight_model4.MDFund {
	if m != nil {
		return m.MdFund
	}
	return nil
}

func (m *MarketData) GetMdOption() *com_htsc_mdc_insight_model5.MDOption {
	if m != nil {
		return m.MdOption
	}
	return nil
}

func (m *MarketData) GetMdFuture() *com_htsc_mdc_insight_model7.MDFuture {
	if m != nil {
		return m.MdFuture
	}
	return nil
}

func (m *MarketData) GetMdTransaction() *com_htsc_mdc_insight_model8.MDTransaction {
	if m != nil {
		return m.MdTransaction
	}
	return nil
}

func (m *MarketData) GetMdOrder() *com_htsc_mdc_insight_model9.MDOrder {
	if m != nil {
		return m.MdOrder
	}
	return nil
}

func (m *MarketData) GetMdKLine() *com_htsc_mdc_insight_model10.ADKLine {
	if m != nil {
		return m.MdKLine
	}
	return nil
}

func (m *MarketData) GetMdTwap() *com_htsc_mdc_insight_model11.ADTwap {
	if m != nil {
		return m.MdTwap
	}
	return nil
}

func (m *MarketData) GetMdVwap() *com_htsc_mdc_insight_model12.ADVwap {
	if m != nil {
		return m.MdVwap
	}
	return nil
}

func (m *MarketData) GetMdConstant() *com_htsc_mdc_insight_model13.MDBasicInfo {
	if m != nil {
		return m.MdConstant
	}
	return nil
}

// 行情数据流
type MarketDataStream struct {
	TotalNumber int32         `protobuf:"varint,1,opt,name=totalNumber" json:"totalNumber,omitempty"`
	Serial      int32         `protobuf:"varint,2,opt,name=serial" json:"serial,omitempty"`
	IsFinished  bool          `protobuf:"varint,3,opt,name=isFinished" json:"isFinished,omitempty"`
	MarketDatas []*MarketData `protobuf:"bytes,4,rep,name=marketDatas" json:"marketDatas,omitempty"`
}

func (m *MarketDataStream) Reset()                    { *m = MarketDataStream{} }
func (m *MarketDataStream) String() string            { return proto.CompactTextString(m) }
func (*MarketDataStream) ProtoMessage()               {}
func (*MarketDataStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MarketDataStream) GetTotalNumber() int32 {
	if m != nil {
		return m.TotalNumber
	}
	return 0
}

func (m *MarketDataStream) GetSerial() int32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *MarketDataStream) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (m *MarketDataStream) GetMarketDatas() []*MarketData {
	if m != nil {
		return m.MarketDatas
	}
	return nil
}

func init() {
	proto.RegisterType((*MarketData)(nil), "com.htsc.mdc.insight.model.MarketData")
	proto.RegisterType((*MarketDataStream)(nil), "com.htsc.mdc.insight.model.MarketDataStream")
}

func init() { proto.RegisterFile("MarketData.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x15, 0xb6, 0x95, 0xe2, 0xfe, 0x59, 0xe7, 0x31, 0xb0, 0x7a, 0x81, 0x4a, 0x81, 0x51,
	0x84, 0x94, 0x8b, 0x72, 0x87, 0x84, 0xc4, 0x4a, 0x5a, 0x56, 0x41, 0x28, 0xb8, 0xd5, 0xee, 0xbd,
	0x38, 0xd0, 0x68, 0x75, 0x5c, 0xd9, 0x8e, 0x60, 0x6f, 0xc3, 0x0b, 0x70, 0xcb, 0xf3, 0xa1, 0xd8,
	0x49, 0x9c, 0x16, 0x2d, 0xed, 0x55, 0x75, 0xec, 0xef, 0x77, 0xdc, 0x9e, 0x73, 0xbe, 0x53, 0xd0,
	0xf1, 0x89, 0xb8, 0x09, 0x95, 0x47, 0x14, 0x71, 0xd7, 0x82, 0x2b, 0x0e, 0xbb, 0x01, 0x67, 0xee,
	0x52, 0xc9, 0xc0, 0x65, 0x34, 0x70, 0xa3, 0x58, 0x46, 0x3f, 0x96, 0xca, 0x65, 0x9c, 0x86, 0xab,
	0xee, 0xd9, 0xd8, 0xca, 0x17, 0xb7, 0xeb, 0xd0, 0x20, 0xdd, 0xc7, 0xe3, 0x79, 0x18, 0x24, 0x22,
	0x52, 0xb7, 0x53, 0x6f, 0xce, 0x13, 0x11, 0xe4, 0x17, 0xa7, 0xc5, 0x45, 0x49, 0xdd, 0xf2, 0xbd,
	0xb9, 0xe2, 0xc1, 0x4d, 0x16, 0x36, 0x7d, 0x6f, 0xc4, 0x63, 0x6a, 0xa3, 0x49, 0x52, 0x44, 0x6d,
	0xdf, 0x9b, 0xad, 0x55, 0xc4, 0x63, 0x8b, 0x4e, 0x63, 0x1a, 0xfe, 0xb2, 0xd7, 0x93, 0x44, 0x25,
	0xa2, 0x78, 0xce, 0xf7, 0x16, 0x82, 0xc4, 0x92, 0x04, 0x9b, 0xcc, 0x4c, 0xd0, 0x50, 0xe4, 0xe1,
	0x85, 0xf7, 0xe9, 0x73, 0x14, 0xe7, 0x48, 0xf3, 0xc2, 0x5b, 0xfc, 0x24, 0x6b, 0x1b, 0x5d, 0xd9,
	0xe8, 0xc4, 0xf7, 0x46, 0x44, 0x46, 0xc1, 0x34, 0xfe, 0xce, 0xcd, 0x51, 0xff, 0x4f, 0x1d, 0x00,
	0x5b, 0x02, 0x38, 0x07, 0x6d, 0xb6, 0x51, 0x10, 0xe4, 0xf4, 0x9c, 0x41, 0x7b, 0xf8, 0xda, 0xbd,
	0xbb, 0x88, 0xee, 0x56, 0x0d, 0xf1, 0x56, 0x0a, 0x78, 0x0e, 0xda, 0x29, 0x69, 0x4b, 0x8a, 0xee,
	0xf5, 0x9c, 0xc1, 0x03, 0xbc, 0x75, 0x0a, 0xbf, 0x81, 0x8e, 0xdc, 0x2a, 0x3b, 0x3a, 0xd0, 0xcf,
	0xbf, 0xd8, 0x7c, 0x3e, 0x7b, 0x76, 0xbb, 0x47, 0xf8, 0x3f, 0x1c, 0x8e, 0x41, 0x53, 0x96, 0x1a,
	0x86, 0x0e, 0x75, 0xba, 0xa7, 0x95, 0xe9, 0xf4, 0x6f, 0xd8, 0xc0, 0xe0, 0x3b, 0x70, 0x9f, 0x51,
	0xdd, 0x63, 0x04, 0x7a, 0xce, 0xa0, 0x31, 0x7c, 0x56, 0x55, 0x8f, 0x6c, 0x1c, 0x70, 0xce, 0x18,
	0x5c, 0xf7, 0x19, 0x35, 0xf6, 0xc1, 0xb5, 0x14, 0xe7, 0x0c, 0x7c, 0x0b, 0x6a, 0x8c, 0xa6, 0x23,
	0x85, 0x9a, 0x9a, 0xee, 0x57, 0xd3, 0xa9, 0x12, 0x67, 0x84, 0x61, 0xd3, 0x01, 0x44, 0xad, 0x7d,
	0xd8, 0x54, 0x89, 0x33, 0x02, 0xbe, 0x07, 0x75, 0x46, 0xcd, 0xb8, 0xa2, 0xb6, 0xa6, 0x9f, 0x57,
	0xd3, 0x46, 0x8b, 0x0b, 0xca, 0x64, 0x30, 0x13, 0x8d, 0x8e, 0xf7, 0xc9, 0x60, 0xb4, 0xb8, 0xa0,
	0xe0, 0x0c, 0xb4, 0x18, 0x2d, 0x79, 0x00, 0x75, 0x74, 0x9a, 0x57, 0xd5, 0x69, 0x4a, 0x00, 0xde,
	0xe4, 0x4d, 0x2f, 0xb4, 0x7f, 0xd0, 0xc9, 0x3e, 0xbd, 0xd0, 0x52, 0x9c, 0x33, 0x06, 0xd7, 0x7e,
	0x43, 0x70, 0x37, 0x9e, 0x59, 0x13, 0xe7, 0x8c, 0x69, 0x47, 0xea, 0x4f, 0x74, 0xba, 0xbb, 0x1d,
	0xc6, 0xc9, 0x38, 0x23, 0x0c, 0x9b, 0xba, 0x19, 0x3d, 0xdc, 0x87, 0xbd, 0xca, 0xd8, 0xf4, 0x13,
	0x7e, 0x04, 0x80, 0xd1, 0x0f, 0x3c, 0x96, 0x8a, 0xc4, 0x0a, 0x9d, 0x69, 0xfe, 0xe5, 0x8e, 0x31,
	0xca, 0x37, 0x05, 0x2e, 0xa1, 0xfd, 0xbf, 0x4e, 0x79, 0xc3, 0xce, 0x95, 0x08, 0x09, 0x83, 0x3d,
	0xd0, 0x50, 0x5c, 0x91, 0xd5, 0x97, 0x84, 0x5d, 0x87, 0x42, 0xaf, 0x8c, 0x23, 0x5c, 0x3e, 0x82,
	0x8f, 0x40, 0x4d, 0x86, 0x22, 0x22, 0x2b, 0x6d, 0xfd, 0x23, 0x9c, 0x45, 0xf0, 0x09, 0x00, 0x91,
	0x9c, 0x44, 0x71, 0x24, 0x97, 0x21, 0xd5, 0x66, 0xaf, 0xe3, 0xd2, 0x09, 0xbc, 0x04, 0x0d, 0xbb,
	0x4c, 0x24, 0x3a, 0xec, 0x1d, 0x0c, 0x1a, 0xc3, 0xf3, 0xca, 0x2f, 0x5e, 0xc8, 0x71, 0x19, 0x1d,
	0x0d, 0x41, 0xc5, 0xff, 0xc0, 0xe8, 0xd8, 0x62, 0x5f, 0xd3, 0xbd, 0x78, 0xe9, 0xfc, 0x76, 0x9c,
	0xeb, 0x9a, 0xde, 0x91, 0x6f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x87, 0xdd, 0xe8, 0xd3, 0x54,
	0x06, 0x00, 0x00,
}
