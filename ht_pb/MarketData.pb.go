// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MarketData.proto

package com_htsc_mdc_insight_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//行情数据
type MarketData struct {
	MarketDataType            EMarketDataType              `protobuf:"varint,1,opt,name=marketDataType,proto3,enum=com.htsc.mdc.insight.model.EMarketDataType" json:"marketDataType,omitempty"`
	MdStock                   *MDStock                     `protobuf:"bytes,10,opt,name=mdStock,proto3" json:"mdStock,omitempty"`
	MdIndex                   *MDIndex                     `protobuf:"bytes,11,opt,name=mdIndex,proto3" json:"mdIndex,omitempty"`
	MdBond                    *MDBond                      `protobuf:"bytes,12,opt,name=mdBond,proto3" json:"mdBond,omitempty"`
	MdFund                    *MDFund                      `protobuf:"bytes,13,opt,name=mdFund,proto3" json:"mdFund,omitempty"`
	MdOption                  *MDOption                    `protobuf:"bytes,14,opt,name=mdOption,proto3" json:"mdOption,omitempty"`
	MdFuture                  *MDFuture                    `protobuf:"bytes,15,opt,name=mdFuture,proto3" json:"mdFuture,omitempty"`
	MdTransaction             *MDTransaction               `protobuf:"bytes,16,opt,name=mdTransaction,proto3" json:"mdTransaction,omitempty"`
	MdOrder                   *MDOrder                     `protobuf:"bytes,17,opt,name=mdOrder,proto3" json:"mdOrder,omitempty"`
	MdKLine                   *ADKLine                     `protobuf:"bytes,18,opt,name=mdKLine,proto3" json:"mdKLine,omitempty"`
	MdTwap                    *ADTwap                      `protobuf:"bytes,19,opt,name=mdTwap,proto3" json:"mdTwap,omitempty"`
	MdVwap                    *ADVwap                      `protobuf:"bytes,20,opt,name=mdVwap,proto3" json:"mdVwap,omitempty"`
	MdConstant                *MDBasicInfo                 `protobuf:"bytes,21,opt,name=mdConstant,proto3" json:"mdConstant,omitempty"`
	MdSimpleTick              *MDSimpleTick                `protobuf:"bytes,22,opt,name=mdSimpleTick,proto3" json:"mdSimpleTick,omitempty"`
	MdUpsDownsAnalysis        *ADUpsDownsAnalysis          `protobuf:"bytes,23,opt,name=mdUpsDownsAnalysis,proto3" json:"mdUpsDownsAnalysis,omitempty"`
	MdIndicatorsRanking       *ADIndicatorsRanking         `protobuf:"bytes,24,opt,name=mdIndicatorsRanking,proto3" json:"mdIndicatorsRanking,omitempty"`
	DynamicPacket             *DynamicPacket               `protobuf:"bytes,25,opt,name=dynamicPacket,proto3" json:"dynamicPacket,omitempty"`
	MdVolumeByPrice           *ADVolumeByPrice             `protobuf:"bytes,26,opt,name=mdVolumeByPrice,proto3" json:"mdVolumeByPrice,omitempty"`
	MdFundFlowAnalysis        *ADFundFlowAnalysis          `protobuf:"bytes,27,opt,name=mdFundFlowAnalysis,proto3" json:"mdFundFlowAnalysis,omitempty"`
	MdForex                   *MDForex                     `protobuf:"bytes,28,opt,name=mdForex,proto3" json:"mdForex,omitempty"`
	MdSpot                    *MDSpot                      `protobuf:"bytes,29,opt,name=mdSpot,proto3" json:"mdSpot,omitempty"`
	MdRate                    *MDRate                      `protobuf:"bytes,30,opt,name=mdRate,proto3" json:"mdRate,omitempty"`
	OrderbookSnapshot         *ADOrderbookSnapshot         `protobuf:"bytes,31,opt,name=orderbookSnapshot,proto3" json:"orderbookSnapshot,omitempty"`
	OrderbookSnapshotWithTick *ADOrderbookSnapshotWithTick `protobuf:"bytes,32,opt,name=orderbookSnapshotWithTick,proto3" json:"orderbookSnapshotWithTick,omitempty"`
	MdQuote                   *MDQuote                     `protobuf:"bytes,33,opt,name=mdQuote,proto3" json:"mdQuote,omitempty"`
	MdETFBasicInfo            *MDETFBasicInfo              `protobuf:"bytes,34,opt,name=mdETFBasicInfo,proto3" json:"mdETFBasicInfo,omitempty"`
	MdFIQuote                 *MDFIQuote                   `protobuf:"bytes,35,opt,name=mdFIQuote,proto3" json:"mdFIQuote,omitempty"`
	MdChipDistribution        *ADChipDistribution          `protobuf:"bytes,36,opt,name=mdChipDistribution,proto3" json:"mdChipDistribution,omitempty"`
	MdWarrant                 *MDWarrant                   `protobuf:"bytes,37,opt,name=mdWarrant,proto3" json:"mdWarrant,omitempty"`
	MdSecurityLending         *MDSecurityLending           `protobuf:"bytes,38,opt,name=mdSecurityLending,proto3" json:"mdSecurityLending,omitempty"`
	MdNews                    *ADNews                      `protobuf:"bytes,39,opt,name=mdNews,proto3" json:"mdNews,omitempty"`
	MdStaringResult           *ADStaringResult             `protobuf:"bytes,40,opt,name=mdStaringResult,proto3" json:"mdStaringResult,omitempty"`
	MdDerivedAnalysis         *ADDerivedAnalysis           `protobuf:"bytes,41,opt,name=mdDerivedAnalysis,proto3" json:"mdDerivedAnalysis,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                     `json:"-"`
	XXX_unrecognized          []byte                       `json:"-"`
	XXX_sizecache             int32                        `json:"-"`
}

func (m *MarketData) Reset()         { *m = MarketData{} }
func (m *MarketData) String() string { return proto.CompactTextString(m) }
func (*MarketData) ProtoMessage()    {}
func (*MarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2e66593564a6bb, []int{0}
}

func (m *MarketData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketData.Unmarshal(m, b)
}
func (m *MarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketData.Marshal(b, m, deterministic)
}
func (m *MarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketData.Merge(m, src)
}
func (m *MarketData) XXX_Size() int {
	return xxx_messageInfo_MarketData.Size(m)
}
func (m *MarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketData.DiscardUnknown(m)
}

var xxx_messageInfo_MarketData proto.InternalMessageInfo

func (m *MarketData) GetMarketDataType() EMarketDataType {
	if m != nil {
		return m.MarketDataType
	}
	return EMarketDataType_UNKNOWN_DATA_TYPE
}

func (m *MarketData) GetMdStock() *MDStock {
	if m != nil {
		return m.MdStock
	}
	return nil
}

func (m *MarketData) GetMdIndex() *MDIndex {
	if m != nil {
		return m.MdIndex
	}
	return nil
}

func (m *MarketData) GetMdBond() *MDBond {
	if m != nil {
		return m.MdBond
	}
	return nil
}

func (m *MarketData) GetMdFund() *MDFund {
	if m != nil {
		return m.MdFund
	}
	return nil
}

func (m *MarketData) GetMdOption() *MDOption {
	if m != nil {
		return m.MdOption
	}
	return nil
}

func (m *MarketData) GetMdFuture() *MDFuture {
	if m != nil {
		return m.MdFuture
	}
	return nil
}

func (m *MarketData) GetMdTransaction() *MDTransaction {
	if m != nil {
		return m.MdTransaction
	}
	return nil
}

func (m *MarketData) GetMdOrder() *MDOrder {
	if m != nil {
		return m.MdOrder
	}
	return nil
}

func (m *MarketData) GetMdKLine() *ADKLine {
	if m != nil {
		return m.MdKLine
	}
	return nil
}

func (m *MarketData) GetMdTwap() *ADTwap {
	if m != nil {
		return m.MdTwap
	}
	return nil
}

func (m *MarketData) GetMdVwap() *ADVwap {
	if m != nil {
		return m.MdVwap
	}
	return nil
}

func (m *MarketData) GetMdConstant() *MDBasicInfo {
	if m != nil {
		return m.MdConstant
	}
	return nil
}

func (m *MarketData) GetMdSimpleTick() *MDSimpleTick {
	if m != nil {
		return m.MdSimpleTick
	}
	return nil
}

func (m *MarketData) GetMdUpsDownsAnalysis() *ADUpsDownsAnalysis {
	if m != nil {
		return m.MdUpsDownsAnalysis
	}
	return nil
}

func (m *MarketData) GetMdIndicatorsRanking() *ADIndicatorsRanking {
	if m != nil {
		return m.MdIndicatorsRanking
	}
	return nil
}

func (m *MarketData) GetDynamicPacket() *DynamicPacket {
	if m != nil {
		return m.DynamicPacket
	}
	return nil
}

func (m *MarketData) GetMdVolumeByPrice() *ADVolumeByPrice {
	if m != nil {
		return m.MdVolumeByPrice
	}
	return nil
}

func (m *MarketData) GetMdFundFlowAnalysis() *ADFundFlowAnalysis {
	if m != nil {
		return m.MdFundFlowAnalysis
	}
	return nil
}

func (m *MarketData) GetMdForex() *MDForex {
	if m != nil {
		return m.MdForex
	}
	return nil
}

func (m *MarketData) GetMdSpot() *MDSpot {
	if m != nil {
		return m.MdSpot
	}
	return nil
}

func (m *MarketData) GetMdRate() *MDRate {
	if m != nil {
		return m.MdRate
	}
	return nil
}

func (m *MarketData) GetOrderbookSnapshot() *ADOrderbookSnapshot {
	if m != nil {
		return m.OrderbookSnapshot
	}
	return nil
}

func (m *MarketData) GetOrderbookSnapshotWithTick() *ADOrderbookSnapshotWithTick {
	if m != nil {
		return m.OrderbookSnapshotWithTick
	}
	return nil
}

func (m *MarketData) GetMdQuote() *MDQuote {
	if m != nil {
		return m.MdQuote
	}
	return nil
}

func (m *MarketData) GetMdETFBasicInfo() *MDETFBasicInfo {
	if m != nil {
		return m.MdETFBasicInfo
	}
	return nil
}

func (m *MarketData) GetMdFIQuote() *MDFIQuote {
	if m != nil {
		return m.MdFIQuote
	}
	return nil
}

func (m *MarketData) GetMdChipDistribution() *ADChipDistribution {
	if m != nil {
		return m.MdChipDistribution
	}
	return nil
}

func (m *MarketData) GetMdWarrant() *MDWarrant {
	if m != nil {
		return m.MdWarrant
	}
	return nil
}

func (m *MarketData) GetMdSecurityLending() *MDSecurityLending {
	if m != nil {
		return m.MdSecurityLending
	}
	return nil
}

func (m *MarketData) GetMdNews() *ADNews {
	if m != nil {
		return m.MdNews
	}
	return nil
}

func (m *MarketData) GetMdStaringResult() *ADStaringResult {
	if m != nil {
		return m.MdStaringResult
	}
	return nil
}

func (m *MarketData) GetMdDerivedAnalysis() *ADDerivedAnalysis {
	if m != nil {
		return m.MdDerivedAnalysis
	}
	return nil
}

//行情数据流
type MarketDataStream struct {
	IsCompressed         bool            `protobuf:"varint,1,opt,name=isCompressed,proto3" json:"isCompressed,omitempty"`
	OriginalLength       int32           `protobuf:"varint,2,opt,name=originalLength,proto3" json:"originalLength,omitempty"`
	CompressedData       []byte          `protobuf:"bytes,3,opt,name=compressedData,proto3" json:"compressedData,omitempty"`
	MarketDataList       *MarketDataList `protobuf:"bytes,4,opt,name=marketDataList,proto3" json:"marketDataList,omitempty"`
	TotalNumber          int32           `protobuf:"varint,5,opt,name=totalNumber,proto3" json:"totalNumber,omitempty"`
	Serial               int32           `protobuf:"varint,6,opt,name=serial,proto3" json:"serial,omitempty"`
	IsFinished           bool            `protobuf:"varint,7,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MarketDataStream) Reset()         { *m = MarketDataStream{} }
func (m *MarketDataStream) String() string { return proto.CompactTextString(m) }
func (*MarketDataStream) ProtoMessage()    {}
func (*MarketDataStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2e66593564a6bb, []int{1}
}

func (m *MarketDataStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataStream.Unmarshal(m, b)
}
func (m *MarketDataStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataStream.Marshal(b, m, deterministic)
}
func (m *MarketDataStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataStream.Merge(m, src)
}
func (m *MarketDataStream) XXX_Size() int {
	return xxx_messageInfo_MarketDataStream.Size(m)
}
func (m *MarketDataStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataStream.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataStream proto.InternalMessageInfo

func (m *MarketDataStream) GetIsCompressed() bool {
	if m != nil {
		return m.IsCompressed
	}
	return false
}

func (m *MarketDataStream) GetOriginalLength() int32 {
	if m != nil {
		return m.OriginalLength
	}
	return 0
}

func (m *MarketDataStream) GetCompressedData() []byte {
	if m != nil {
		return m.CompressedData
	}
	return nil
}

func (m *MarketDataStream) GetMarketDataList() *MarketDataList {
	if m != nil {
		return m.MarketDataList
	}
	return nil
}

func (m *MarketDataStream) GetTotalNumber() int32 {
	if m != nil {
		return m.TotalNumber
	}
	return 0
}

func (m *MarketDataStream) GetSerial() int32 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *MarketDataStream) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

//行情数据集
type MarketDataList struct {
	MarketDatas          []*MarketData `protobuf:"bytes,1,rep,name=marketDatas,proto3" json:"marketDatas,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MarketDataList) Reset()         { *m = MarketDataList{} }
func (m *MarketDataList) String() string { return proto.CompactTextString(m) }
func (*MarketDataList) ProtoMessage()    {}
func (*MarketDataList) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c2e66593564a6bb, []int{2}
}

func (m *MarketDataList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MarketDataList.Unmarshal(m, b)
}
func (m *MarketDataList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MarketDataList.Marshal(b, m, deterministic)
}
func (m *MarketDataList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataList.Merge(m, src)
}
func (m *MarketDataList) XXX_Size() int {
	return xxx_messageInfo_MarketDataList.Size(m)
}
func (m *MarketDataList) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataList.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataList proto.InternalMessageInfo

func (m *MarketDataList) GetMarketDatas() []*MarketData {
	if m != nil {
		return m.MarketDatas
	}
	return nil
}

func init() {
	proto.RegisterType((*MarketData)(nil), "com.htsc.mdc.insight.model.MarketData")
	proto.RegisterType((*MarketDataStream)(nil), "com.htsc.mdc.insight.model.MarketDataStream")
	proto.RegisterType((*MarketDataList)(nil), "com.htsc.mdc.insight.model.MarketDataList")
}

func init() { proto.RegisterFile("MarketData.proto", fileDescriptor_7c2e66593564a6bb) }

var fileDescriptor_7c2e66593564a6bb = []byte{
	// 1104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x97, 0x7f, 0x6f, 0x1b, 0xb5,
	0x1f, 0xc7, 0x95, 0xed, 0xbb, 0x6e, 0x5f, 0x37, 0x4d, 0x57, 0x77, 0xdd, 0x3e, 0x2d, 0x30, 0xb2,
	0x6c, 0xeb, 0x32, 0x26, 0x82, 0x54, 0xfe, 0x40, 0x42, 0x42, 0x22, 0xad, 0x17, 0x56, 0xd1, 0x5b,
	0x8b, 0xd3, 0x75, 0x12, 0x08, 0x24, 0xf7, 0xce, 0x34, 0x56, 0x63, 0x3b, 0x3a, 0x3b, 0x94, 0x3e,
	0x1b, 0x1e, 0x04, 0xcf, 0x86, 0x27, 0x83, 0xce, 0xbe, 0xcb, 0xfd, 0x48, 0x9b, 0x1c, 0x7f, 0x45,
	0xf6, 0x7d, 0x5e, 0x6f, 0xff, 0xfa, 0xfc, 0x0a, 0x7a, 0x18, 0xb0, 0xf8, 0x92, 0x5b, 0xc2, 0x2c,
	0xeb, 0x4d, 0x62, 0x6d, 0x35, 0xde, 0x09, 0xb5, 0xec, 0x8d, 0xac, 0x09, 0x7b, 0x32, 0x0a, 0x7b,
	0x42, 0x19, 0x71, 0x31, 0xb2, 0x3d, 0xa9, 0x23, 0x3e, 0xde, 0xd9, 0x7a, 0x9b, 0x9b, 0x9f, 0x5e,
	0x4f, 0xb8, 0x47, 0x76, 0xd6, 0x02, 0x32, 0xb4, 0x3a, 0xbc, 0x4c, 0x87, 0xcd, 0x80, 0xec, 0x6b,
	0x15, 0xe5, 0xa3, 0xc1, 0x74, 0x36, 0x6a, 0x05, 0xe4, 0x78, 0x62, 0x85, 0x56, 0x39, 0x7a, 0xa8,
	0x22, 0xfe, 0x67, 0xfe, 0x79, 0x30, 0xb5, 0xd3, 0x38, 0x53, 0xde, 0x0c, 0xc8, 0x69, 0xcc, 0x94,
	0x61, 0x61, 0x99, 0x39, 0x8e, 0x23, 0x1e, 0x67, 0xc3, 0x3e, 0xf9, 0xf1, 0x48, 0xa8, 0x0c, 0x69,
	0xf6, 0xc9, 0xe9, 0x15, 0x9b, 0xe4, 0xa3, 0xb3, 0x7c, 0xb4, 0x11, 0x90, 0x7d, 0x66, 0x44, 0x78,
	0xa8, 0x7e, 0xd7, 0xe9, 0x14, 0x0e, 0xc8, 0x50, 0xc8, 0xc9, 0x98, 0x9f, 0x8a, 0xd9, 0x01, 0xa0,
	0x4f, 0x3e, 0x4c, 0x0c, 0xd1, 0x57, 0xca, 0xf4, 0x15, 0x1b, 0x5f, 0x1b, 0x61, 0xd2, 0x2f, 0xdb,
	0xfd, 0x64, 0xbb, 0x22, 0x64, 0x56, 0xc7, 0x86, 0x32, 0x75, 0x29, 0xd4, 0x45, 0xb6, 0x55, 0x72,
	0xad, 0x98, 0x14, 0xe1, 0x09, 0x0b, 0x2f, 0xb9, 0x4d, 0x27, 0xb7, 0xfa, 0xe4, 0x4c, 0x8f, 0xa7,
	0x92, 0xef, 0x5f, 0x9f, 0xc4, 0x22, 0xe4, 0xf9, 0x02, 0xc9, 0x9d, 0x0c, 0xc6, 0xfa, 0xaa, 0xb2,
	0xc0, 0x5a, 0x40, 0x06, 0x3a, 0x9e, 0xdd, 0x47, 0x33, 0x20, 0xc3, 0x89, 0xb6, 0xf9, 0x88, 0x32,
	0xcb, 0xf3, 0xbd, 0xb8, 0x6b, 0x38, 0xd7, 0xfa, 0x72, 0xa8, 0xd8, 0xc4, 0x8c, 0x66, 0x86, 0xcf,
	0x6e, 0xf8, 0xf4, 0x51, 0xd8, 0x51, 0xe1, 0x8c, 0x6b, 0x01, 0xf9, 0x69, 0xaa, 0x67, 0x62, 0x8f,
	0x02, 0xf2, 0xf6, 0x74, 0x50, 0xbd, 0x9c, 0xf5, 0x80, 0x0c, 0x0e, 0x8b, 0x66, 0xd0, 0x27, 0x07,
	0x23, 0x31, 0x21, 0xc2, 0xd8, 0x58, 0x9c, 0x4f, 0x0b, 0x8f, 0xb2, 0x1e, 0x90, 0x8f, 0x2c, 0x8e,
	0x99, 0xca, 0xf6, 0xf0, 0x24, 0x20, 0x43, 0x1e, 0x4e, 0x63, 0x61, 0xaf, 0x8f, 0xb8, 0x8a, 0xf2,
	0x8b, 0x6a, 0xf6, 0xc9, 0x7b, 0x7e, 0x65, 0xf2, 0x1b, 0x1a, 0x5a, 0x16, 0x0b, 0x75, 0x41, 0xb9,
	0x99, 0x8e, 0x67, 0x74, 0x9f, 0x10, 0x1e, 0x8b, 0x3f, 0x78, 0x54, 0xbe, 0xa0, 0xce, 0x3f, 0x9b,
	0x08, 0xe5, 0x4e, 0x88, 0x87, 0xa8, 0x25, 0x4b, 0x2e, 0x09, 0x8d, 0x76, 0xa3, 0xdb, 0xda, 0x7b,
	0xd3, 0xbb, 0xdd, 0x8d, 0x7b, 0x15, 0x2f, 0xa6, 0x15, 0x09, 0xfc, 0x1d, 0xba, 0x2f, 0x23, 0xe7,
	0xd1, 0x80, 0xda, 0x8d, 0xee, 0xea, 0xde, 0xf3, 0x45, 0x6a, 0xa9, 0xf3, 0xd3, 0x8c, 0xf1, 0xb8,
	0xf3, 0x6a, 0x58, 0xad, 0x83, 0x3b, 0x53, 0x9a, 0x31, 0xf8, 0x5b, 0xb4, 0x22, 0xa3, 0x24, 0x80,
	0xa0, 0xe9, 0xe8, 0xce, 0x62, 0x3a, 0xb1, 0xa4, 0x29, 0xe1, 0xd9, 0xc4, 0xb5, 0x60, 0xad, 0x0e,
	0x9b, 0x58, 0xd2, 0x94, 0xc0, 0xdf, 0xa3, 0x07, 0x32, 0xf2, 0xc1, 0x09, 0x2d, 0x47, 0xbf, 0x58,
	0x4c, 0x7b, 0x5b, 0x3a, 0xa3, 0xbc, 0x82, 0x8f, 0x5f, 0x58, 0xaf, 0xa3, 0xe0, 0x6d, 0xe9, 0x8c,
	0xc2, 0xc7, 0x68, 0x4d, 0x46, 0x85, 0x88, 0x87, 0x87, 0x4e, 0xe6, 0xf5, 0x62, 0x99, 0x02, 0x40,
	0xcb, 0xbc, 0x7f, 0x0b, 0x17, 0x0b, 0xb0, 0x51, 0xe7, 0x2d, 0x9c, 0x29, 0xcd, 0x18, 0x8f, 0xbb,
	0xec, 0x02, 0x78, 0x39, 0x9e, 0x26, 0x22, 0x9a, 0x31, 0xfe, 0x39, 0x92, 0x6c, 0x04, 0x9b, 0xcb,
	0x9f, 0xc3, 0xe7, 0x2d, 0x9a, 0x12, 0x9e, 0x4d, 0x72, 0x17, 0x3c, 0xaa, 0xc3, 0x9e, 0xa5, 0x6c,
	0xf2, 0x8b, 0x7f, 0x40, 0x48, 0x46, 0x07, 0x5a, 0x19, 0xcb, 0x94, 0x85, 0x2d, 0xc7, 0xbf, 0x5a,
	0xe2, 0x46, 0x59, 0xe8, 0xd3, 0x02, 0x8a, 0x8f, 0x50, 0x53, 0x46, 0x79, 0x7e, 0x84, 0xc7, 0x4e,
	0xaa, 0xbb, 0x24, 0x1c, 0x66, 0xf6, 0xb4, 0x44, 0xe3, 0xdf, 0x10, 0x96, 0x51, 0x35, 0xb3, 0xc2,
	0x13, 0xa7, 0xd9, 0x5b, 0x7c, 0xbc, 0x2a, 0x45, 0x6f, 0x50, 0xc2, 0x0c, 0x6d, 0xba, 0x20, 0x2a,
	0xe7, 0x67, 0x00, 0xb7, 0xc0, 0x57, 0x8b, 0x17, 0x98, 0xc3, 0xe8, 0x4d, 0x5a, 0x89, 0x83, 0x46,
	0xc5, 0x3c, 0x0f, 0xdb, 0xcb, 0x1d, 0xb4, 0x54, 0x18, 0x68, 0x99, 0xc7, 0x1f, 0xd0, 0xba, 0x8c,
	0x4a, 0x35, 0x02, 0x76, 0x9c, 0xe4, 0x9b, 0x25, 0xef, 0x5d, 0x44, 0x68, 0x55, 0xc3, 0x5f, 0x75,
	0xb5, 0xc6, 0xc0, 0x27, 0x75, 0xae, 0xba, 0x4a, 0xd1, 0x1b, 0x94, 0x7c, 0x60, 0xb8, 0x4a, 0x05,
	0x9f, 0xd6, 0x89, 0x2b, 0x67, 0x4a, 0x33, 0xc6, 0x3b, 0x77, 0x52, 0xd9, 0xe0, 0xb3, 0x3a, 0x79,
	0x2a, 0xb1, 0xa4, 0x29, 0xe1, 0xd9, 0xa4, 0x0e, 0xc2, 0xd3, 0x3a, 0x6c, 0x62, 0x49, 0x53, 0x02,
	0xff, 0x8a, 0x36, 0x74, 0xb5, 0x30, 0xc2, 0xe7, 0x75, 0xfc, 0x63, 0xae, 0x9e, 0xd2, 0x79, 0x25,
	0x3c, 0x45, 0xdb, 0xfa, 0xb6, 0xba, 0x0b, 0x6d, 0xb7, 0xcc, 0x37, 0xff, 0x71, 0x99, 0x0c, 0xa7,
	0xb7, 0x2b, 0xfb, 0xc7, 0x70, 0x65, 0x1a, 0x9e, 0xd5, 0x79, 0x0c, 0x67, 0x4a, 0x33, 0x06, 0x53,
	0xd4, 0x92, 0x51, 0xb1, 0xfa, 0x43, 0xc7, 0xa9, 0x7c, 0xb1, 0x58, 0xa5, 0x48, 0xd0, 0x8a, 0x02,
	0x3e, 0x40, 0xff, 0x97, 0x51, 0xda, 0x3b, 0xc0, 0x73, 0x27, 0xf7, 0x72, 0x89, 0x87, 0x78, 0x63,
	0x9a, 0x73, 0xde, 0x89, 0xab, 0xfd, 0x06, 0xbc, 0xa8, 0xe3, 0xc4, 0x55, 0x8a, 0xde, 0xa0, 0xe4,
	0x37, 0x99, 0x76, 0x2d, 0xf0, 0xb2, 0xce, 0x26, 0x53, 0x63, 0x9a, 0x73, 0xf8, 0x17, 0xb4, 0x21,
	0xa3, 0x4a, 0xa7, 0x03, 0xbb, 0x4e, 0xec, 0xcb, 0x25, 0x5e, 0x5d, 0x86, 0xe8, 0xbc, 0x8e, 0xf7,
	0xf5, 0xa4, 0x5b, 0x82, 0x57, 0x75, 0x8a, 0x40, 0x62, 0x49, 0x53, 0xc2, 0x67, 0x96, 0x52, 0x6f,
	0x05, 0xdd, 0x3a, 0x99, 0xa5, 0x84, 0xd0, 0xaa, 0x86, 0x3f, 0x6f, 0xa5, 0x37, 0x83, 0xd7, 0xcb,
	0xcf, 0x3b, 0xd7, 0xd0, 0xd1, 0x79, 0x9d, 0xce, 0xdf, 0x77, 0x8a, 0xff, 0x48, 0x86, 0x36, 0xe6,
	0x4c, 0xe2, 0x0e, 0x6a, 0x0a, 0x73, 0xa0, 0xe5, 0x24, 0xe6, 0xc6, 0xf0, 0xc8, 0x75, 0x78, 0x0f,
	0x68, 0x69, 0x0e, 0xef, 0xa2, 0x96, 0x8e, 0xc5, 0x85, 0x50, 0x6c, 0x7c, 0xc4, 0xd5, 0x85, 0x1d,
	0xc1, 0x9d, 0x76, 0xa3, 0x7b, 0x8f, 0x56, 0x66, 0x13, 0xbb, 0x70, 0x46, 0x25, 0x6b, 0xc0, 0xdd,
	0x76, 0xa3, 0xdb, 0xa4, 0x95, 0x59, 0x17, 0x13, 0xb3, 0x7d, 0x1c, 0x09, 0x63, 0xe1, 0x7f, 0x35,
	0x62, 0xa2, 0x44, 0xd0, 0x8a, 0x02, 0x6e, 0xa3, 0x55, 0xab, 0x2d, 0x1b, 0xbf, 0x9f, 0xca, 0x73,
	0x1e, 0xc3, 0x3d, 0xb7, 0xc1, 0xe2, 0x14, 0x7e, 0x8c, 0x56, 0x0c, 0x8f, 0x05, 0x1b, 0xc3, 0x8a,
	0xfb, 0x98, 0x8e, 0xf0, 0x53, 0x84, 0x84, 0x19, 0x08, 0x25, 0xcc, 0x88, 0x47, 0x70, 0xdf, 0x9d,
	0xbf, 0x30, 0xd3, 0xf9, 0x19, 0xb5, 0xca, 0x6b, 0xe3, 0x77, 0x68, 0x35, 0x5f, 0xdd, 0x40, 0xa3,
	0x7d, 0xb7, 0xbb, 0xba, 0xb7, 0x5b, 0x6f, 0xf3, 0xb4, 0x88, 0xee, 0xef, 0xa1, 0x05, 0xff, 0x08,
	0xf7, 0xd7, 0x73, 0xec, 0x24, 0xe9, 0xcf, 0xdf, 0x35, 0xfe, 0x6a, 0x34, 0xce, 0x57, 0x5c, 0xaf,
	0xfe, 0xf5, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x4d, 0xa7, 0xb4, 0x5e, 0x0e, 0x00, 0x00,
}
