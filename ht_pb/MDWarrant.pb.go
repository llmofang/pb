// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDWarrant.proto

package ht_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//权证信息
type MDWarrant struct {
	HTSCSecurityID         string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate                 int32             `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime                 int32             `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp          int64             `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	TradingPhaseCode       string            `protobuf:"bytes,5,opt,name=TradingPhaseCode,proto3" json:"TradingPhaseCode,omitempty"`
	SecurityIDSource       ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType           ESecurityType     `protobuf:"varint,7,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	MaxPx                  int64             `protobuf:"varint,8,opt,name=MaxPx,proto3" json:"MaxPx,omitempty"`
	MinPx                  int64             `protobuf:"varint,9,opt,name=MinPx,proto3" json:"MinPx,omitempty"`
	PreClosePx             int64             `protobuf:"varint,10,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	NumTrades              int64             `protobuf:"varint,11,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	TotalVolumeTrade       int64             `protobuf:"varint,12,opt,name=TotalVolumeTrade,proto3" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade        int64             `protobuf:"varint,13,opt,name=TotalValueTrade,proto3" json:"TotalValueTrade,omitempty"`
	LastPx                 int64             `protobuf:"varint,14,opt,name=LastPx,proto3" json:"LastPx,omitempty"`
	OpenPx                 int64             `protobuf:"varint,15,opt,name=OpenPx,proto3" json:"OpenPx,omitempty"`
	ClosePx                int64             `protobuf:"varint,16,opt,name=ClosePx,proto3" json:"ClosePx,omitempty"`
	HighPx                 int64             `protobuf:"varint,17,opt,name=HighPx,proto3" json:"HighPx,omitempty"`
	LowPx                  int64             `protobuf:"varint,18,opt,name=LowPx,proto3" json:"LowPx,omitempty"`
	DiffPx1                int64             `protobuf:"varint,19,opt,name=DiffPx1,proto3" json:"DiffPx1,omitempty"`
	DiffPx2                int64             `protobuf:"varint,20,opt,name=DiffPx2,proto3" json:"DiffPx2,omitempty"`
	TotalBuyQty            int64             `protobuf:"varint,21,opt,name=TotalBuyQty,proto3" json:"TotalBuyQty,omitempty"`
	TotalSellQty           int64             `protobuf:"varint,22,opt,name=TotalSellQty,proto3" json:"TotalSellQty,omitempty"`
	WeightedAvgBuyPx       int64             `protobuf:"varint,23,opt,name=WeightedAvgBuyPx,proto3" json:"WeightedAvgBuyPx,omitempty"`
	WeightedAvgSellPx      int64             `protobuf:"varint,24,opt,name=WeightedAvgSellPx,proto3" json:"WeightedAvgSellPx,omitempty"`
	WithdrawBuyNumber      int64             `protobuf:"varint,25,opt,name=WithdrawBuyNumber,proto3" json:"WithdrawBuyNumber,omitempty"`
	WithdrawBuyAmount      int64             `protobuf:"varint,26,opt,name=WithdrawBuyAmount,proto3" json:"WithdrawBuyAmount,omitempty"`
	WithdrawBuyMoney       int64             `protobuf:"varint,27,opt,name=WithdrawBuyMoney,proto3" json:"WithdrawBuyMoney,omitempty"`
	WithdrawSellNumber     int64             `protobuf:"varint,28,opt,name=WithdrawSellNumber,proto3" json:"WithdrawSellNumber,omitempty"`
	WithdrawSellAmount     int64             `protobuf:"varint,29,opt,name=WithdrawSellAmount,proto3" json:"WithdrawSellAmount,omitempty"`
	WithdrawSellMoney      int64             `protobuf:"varint,30,opt,name=WithdrawSellMoney,proto3" json:"WithdrawSellMoney,omitempty"`
	TotalBuyNumber         int64             `protobuf:"varint,31,opt,name=TotalBuyNumber,proto3" json:"TotalBuyNumber,omitempty"`
	TotalSellNumber        int64             `protobuf:"varint,32,opt,name=TotalSellNumber,proto3" json:"TotalSellNumber,omitempty"`
	BuyTradeMaxDuration    int64             `protobuf:"varint,33,opt,name=BuyTradeMaxDuration,proto3" json:"BuyTradeMaxDuration,omitempty"`
	SellTradeMaxDuration   int64             `protobuf:"varint,34,opt,name=SellTradeMaxDuration,proto3" json:"SellTradeMaxDuration,omitempty"`
	NumBuyOrders           int32             `protobuf:"varint,35,opt,name=NumBuyOrders,proto3" json:"NumBuyOrders,omitempty"`
	NumSellOrders          int32             `protobuf:"varint,36,opt,name=NumSellOrders,proto3" json:"NumSellOrders,omitempty"`
	WarrantPremiumRate     int64             `protobuf:"varint,37,opt,name=WarrantPremiumRate,proto3" json:"WarrantPremiumRate,omitempty"`
	TotalWarrantExecuteQty int64             `protobuf:"varint,38,opt,name=TotalWarrantExecuteQty,proto3" json:"TotalWarrantExecuteQty,omitempty"`
	TotalWarrantCreateQty  int64             `protobuf:"varint,39,opt,name=TotalWarrantCreateQty,proto3" json:"TotalWarrantCreateQty,omitempty"`
	TotalWarrantCancelQty  int64             `protobuf:"varint,40,opt,name=TotalWarrantCancelQty,proto3" json:"TotalWarrantCancelQty,omitempty"`
	ExchangeDate           int32             `protobuf:"varint,41,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime           int32             `protobuf:"varint,42,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	ChannelNo              int32             `protobuf:"varint,50,opt,name=ChannelNo,proto3" json:"ChannelNo,omitempty"`
	BuyPriceQueue          []int64           `protobuf:"varint,51,rep,packed,name=BuyPriceQueue,proto3" json:"BuyPriceQueue,omitempty"`
	BuyOrderQtyQueue       []int64           `protobuf:"varint,52,rep,packed,name=BuyOrderQtyQueue,proto3" json:"BuyOrderQtyQueue,omitempty"`
	SellPriceQueue         []int64           `protobuf:"varint,53,rep,packed,name=SellPriceQueue,proto3" json:"SellPriceQueue,omitempty"`
	SellOrderQtyQueue      []int64           `protobuf:"varint,54,rep,packed,name=SellOrderQtyQueue,proto3" json:"SellOrderQtyQueue,omitempty"`
	BuyOrderQueue          []int64           `protobuf:"varint,55,rep,packed,name=BuyOrderQueue,proto3" json:"BuyOrderQueue,omitempty"`
	SellOrderQueue         []int64           `protobuf:"varint,56,rep,packed,name=SellOrderQueue,proto3" json:"SellOrderQueue,omitempty"`
	BuyNumOrdersQueue      []int64           `protobuf:"varint,57,rep,packed,name=BuyNumOrdersQueue,proto3" json:"BuyNumOrdersQueue,omitempty"`
	SellNumOrdersQueue     []int64           `protobuf:"varint,58,rep,packed,name=SellNumOrdersQueue,proto3" json:"SellNumOrdersQueue,omitempty"`
	NorminalPx             int64             `protobuf:"varint,59,opt,name=NorminalPx,proto3" json:"NorminalPx,omitempty"`
	ShortSellSharesTraded  int64             `protobuf:"varint,60,opt,name=ShortSellSharesTraded,proto3" json:"ShortSellSharesTraded,omitempty"`
	ShortSellTurnover      int64             `protobuf:"varint,61,opt,name=ShortSellTurnover,proto3" json:"ShortSellTurnover,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}          `json:"-"`
	XXX_unrecognized       []byte            `json:"-"`
	XXX_sizecache          int32             `json:"-"`
}

func (m *MDWarrant) Reset()         { *m = MDWarrant{} }
func (m *MDWarrant) String() string { return proto.CompactTextString(m) }
func (*MDWarrant) ProtoMessage()    {}
func (*MDWarrant) Descriptor() ([]byte, []int) {
	return fileDescriptor_833c4fcca4e8a14c, []int{0}
}

func (m *MDWarrant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDWarrant.Unmarshal(m, b)
}
func (m *MDWarrant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDWarrant.Marshal(b, m, deterministic)
}
func (m *MDWarrant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDWarrant.Merge(m, src)
}
func (m *MDWarrant) XXX_Size() int {
	return xxx_messageInfo_MDWarrant.Size(m)
}
func (m *MDWarrant) XXX_DiscardUnknown() {
	xxx_messageInfo_MDWarrant.DiscardUnknown(m)
}

var xxx_messageInfo_MDWarrant proto.InternalMessageInfo

func (m *MDWarrant) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDWarrant) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDWarrant) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *MDWarrant) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *MDWarrant) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDWarrant) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDWarrant) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *MDWarrant) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDWarrant) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func (m *MDWarrant) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDWarrant) GetNumTrades() int64 {
	if m != nil {
		return m.NumTrades
	}
	return 0
}

func (m *MDWarrant) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *MDWarrant) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *MDWarrant) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *MDWarrant) GetOpenPx() int64 {
	if m != nil {
		return m.OpenPx
	}
	return 0
}

func (m *MDWarrant) GetClosePx() int64 {
	if m != nil {
		return m.ClosePx
	}
	return 0
}

func (m *MDWarrant) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *MDWarrant) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *MDWarrant) GetDiffPx1() int64 {
	if m != nil {
		return m.DiffPx1
	}
	return 0
}

func (m *MDWarrant) GetDiffPx2() int64 {
	if m != nil {
		return m.DiffPx2
	}
	return 0
}

func (m *MDWarrant) GetTotalBuyQty() int64 {
	if m != nil {
		return m.TotalBuyQty
	}
	return 0
}

func (m *MDWarrant) GetTotalSellQty() int64 {
	if m != nil {
		return m.TotalSellQty
	}
	return 0
}

func (m *MDWarrant) GetWeightedAvgBuyPx() int64 {
	if m != nil {
		return m.WeightedAvgBuyPx
	}
	return 0
}

func (m *MDWarrant) GetWeightedAvgSellPx() int64 {
	if m != nil {
		return m.WeightedAvgSellPx
	}
	return 0
}

func (m *MDWarrant) GetWithdrawBuyNumber() int64 {
	if m != nil {
		return m.WithdrawBuyNumber
	}
	return 0
}

func (m *MDWarrant) GetWithdrawBuyAmount() int64 {
	if m != nil {
		return m.WithdrawBuyAmount
	}
	return 0
}

func (m *MDWarrant) GetWithdrawBuyMoney() int64 {
	if m != nil {
		return m.WithdrawBuyMoney
	}
	return 0
}

func (m *MDWarrant) GetWithdrawSellNumber() int64 {
	if m != nil {
		return m.WithdrawSellNumber
	}
	return 0
}

func (m *MDWarrant) GetWithdrawSellAmount() int64 {
	if m != nil {
		return m.WithdrawSellAmount
	}
	return 0
}

func (m *MDWarrant) GetWithdrawSellMoney() int64 {
	if m != nil {
		return m.WithdrawSellMoney
	}
	return 0
}

func (m *MDWarrant) GetTotalBuyNumber() int64 {
	if m != nil {
		return m.TotalBuyNumber
	}
	return 0
}

func (m *MDWarrant) GetTotalSellNumber() int64 {
	if m != nil {
		return m.TotalSellNumber
	}
	return 0
}

func (m *MDWarrant) GetBuyTradeMaxDuration() int64 {
	if m != nil {
		return m.BuyTradeMaxDuration
	}
	return 0
}

func (m *MDWarrant) GetSellTradeMaxDuration() int64 {
	if m != nil {
		return m.SellTradeMaxDuration
	}
	return 0
}

func (m *MDWarrant) GetNumBuyOrders() int32 {
	if m != nil {
		return m.NumBuyOrders
	}
	return 0
}

func (m *MDWarrant) GetNumSellOrders() int32 {
	if m != nil {
		return m.NumSellOrders
	}
	return 0
}

func (m *MDWarrant) GetWarrantPremiumRate() int64 {
	if m != nil {
		return m.WarrantPremiumRate
	}
	return 0
}

func (m *MDWarrant) GetTotalWarrantExecuteQty() int64 {
	if m != nil {
		return m.TotalWarrantExecuteQty
	}
	return 0
}

func (m *MDWarrant) GetTotalWarrantCreateQty() int64 {
	if m != nil {
		return m.TotalWarrantCreateQty
	}
	return 0
}

func (m *MDWarrant) GetTotalWarrantCancelQty() int64 {
	if m != nil {
		return m.TotalWarrantCancelQty
	}
	return 0
}

func (m *MDWarrant) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *MDWarrant) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *MDWarrant) GetChannelNo() int32 {
	if m != nil {
		return m.ChannelNo
	}
	return 0
}

func (m *MDWarrant) GetBuyPriceQueue() []int64 {
	if m != nil {
		return m.BuyPriceQueue
	}
	return nil
}

func (m *MDWarrant) GetBuyOrderQtyQueue() []int64 {
	if m != nil {
		return m.BuyOrderQtyQueue
	}
	return nil
}

func (m *MDWarrant) GetSellPriceQueue() []int64 {
	if m != nil {
		return m.SellPriceQueue
	}
	return nil
}

func (m *MDWarrant) GetSellOrderQtyQueue() []int64 {
	if m != nil {
		return m.SellOrderQtyQueue
	}
	return nil
}

func (m *MDWarrant) GetBuyOrderQueue() []int64 {
	if m != nil {
		return m.BuyOrderQueue
	}
	return nil
}

func (m *MDWarrant) GetSellOrderQueue() []int64 {
	if m != nil {
		return m.SellOrderQueue
	}
	return nil
}

func (m *MDWarrant) GetBuyNumOrdersQueue() []int64 {
	if m != nil {
		return m.BuyNumOrdersQueue
	}
	return nil
}

func (m *MDWarrant) GetSellNumOrdersQueue() []int64 {
	if m != nil {
		return m.SellNumOrdersQueue
	}
	return nil
}

func (m *MDWarrant) GetNorminalPx() int64 {
	if m != nil {
		return m.NorminalPx
	}
	return 0
}

func (m *MDWarrant) GetShortSellSharesTraded() int64 {
	if m != nil {
		return m.ShortSellSharesTraded
	}
	return 0
}

func (m *MDWarrant) GetShortSellTurnover() int64 {
	if m != nil {
		return m.ShortSellTurnover
	}
	return 0
}

func init() {
	proto.RegisterType((*MDWarrant)(nil), "com.htsc.mdc.insight.model.MDWarrant")
}

func init() { proto.RegisterFile("MDWarrant.proto", fileDescriptor_833c4fcca4e8a14c) }

var fileDescriptor_833c4fcca4e8a14c = []byte{
	// 912 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0x5b, 0x6f, 0xdb, 0x36,
	0x14, 0x86, 0x9a, 0x25, 0x9d, 0xd9, 0x5c, 0x6c, 0x26, 0x4d, 0xb9, 0x2c, 0xeb, 0xdc, 0xac, 0xed,
	0xbc, 0x60, 0x10, 0x32, 0xb7, 0xeb, 0xee, 0x0f, 0xb5, 0x1d, 0x20, 0x03, 0x6a, 0x57, 0xb1, 0x8d,
	0xf5, 0x99, 0x95, 0x59, 0x4b, 0x80, 0x25, 0x1a, 0x14, 0xd9, 0x4a, 0xff, 0x66, 0x2f, 0xfb, 0x9f,
	0x03, 0x0f, 0x69, 0x5d, 0xdd, 0xbc, 0xf9, 0x7c, 0x97, 0xe3, 0x8f, 0x47, 0x24, 0x25, 0x74, 0x34,
	0x1e, 0xbd, 0xa3, 0x42, 0xd0, 0x58, 0xba, 0x6b, 0xc1, 0x25, 0xc7, 0x67, 0x3e, 0x8f, 0xdc, 0x40,
	0x26, 0xbe, 0x1b, 0x2d, 0x7c, 0x37, 0x8c, 0x93, 0x70, 0x19, 0x48, 0x37, 0xe2, 0x0b, 0xb6, 0x3a,
	0x7b, 0x74, 0x3d, 0x63, 0xbe, 0x12, 0xa1, 0xcc, 0xfe, 0x1e, 0xcd, 0xb8, 0x12, 0x3e, 0x33, 0xa6,
	0xb3, 0xe3, 0x9c, 0x98, 0x67, 0x6b, 0x0b, 0x5e, 0xfc, 0xd7, 0x41, 0xad, 0xbc, 0x3b, 0x7e, 0x8e,
	0x0e, 0x6f, 0xe6, 0xb3, 0x61, 0xd1, 0x80, 0x38, 0x5d, 0xa7, 0xd7, 0x9a, 0xd6, 0x50, 0x7c, 0x8a,
	0xf6, 0xc6, 0xa3, 0x11, 0x95, 0x8c, 0xdc, 0xeb, 0x3a, 0xbd, 0xdd, 0xa9, 0xad, 0x0c, 0x3e, 0x0f,
	0x23, 0x46, 0x76, 0x36, 0xb8, 0xae, 0xf0, 0x53, 0x74, 0x30, 0xa2, 0x92, 0xea, 0xdf, 0x89, 0xa4,
	0xd1, 0x9a, 0x7c, 0xd1, 0x75, 0x7a, 0x3b, 0xd3, 0x2a, 0x88, 0x2f, 0x51, 0x7b, 0x2e, 0xe8, 0x22,
	0x8c, 0x97, 0x5e, 0x40, 0x13, 0x36, 0xe4, 0x0b, 0x46, 0x76, 0xe1, 0xff, 0x1b, 0x38, 0xbe, 0x45,
	0xed, 0xa4, 0xb6, 0x4c, 0xb2, 0xd7, 0x75, 0x7a, 0x87, 0xfd, 0x67, 0x6e, 0x65, 0x38, 0x30, 0x14,
	0xb7, 0x31, 0x93, 0x69, 0xc3, 0x8e, 0xaf, 0xd1, 0x7e, 0x52, 0x1a, 0x10, 0xb9, 0x0f, 0xed, 0x9e,
	0xdc, 0xd9, 0x4e, 0x0b, 0xa7, 0x15, 0x1b, 0x3e, 0x41, 0xbb, 0x63, 0x9a, 0x7a, 0x29, 0xf9, 0x12,
	0xd6, 0x68, 0x0a, 0x40, 0xc3, 0xd8, 0x4b, 0x49, 0xcb, 0xa2, 0xba, 0xc0, 0x8f, 0x11, 0xf2, 0x04,
	0x1b, 0xae, 0x78, 0xc2, 0xbc, 0x94, 0x20, 0xa0, 0x4a, 0x08, 0x3e, 0x47, 0xad, 0x89, 0x8a, 0xf4,
	0xe2, 0x59, 0x42, 0x1e, 0x00, 0x5d, 0x00, 0x30, 0x2f, 0x2e, 0xe9, 0xea, 0x1f, 0xbe, 0x52, 0x11,
	0x03, 0x90, 0xec, 0x83, 0xa8, 0x81, 0xe3, 0x1e, 0x3a, 0x32, 0x18, 0x5d, 0x29, 0x2b, 0x3d, 0x00,
	0x69, 0x1d, 0xd6, 0xcf, 0xf0, 0x0d, 0x4d, 0xa4, 0x97, 0x92, 0x43, 0x10, 0xd8, 0x4a, 0xe3, 0x6f,
	0xd7, 0x4c, 0x2f, 0xe1, 0xc8, 0xe0, 0xa6, 0xc2, 0x04, 0xdd, 0xdf, 0x2c, 0xa0, 0x0d, 0xc4, 0xa6,
	0xd4, 0x8e, 0x9b, 0x70, 0x19, 0x78, 0x29, 0xe9, 0x18, 0x87, 0xa9, 0xf4, 0x2c, 0xde, 0xf0, 0x4f,
	0x5e, 0x4a, 0xb0, 0x99, 0x05, 0x14, 0xba, 0xcf, 0x28, 0xfc, 0xf0, 0xc1, 0x4b, 0x7f, 0x22, 0xc7,
	0xa6, 0x8f, 0x2d, 0x0b, 0xa6, 0x4f, 0x4e, 0xca, 0x4c, 0x1f, 0x77, 0xd1, 0x03, 0x88, 0x3f, 0x50,
	0xd9, 0xad, 0xcc, 0xc8, 0x43, 0x60, 0xcb, 0x10, 0xbe, 0x40, 0xfb, 0x50, 0xce, 0xd8, 0x6a, 0xa5,
	0x25, 0xa7, 0x20, 0xa9, 0x60, 0x7a, 0x8e, 0xef, 0x98, 0x3e, 0x41, 0x6c, 0xf1, 0xfa, 0xe3, 0x72,
	0xa0, 0x32, 0x2f, 0x25, 0x8f, 0xcc, 0x1c, 0xeb, 0x38, 0xfe, 0x11, 0x75, 0x4a, 0x98, 0xee, 0xe0,
	0xa5, 0x84, 0x80, 0xb8, 0x49, 0x80, 0x3a, 0x94, 0xc1, 0x42, 0xd0, 0x4f, 0x03, 0x95, 0x4d, 0x54,
	0xf4, 0x9e, 0x09, 0xf2, 0x95, 0x55, 0xd7, 0x89, 0x9a, 0xfa, 0x75, 0xc4, 0x55, 0x2c, 0xc9, 0x59,
	0x43, 0x6d, 0x08, 0x48, 0x5d, 0x80, 0x63, 0x1e, 0xb3, 0x8c, 0x7c, 0x6d, 0x53, 0xd7, 0x70, 0xec,
	0x22, 0xbc, 0xc1, 0x74, 0x32, 0x1b, 0xe4, 0x1c, 0xd4, 0x5b, 0x98, 0xba, 0xde, 0x46, 0xf9, 0xa6,
	0xa9, 0xb7, 0x59, 0x4a, 0xc9, 0x35, 0x6a, 0xc2, 0x3c, 0xae, 0x26, 0xcf, 0x09, 0x7d, 0xcb, 0x6c,
	0x1e, 0x91, 0x4d, 0xf2, 0x2d, 0x48, 0x6b, 0x68, 0xbe, 0x67, 0x4b, 0x91, 0xbb, 0xa5, 0x3d, 0x5b,
	0xca, 0x7b, 0x85, 0x8e, 0x07, 0x2a, 0x83, 0xfd, 0x3b, 0xa6, 0xe9, 0x48, 0x09, 0x2a, 0x43, 0x1e,
	0x93, 0x27, 0xa0, 0xde, 0x46, 0xe1, 0x3e, 0x3a, 0xd1, 0xfe, 0x86, 0xe5, 0x02, 0x2c, 0x5b, 0x39,
	0xbd, 0x97, 0x26, 0x2a, 0x1a, 0xa8, 0xec, 0xad, 0x58, 0x30, 0x91, 0x90, 0xef, 0xe0, 0x8e, 0xab,
	0x60, 0xfa, 0xa6, 0x9b, 0xa8, 0x48, 0xdb, 0xad, 0xe8, 0x29, 0x88, 0xaa, 0x20, 0xcc, 0xd7, 0x5c,
	0xb9, 0x9e, 0x60, 0x51, 0xa8, 0xa2, 0xa9, 0xbe, 0x4b, 0x9f, 0xd9, 0xf9, 0x36, 0x18, 0xfc, 0x0a,
	0x9d, 0xc2, 0x92, 0x2d, 0x75, 0x9d, 0x32, 0x5f, 0x49, 0xa6, 0xf7, 0xf3, 0x73, 0xf0, 0x7c, 0x86,
	0xc5, 0x2f, 0xd1, 0xc3, 0x32, 0x33, 0x14, 0x8c, 0x1a, 0xdb, 0xf7, 0x60, 0xdb, 0x4e, 0x36, 0x5c,
	0x34, 0xf6, 0x19, 0x1c, 0x9e, 0xde, 0x16, 0xd7, 0x86, 0xd4, 0xd3, 0xb9, 0x4e, 0xfd, 0x80, 0xc6,
	0x4b, 0x06, 0x6f, 0x86, 0x1f, 0xcc, 0x74, 0xca, 0x58, 0x59, 0x03, 0x6f, 0x89, 0xcb, 0xaa, 0x06,
	0xde, 0x15, 0xe7, 0xa8, 0x35, 0x0c, 0x68, 0x1c, 0xb3, 0xd5, 0x84, 0x93, 0x3e, 0x08, 0x0a, 0x00,
	0xf7, 0xd0, 0x81, 0x3e, 0x88, 0x22, 0xf4, 0xd9, 0xad, 0x62, 0x8a, 0x91, 0x17, 0xdd, 0x9d, 0xde,
	0xce, 0xe0, 0x5e, 0xdb, 0x99, 0x56, 0x09, 0xec, 0xa2, 0xf6, 0xe6, 0xb1, 0xdc, 0xca, 0xcc, 0x88,
	0x5f, 0xe6, 0xe2, 0x06, 0x87, 0x2f, 0xd1, 0x21, 0x9c, 0xda, 0xa2, 0xf5, 0xcf, 0xb9, 0xba, 0xc6,
	0xe0, 0x2b, 0xd4, 0xc9, 0x9f, 0x66, 0xde, 0xfc, 0x55, 0x2e, 0x6f, 0x92, 0x36, 0xb7, 0xc1, 0x40,
	0xfd, 0x4b, 0x25, 0x77, 0x41, 0x6c, 0x72, 0x94, 0xa4, 0xbf, 0x56, 0x73, 0x94, 0xb4, 0x57, 0xa8,
	0x63, 0x8e, 0x8b, 0xd9, 0x57, 0x46, 0xfe, 0x5b, 0x91, 0xa3, 0x41, 0xe2, 0x3e, 0xc2, 0xf6, 0xdc,
	0x94, 0x2d, 0xbf, 0xe7, 0x96, 0x2d, 0xac, 0x7e, 0x4b, 0x4d, 0xb8, 0x88, 0xc2, 0x98, 0xea, 0xcb,
	0xee, 0x0f, 0xf3, 0x96, 0x2a, 0x10, 0xbd, 0x5f, 0x66, 0x01, 0x17, 0x52, 0x5b, 0x67, 0x01, 0x15,
	0x2c, 0x81, 0xa3, 0xb3, 0x20, 0x7f, 0x9a, 0xfd, 0xb2, 0x95, 0xd4, 0x77, 0x46, 0x4e, 0xcc, 0x95,
	0x88, 0xf9, 0x47, 0x26, 0xc8, 0x5f, 0xe6, 0xce, 0x68, 0x10, 0x83, 0x3e, 0xba, 0xe3, 0x9b, 0x67,
	0x50, 0x7c, 0x20, 0x79, 0xfa, 0xab, 0x26, 0xb9, 0x71, 0xfe, 0x75, 0x9c, 0xf7, 0x7b, 0xf0, 0x89,
	0xf3, 0xe2, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x95, 0xc8, 0xaa, 0x3f, 0x09, 0x00, 0x00,
}
