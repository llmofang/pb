// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDOption.proto

/*
Package com_htsc_mdc_insight_model is a generated protocol buffer package.

It is generated from these files:
	MDOption.proto

It has these top-level messages:
	MDOption
*/
package com_htsc_mdc_insight_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import com_htsc_mdc_model "."
import com_htsc_mdc_model1 "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 期权
type MDOption struct {
	HTSCSecurityID       string                               `protobuf:"bytes,1,opt,name=HTSCSecurityID" json:"HTSCSecurityID,omitempty"`
	MDDate               int32                                `protobuf:"varint,2,opt,name=MDDate" json:"MDDate,omitempty"`
	MDTime               int32                                `protobuf:"varint,3,opt,name=MDTime" json:"MDTime,omitempty"`
	DataTimestamp        int64                                `protobuf:"varint,4,opt,name=DataTimestamp" json:"DataTimestamp,omitempty"`
	TradingPhaseCode     string                               `protobuf:"bytes,5,opt,name=TradingPhaseCode" json:"TradingPhaseCode,omitempty"`
	SecurityIDSource     com_htsc_mdc_model.ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType         com_htsc_mdc_model1.ESecurityType    `protobuf:"varint,7,opt,name=securityType,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	MaxPx                int64                                `protobuf:"varint,8,opt,name=MaxPx" json:"MaxPx,omitempty"`
	MinPx                int64                                `protobuf:"varint,9,opt,name=MinPx" json:"MinPx,omitempty"`
	PreClosePx           int64                                `protobuf:"varint,10,opt,name=PreClosePx" json:"PreClosePx,omitempty"`
	NumTrades            int64                                `protobuf:"varint,11,opt,name=NumTrades" json:"NumTrades,omitempty"`
	TotalVolumeTrade     int64                                `protobuf:"varint,12,opt,name=TotalVolumeTrade" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade      int64                                `protobuf:"varint,13,opt,name=TotalValueTrade" json:"TotalValueTrade,omitempty"`
	LastPx               int64                                `protobuf:"varint,14,opt,name=LastPx" json:"LastPx,omitempty"`
	OpenPx               int64                                `protobuf:"varint,15,opt,name=OpenPx" json:"OpenPx,omitempty"`
	ClosePx              int64                                `protobuf:"varint,16,opt,name=ClosePx" json:"ClosePx,omitempty"`
	HighPx               int64                                `protobuf:"varint,17,opt,name=HighPx" json:"HighPx,omitempty"`
	LowPx                int64                                `protobuf:"varint,18,opt,name=LowPx" json:"LowPx,omitempty"`
	DiffPx1              int64                                `protobuf:"varint,19,opt,name=DiffPx1" json:"DiffPx1,omitempty"`
	DiffPx2              int64                                `protobuf:"varint,20,opt,name=DiffPx2" json:"DiffPx2,omitempty"`
	TotalBuyQty          int64                                `protobuf:"varint,21,opt,name=TotalBuyQty" json:"TotalBuyQty,omitempty"`
	TotalSellQty         int64                                `protobuf:"varint,22,opt,name=TotalSellQty" json:"TotalSellQty,omitempty"`
	WeightedAvgBuyPx     int64                                `protobuf:"varint,23,opt,name=WeightedAvgBuyPx" json:"WeightedAvgBuyPx,omitempty"`
	WeightedAvgSellPx    int64                                `protobuf:"varint,24,opt,name=WeightedAvgSellPx" json:"WeightedAvgSellPx,omitempty"`
	WithdrawBuyNumber    int64                                `protobuf:"varint,25,opt,name=WithdrawBuyNumber" json:"WithdrawBuyNumber,omitempty"`
	WithdrawBuyAmount    int64                                `protobuf:"varint,26,opt,name=WithdrawBuyAmount" json:"WithdrawBuyAmount,omitempty"`
	WithdrawBuyMoney     int64                                `protobuf:"varint,27,opt,name=WithdrawBuyMoney" json:"WithdrawBuyMoney,omitempty"`
	WithdrawSellNumber   int64                                `protobuf:"varint,28,opt,name=WithdrawSellNumber" json:"WithdrawSellNumber,omitempty"`
	WithdrawSellAmount   int64                                `protobuf:"varint,29,opt,name=WithdrawSellAmount" json:"WithdrawSellAmount,omitempty"`
	WithdrawSellMoney    int64                                `protobuf:"varint,30,opt,name=WithdrawSellMoney" json:"WithdrawSellMoney,omitempty"`
	TotalBuyNumber       int64                                `protobuf:"varint,31,opt,name=TotalBuyNumber" json:"TotalBuyNumber,omitempty"`
	TotalSellNumber      int64                                `protobuf:"varint,32,opt,name=TotalSellNumber" json:"TotalSellNumber,omitempty"`
	BuyTradeMaxDuration  int64                                `protobuf:"varint,33,opt,name=BuyTradeMaxDuration" json:"BuyTradeMaxDuration,omitempty"`
	SellTradeMaxDuration int64                                `protobuf:"varint,34,opt,name=SellTradeMaxDuration" json:"SellTradeMaxDuration,omitempty"`
	NumBuyOrders         int32                                `protobuf:"varint,35,opt,name=NumBuyOrders" json:"NumBuyOrders,omitempty"`
	NumSellOrders        int32                                `protobuf:"varint,36,opt,name=NumSellOrders" json:"NumSellOrders,omitempty"`
	TradingDate          int32                                `protobuf:"varint,37,opt,name=TradingDate" json:"TradingDate,omitempty"`
	PreOpenInterest      int64                                `protobuf:"varint,38,opt,name=PreOpenInterest" json:"PreOpenInterest,omitempty"`
	PreSettlePrice       int64                                `protobuf:"varint,39,opt,name=PreSettlePrice" json:"PreSettlePrice,omitempty"`
	OpenInterest         int64                                `protobuf:"varint,40,opt,name=OpenInterest" json:"OpenInterest,omitempty"`
	SettlePrice          int64                                `protobuf:"varint,41,opt,name=SettlePrice" json:"SettlePrice,omitempty"`
	PreDelta             int64                                `protobuf:"varint,42,opt,name=PreDelta" json:"PreDelta,omitempty"`
	CurrDelta            int64                                `protobuf:"varint,43,opt,name=CurrDelta" json:"CurrDelta,omitempty"`
	BuyOrderQueue        []int64                              `protobuf:"varint,100,rep,packed,name=BuyOrderQueue" json:"BuyOrderQueue,omitempty"`
	SellOrderQueue       []int64                              `protobuf:"varint,101,rep,packed,name=SellOrderQueue" json:"SellOrderQueue,omitempty"`
	Buy1Price            int64                                `protobuf:"varint,102,opt,name=Buy1Price" json:"Buy1Price,omitempty"`
	Buy1OrderQty         int64                                `protobuf:"varint,103,opt,name=Buy1OrderQty" json:"Buy1OrderQty,omitempty"`
	Buy1NumOrders        int64                                `protobuf:"varint,104,opt,name=Buy1NumOrders" json:"Buy1NumOrders,omitempty"`
	Sell1Price           int64                                `protobuf:"varint,105,opt,name=Sell1Price" json:"Sell1Price,omitempty"`
	Sell1OrderQty        int64                                `protobuf:"varint,106,opt,name=Sell1OrderQty" json:"Sell1OrderQty,omitempty"`
	Sell1NumOrders       int64                                `protobuf:"varint,107,opt,name=Sell1NumOrders" json:"Sell1NumOrders,omitempty"`
	Buy2Price            int64                                `protobuf:"varint,108,opt,name=Buy2Price" json:"Buy2Price,omitempty"`
	Buy2OrderQty         int64                                `protobuf:"varint,109,opt,name=Buy2OrderQty" json:"Buy2OrderQty,omitempty"`
	Buy2NumOrders        int64                                `protobuf:"varint,110,opt,name=Buy2NumOrders" json:"Buy2NumOrders,omitempty"`
	Sell2Price           int64                                `protobuf:"varint,111,opt,name=Sell2Price" json:"Sell2Price,omitempty"`
	Sell2OrderQty        int64                                `protobuf:"varint,112,opt,name=Sell2OrderQty" json:"Sell2OrderQty,omitempty"`
	Sell2NumOrders       int64                                `protobuf:"varint,113,opt,name=Sell2NumOrders" json:"Sell2NumOrders,omitempty"`
	Buy3Price            int64                                `protobuf:"varint,114,opt,name=Buy3Price" json:"Buy3Price,omitempty"`
	Buy3OrderQty         int64                                `protobuf:"varint,115,opt,name=Buy3OrderQty" json:"Buy3OrderQty,omitempty"`
	Buy3NumOrders        int64                                `protobuf:"varint,116,opt,name=Buy3NumOrders" json:"Buy3NumOrders,omitempty"`
	Sell3Price           int64                                `protobuf:"varint,117,opt,name=Sell3Price" json:"Sell3Price,omitempty"`
	Sell3OrderQty        int64                                `protobuf:"varint,118,opt,name=Sell3OrderQty" json:"Sell3OrderQty,omitempty"`
	Sell3NumOrders       int64                                `protobuf:"varint,119,opt,name=Sell3NumOrders" json:"Sell3NumOrders,omitempty"`
	Buy4Price            int64                                `protobuf:"varint,120,opt,name=Buy4Price" json:"Buy4Price,omitempty"`
	Buy4OrderQty         int64                                `protobuf:"varint,121,opt,name=Buy4OrderQty" json:"Buy4OrderQty,omitempty"`
	Buy4NumOrders        int64                                `protobuf:"varint,122,opt,name=Buy4NumOrders" json:"Buy4NumOrders,omitempty"`
	Sell4Price           int64                                `protobuf:"varint,123,opt,name=Sell4Price" json:"Sell4Price,omitempty"`
	Sell4OrderQty        int64                                `protobuf:"varint,124,opt,name=Sell4OrderQty" json:"Sell4OrderQty,omitempty"`
	Sell4NumOrders       int64                                `protobuf:"varint,125,opt,name=Sell4NumOrders" json:"Sell4NumOrders,omitempty"`
	Buy5Price            int64                                `protobuf:"varint,126,opt,name=Buy5Price" json:"Buy5Price,omitempty"`
	Buy5OrderQty         int64                                `protobuf:"varint,127,opt,name=Buy5OrderQty" json:"Buy5OrderQty,omitempty"`
	Buy5NumOrders        int64                                `protobuf:"varint,128,opt,name=Buy5NumOrders" json:"Buy5NumOrders,omitempty"`
	Sell5Price           int64                                `protobuf:"varint,129,opt,name=Sell5Price" json:"Sell5Price,omitempty"`
	Sell5OrderQty        int64                                `protobuf:"varint,130,opt,name=Sell5OrderQty" json:"Sell5OrderQty,omitempty"`
	Sell5NumOrders       int64                                `protobuf:"varint,131,opt,name=Sell5NumOrders" json:"Sell5NumOrders,omitempty"`
}

func (m *MDOption) Reset()                    { *m = MDOption{} }
func (m *MDOption) String() string            { return proto.CompactTextString(m) }
func (*MDOption) ProtoMessage()               {}
func (*MDOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MDOption) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDOption) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDOption) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *MDOption) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *MDOption) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDOption) GetSecurityIDSource() com_htsc_mdc_model.ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return com_htsc_mdc_model.ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDOption) GetSecurityType() com_htsc_mdc_model1.ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return com_htsc_mdc_model1.ESecurityType_DefaultSecurityType
}

func (m *MDOption) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDOption) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func (m *MDOption) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDOption) GetNumTrades() int64 {
	if m != nil {
		return m.NumTrades
	}
	return 0
}

func (m *MDOption) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *MDOption) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *MDOption) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *MDOption) GetOpenPx() int64 {
	if m != nil {
		return m.OpenPx
	}
	return 0
}

func (m *MDOption) GetClosePx() int64 {
	if m != nil {
		return m.ClosePx
	}
	return 0
}

func (m *MDOption) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *MDOption) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *MDOption) GetDiffPx1() int64 {
	if m != nil {
		return m.DiffPx1
	}
	return 0
}

func (m *MDOption) GetDiffPx2() int64 {
	if m != nil {
		return m.DiffPx2
	}
	return 0
}

func (m *MDOption) GetTotalBuyQty() int64 {
	if m != nil {
		return m.TotalBuyQty
	}
	return 0
}

func (m *MDOption) GetTotalSellQty() int64 {
	if m != nil {
		return m.TotalSellQty
	}
	return 0
}

func (m *MDOption) GetWeightedAvgBuyPx() int64 {
	if m != nil {
		return m.WeightedAvgBuyPx
	}
	return 0
}

func (m *MDOption) GetWeightedAvgSellPx() int64 {
	if m != nil {
		return m.WeightedAvgSellPx
	}
	return 0
}

func (m *MDOption) GetWithdrawBuyNumber() int64 {
	if m != nil {
		return m.WithdrawBuyNumber
	}
	return 0
}

func (m *MDOption) GetWithdrawBuyAmount() int64 {
	if m != nil {
		return m.WithdrawBuyAmount
	}
	return 0
}

func (m *MDOption) GetWithdrawBuyMoney() int64 {
	if m != nil {
		return m.WithdrawBuyMoney
	}
	return 0
}

func (m *MDOption) GetWithdrawSellNumber() int64 {
	if m != nil {
		return m.WithdrawSellNumber
	}
	return 0
}

func (m *MDOption) GetWithdrawSellAmount() int64 {
	if m != nil {
		return m.WithdrawSellAmount
	}
	return 0
}

func (m *MDOption) GetWithdrawSellMoney() int64 {
	if m != nil {
		return m.WithdrawSellMoney
	}
	return 0
}

func (m *MDOption) GetTotalBuyNumber() int64 {
	if m != nil {
		return m.TotalBuyNumber
	}
	return 0
}

func (m *MDOption) GetTotalSellNumber() int64 {
	if m != nil {
		return m.TotalSellNumber
	}
	return 0
}

func (m *MDOption) GetBuyTradeMaxDuration() int64 {
	if m != nil {
		return m.BuyTradeMaxDuration
	}
	return 0
}

func (m *MDOption) GetSellTradeMaxDuration() int64 {
	if m != nil {
		return m.SellTradeMaxDuration
	}
	return 0
}

func (m *MDOption) GetNumBuyOrders() int32 {
	if m != nil {
		return m.NumBuyOrders
	}
	return 0
}

func (m *MDOption) GetNumSellOrders() int32 {
	if m != nil {
		return m.NumSellOrders
	}
	return 0
}

func (m *MDOption) GetTradingDate() int32 {
	if m != nil {
		return m.TradingDate
	}
	return 0
}

func (m *MDOption) GetPreOpenInterest() int64 {
	if m != nil {
		return m.PreOpenInterest
	}
	return 0
}

func (m *MDOption) GetPreSettlePrice() int64 {
	if m != nil {
		return m.PreSettlePrice
	}
	return 0
}

func (m *MDOption) GetOpenInterest() int64 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *MDOption) GetSettlePrice() int64 {
	if m != nil {
		return m.SettlePrice
	}
	return 0
}

func (m *MDOption) GetPreDelta() int64 {
	if m != nil {
		return m.PreDelta
	}
	return 0
}

func (m *MDOption) GetCurrDelta() int64 {
	if m != nil {
		return m.CurrDelta
	}
	return 0
}

func (m *MDOption) GetBuyOrderQueue() []int64 {
	if m != nil {
		return m.BuyOrderQueue
	}
	return nil
}

func (m *MDOption) GetSellOrderQueue() []int64 {
	if m != nil {
		return m.SellOrderQueue
	}
	return nil
}

func (m *MDOption) GetBuy1Price() int64 {
	if m != nil {
		return m.Buy1Price
	}
	return 0
}

func (m *MDOption) GetBuy1OrderQty() int64 {
	if m != nil {
		return m.Buy1OrderQty
	}
	return 0
}

func (m *MDOption) GetBuy1NumOrders() int64 {
	if m != nil {
		return m.Buy1NumOrders
	}
	return 0
}

func (m *MDOption) GetSell1Price() int64 {
	if m != nil {
		return m.Sell1Price
	}
	return 0
}

func (m *MDOption) GetSell1OrderQty() int64 {
	if m != nil {
		return m.Sell1OrderQty
	}
	return 0
}

func (m *MDOption) GetSell1NumOrders() int64 {
	if m != nil {
		return m.Sell1NumOrders
	}
	return 0
}

func (m *MDOption) GetBuy2Price() int64 {
	if m != nil {
		return m.Buy2Price
	}
	return 0
}

func (m *MDOption) GetBuy2OrderQty() int64 {
	if m != nil {
		return m.Buy2OrderQty
	}
	return 0
}

func (m *MDOption) GetBuy2NumOrders() int64 {
	if m != nil {
		return m.Buy2NumOrders
	}
	return 0
}

func (m *MDOption) GetSell2Price() int64 {
	if m != nil {
		return m.Sell2Price
	}
	return 0
}

func (m *MDOption) GetSell2OrderQty() int64 {
	if m != nil {
		return m.Sell2OrderQty
	}
	return 0
}

func (m *MDOption) GetSell2NumOrders() int64 {
	if m != nil {
		return m.Sell2NumOrders
	}
	return 0
}

func (m *MDOption) GetBuy3Price() int64 {
	if m != nil {
		return m.Buy3Price
	}
	return 0
}

func (m *MDOption) GetBuy3OrderQty() int64 {
	if m != nil {
		return m.Buy3OrderQty
	}
	return 0
}

func (m *MDOption) GetBuy3NumOrders() int64 {
	if m != nil {
		return m.Buy3NumOrders
	}
	return 0
}

func (m *MDOption) GetSell3Price() int64 {
	if m != nil {
		return m.Sell3Price
	}
	return 0
}

func (m *MDOption) GetSell3OrderQty() int64 {
	if m != nil {
		return m.Sell3OrderQty
	}
	return 0
}

func (m *MDOption) GetSell3NumOrders() int64 {
	if m != nil {
		return m.Sell3NumOrders
	}
	return 0
}

func (m *MDOption) GetBuy4Price() int64 {
	if m != nil {
		return m.Buy4Price
	}
	return 0
}

func (m *MDOption) GetBuy4OrderQty() int64 {
	if m != nil {
		return m.Buy4OrderQty
	}
	return 0
}

func (m *MDOption) GetBuy4NumOrders() int64 {
	if m != nil {
		return m.Buy4NumOrders
	}
	return 0
}

func (m *MDOption) GetSell4Price() int64 {
	if m != nil {
		return m.Sell4Price
	}
	return 0
}

func (m *MDOption) GetSell4OrderQty() int64 {
	if m != nil {
		return m.Sell4OrderQty
	}
	return 0
}

func (m *MDOption) GetSell4NumOrders() int64 {
	if m != nil {
		return m.Sell4NumOrders
	}
	return 0
}

func (m *MDOption) GetBuy5Price() int64 {
	if m != nil {
		return m.Buy5Price
	}
	return 0
}

func (m *MDOption) GetBuy5OrderQty() int64 {
	if m != nil {
		return m.Buy5OrderQty
	}
	return 0
}

func (m *MDOption) GetBuy5NumOrders() int64 {
	if m != nil {
		return m.Buy5NumOrders
	}
	return 0
}

func (m *MDOption) GetSell5Price() int64 {
	if m != nil {
		return m.Sell5Price
	}
	return 0
}

func (m *MDOption) GetSell5OrderQty() int64 {
	if m != nil {
		return m.Sell5OrderQty
	}
	return 0
}

func (m *MDOption) GetSell5NumOrders() int64 {
	if m != nil {
		return m.Sell5NumOrders
	}
	return 0
}

func init() {
	proto.RegisterType((*MDOption)(nil), "com.htsc.mdc.insight.model.MDOption")
}

func init() { proto.RegisterFile("MDOption.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x96, 0xff, 0x52, 0xdb, 0x46,
	0x10, 0xc7, 0x47, 0xa5, 0x10, 0x38, 0x08, 0x21, 0x07, 0x49, 0xae, 0x34, 0x4d, 0x1c, 0x1a, 0x12,
	0x37, 0xed, 0x78, 0x8a, 0x64, 0x1e, 0x20, 0xc6, 0x99, 0x21, 0x33, 0xb1, 0x11, 0x36, 0xd3, 0xfe,
	0xad, 0xd8, 0x87, 0xad, 0x56, 0xb2, 0x5c, 0xe9, 0x2e, 0x48, 0xfd, 0xfd, 0xe3, 0x45, 0xfa, 0x74,
	0x7d, 0x8e, 0xce, 0xde, 0x9d, 0xef, 0x4e, 0x27, 0x26, 0xff, 0xb1, 0xdf, 0xdd, 0xdb, 0xef, 0x7e,
	0xd6, 0xd2, 0x21, 0xb4, 0x3b, 0xe8, 0x5f, 0x2c, 0x59, 0x9c, 0x2d, 0x3a, 0xcb, 0x3c, 0x63, 0x19,
	0x3e, 0x9c, 0x64, 0x69, 0x67, 0xce, 0x8a, 0x49, 0x27, 0x9d, 0x4e, 0x3a, 0xf1, 0xa2, 0x88, 0x67,
	0x73, 0xd6, 0x49, 0xb3, 0x29, 0x4d, 0x0e, 0x1f, 0xbd, 0x19, 0xd3, 0x09, 0xcf, 0x63, 0x56, 0xbd,
	0xed, 0x8f, 0x33, 0x9e, 0x4f, 0xa8, 0x3c, 0x74, 0xb8, 0xaf, 0x13, 0x57, 0xd5, 0x52, 0x89, 0x47,
	0xff, 0x3d, 0x40, 0x9b, 0xab, 0xe6, 0xf8, 0x05, 0xda, 0x3d, 0xbf, 0x1a, 0x9f, 0x99, 0xf3, 0xc4,
	0x6b, 0x79, 0xed, 0xad, 0x91, 0xa3, 0xe2, 0x87, 0x68, 0x63, 0xd0, 0xef, 0x47, 0x8c, 0x92, 0x4f,
	0x5a, 0x5e, 0x7b, 0x7d, 0xa4, 0x22, 0xa9, 0x5f, 0xc5, 0x29, 0x25, 0x6b, 0x2b, 0x1d, 0x22, 0xfc,
	0x1c, 0xdd, 0xed, 0x47, 0x2c, 0x82, 0xbf, 0x0b, 0x16, 0xa5, 0x4b, 0xf2, 0x69, 0xcb, 0x6b, 0xaf,
	0x8d, 0xea, 0x22, 0x7e, 0x85, 0xf6, 0xae, 0xf2, 0x68, 0x1a, 0x2f, 0x66, 0xe1, 0x3c, 0x2a, 0xe8,
	0x59, 0x36, 0xa5, 0x64, 0x5d, 0xf8, 0x37, 0x74, 0x7c, 0x89, 0xf6, 0x0a, 0x87, 0x92, 0x6c, 0xb4,
	0xbc, 0xf6, 0xae, 0x7f, 0xdc, 0xa9, 0xed, 0x46, 0xec, 0xa4, 0xd3, 0x58, 0xc9, 0xa8, 0x71, 0x1c,
	0xbf, 0x41, 0x3b, 0x85, 0xb5, 0x1f, 0x72, 0x47, 0xb4, 0x7b, 0xf6, 0xd1, 0x76, 0x50, 0x38, 0xaa,
	0x1d, 0xc3, 0x07, 0x68, 0x7d, 0x10, 0x95, 0x61, 0x49, 0x36, 0x05, 0xa3, 0x0c, 0x84, 0x1a, 0x2f,
	0xc2, 0x92, 0x6c, 0x29, 0x15, 0x02, 0xfc, 0x04, 0xa1, 0x30, 0xa7, 0x67, 0x49, 0x56, 0xd0, 0xb0,
	0x24, 0x48, 0xa4, 0x2c, 0x05, 0x3f, 0x46, 0x5b, 0x43, 0x9e, 0x02, 0x3c, 0x2d, 0xc8, 0xb6, 0x48,
	0x1b, 0x41, 0xec, 0x2b, 0x63, 0x51, 0xf2, 0x5d, 0x96, 0xf0, 0x94, 0x0a, 0x91, 0xec, 0x88, 0xa2,
	0x86, 0x8e, 0xdb, 0xe8, 0x9e, 0xd4, 0xa2, 0x84, 0xab, 0xd2, 0xbb, 0xa2, 0xd4, 0x95, 0xe1, 0x37,
	0x7c, 0x17, 0x15, 0x2c, 0x2c, 0xc9, 0xae, 0x28, 0x50, 0x11, 0xe8, 0x17, 0x4b, 0x0a, 0x08, 0xf7,
	0xa4, 0x2e, 0x23, 0x4c, 0xd0, 0x9d, 0x15, 0xc0, 0x9e, 0x48, 0xac, 0x42, 0x38, 0x71, 0x1e, 0xcf,
	0xe6, 0x61, 0x49, 0xee, 0xcb, 0x13, 0x32, 0x82, 0x5d, 0xbc, 0xcb, 0x6e, 0xc2, 0x92, 0x60, 0xb9,
	0x0b, 0x11, 0x40, 0x9f, 0x7e, 0x7c, 0x7d, 0x1d, 0x96, 0x27, 0x64, 0x5f, 0xf6, 0x51, 0xa1, 0xc9,
	0xf8, 0xe4, 0xc0, 0xce, 0xf8, 0xb8, 0x85, 0xb6, 0xc5, 0xf8, 0x3d, 0x5e, 0x5d, 0xb2, 0x8a, 0x3c,
	0x10, 0x59, 0x5b, 0xc2, 0x47, 0x68, 0x47, 0x84, 0x63, 0x9a, 0x24, 0x50, 0xf2, 0x50, 0x94, 0xd4,
	0x34, 0xd8, 0xe3, 0xf7, 0x14, 0x5e, 0x20, 0x3a, 0x7d, 0xfd, 0x61, 0xd6, 0xe3, 0x55, 0x58, 0x92,
	0x47, 0x72, 0x8f, 0xae, 0x8e, 0xbf, 0x41, 0xf7, 0x2d, 0x0d, 0x3a, 0x84, 0x25, 0x21, 0xa2, 0xb8,
	0x99, 0x10, 0xd5, 0x31, 0x9b, 0x4f, 0xf3, 0xe8, 0xa6, 0xc7, 0xab, 0x21, 0x4f, 0xdf, 0xd3, 0x9c,
	0x7c, 0xa6, 0xaa, 0xdd, 0x84, 0x53, 0xfd, 0x3a, 0xcd, 0xf8, 0x82, 0x91, 0xc3, 0x46, 0xb5, 0x4c,
	0x88, 0xa9, 0x8d, 0x38, 0xc8, 0x16, 0xb4, 0x22, 0x9f, 0xab, 0xa9, 0x1d, 0x1d, 0x77, 0x10, 0x5e,
	0x69, 0x30, 0x99, 0x1a, 0xe4, 0xb1, 0xa8, 0xbe, 0x25, 0xe3, 0xd6, 0xab, 0x51, 0xbe, 0x68, 0xd6,
	0xab, 0x59, 0xac, 0xc9, 0x41, 0x95, 0xc3, 0x3c, 0xa9, 0x4f, 0xae, 0x13, 0x70, 0xcb, 0xac, 0x7e,
	0x22, 0x35, 0xc9, 0x53, 0x51, 0xea, 0xa8, 0xfa, 0x99, 0xb5, 0x46, 0x6e, 0x59, 0xcf, 0xac, 0x35,
	0xef, 0xb7, 0x68, 0xbf, 0xc7, 0x2b, 0xf1, 0xfc, 0x0e, 0xa2, 0xb2, 0xcf, 0xf3, 0x08, 0xae, 0x33,
	0xf2, 0x4c, 0x54, 0xdf, 0x96, 0xc2, 0x3e, 0x3a, 0x80, 0xf3, 0x8d, 0x23, 0x47, 0xe2, 0xc8, 0xad,
	0x39, 0x78, 0x96, 0x86, 0x3c, 0xed, 0xf1, 0xea, 0x22, 0x9f, 0xd2, 0xbc, 0x20, 0x5f, 0x8a, 0x3b,
	0xae, 0xa6, 0xc1, 0x4d, 0x37, 0xe4, 0x29, 0x1c, 0x57, 0x45, 0xcf, 0x45, 0x51, 0x5d, 0x14, 0xcf,
	0xad, 0xbc, 0xd1, 0xc4, 0x25, 0x7a, 0x2c, 0x6a, 0x6c, 0x09, 0xd8, 0xc3, 0x9c, 0xc2, 0x2b, 0xf6,
	0x76, 0xc1, 0x68, 0x4e, 0x0b, 0x46, 0x5e, 0x48, 0x76, 0x47, 0x86, 0x6d, 0x86, 0x39, 0x1d, 0x53,
	0xc6, 0x12, 0x1a, 0xe6, 0xf1, 0x84, 0x92, 0x97, 0x72, 0x9b, 0x75, 0x15, 0xa6, 0xaf, 0xb5, 0x6b,
	0xcb, 0x37, 0xa1, 0xd6, 0xab, 0x85, 0xb6, 0xed, 0x46, 0x5f, 0xc9, 0xf7, 0xc9, 0xee, 0x72, 0x88,
	0x36, 0xc3, 0x9c, 0xf6, 0x69, 0xc2, 0x22, 0xf2, 0x4a, 0xa4, 0x75, 0x0c, 0xb7, 0xd5, 0x19, 0xcf,
	0x73, 0x99, 0xfc, 0x5a, 0xde, 0x56, 0x5a, 0x80, 0xcd, 0xac, 0xd6, 0x74, 0xc9, 0x29, 0xa7, 0x64,
	0xda, 0x5a, 0x83, 0xff, 0x01, 0x35, 0x11, 0x68, 0xf4, 0x9e, 0x64, 0x19, 0x15, 0x65, 0x8e, 0x0a,
	0x5e, 0x3d, 0x5e, 0x9d, 0xc8, 0x39, 0xaf, 0xa5, 0x97, 0x16, 0x80, 0x15, 0x02, 0x59, 0xcf, 0x2a,
	0x32, 0x93, 0xac, 0xb6, 0xa6, 0xe6, 0x39, 0x19, 0xf2, 0x54, 0xfd, 0x52, 0x73, 0xf9, 0x3f, 0xa9,
	0x26, 0xc2, 0x0d, 0x0d, 0xce, 0xca, 0x28, 0x96, 0x37, 0xb4, 0x51, 0xa0, 0x8b, 0x88, 0xb4, 0xd5,
	0x0f, 0xb2, 0x4b, 0x4d, 0x5c, 0x51, 0x59, 0x66, 0x3f, 0xca, 0xdf, 0xa8, 0xae, 0x2a, 0x2a, 0x5f,
	0x9a, 0x25, 0x9a, 0xca, 0xb7, 0xa9, 0x7c, 0x6d, 0x95, 0x6a, 0x2a, 0xdf, 0xa1, 0xf2, 0x8d, 0xd1,
	0x42, 0x53, 0xf9, 0x0d, 0x2a, 0x65, 0x94, 0x19, 0x2a, 0xbf, 0x46, 0x65, 0xac, 0x96, 0x86, 0xca,
	0x77, 0xa9, 0x2c, 0xb3, 0x9f, 0x0c, 0x95, 0xef, 0x52, 0x05, 0xd2, 0x2c, 0xd7, 0x54, 0x81, 0x4d,
	0x15, 0x68, 0xab, 0x42, 0x53, 0x05, 0x0e, 0x55, 0x60, 0x8c, 0x98, 0xa6, 0x0a, 0x1a, 0x54, 0xca,
	0x88, 0x1b, 0xaa, 0xa0, 0x46, 0x65, 0xac, 0x3e, 0x18, 0xaa, 0xc0, 0xa5, 0xb2, 0xcc, 0x6e, 0x0c,
	0x55, 0xe0, 0x52, 0x75, 0xa5, 0x59, 0xa9, 0xa9, 0xba, 0x36, 0x55, 0x57, 0x5b, 0x55, 0x9a, 0xaa,
	0xeb, 0x50, 0x75, 0x8d, 0xd1, 0xcf, 0x9a, 0xaa, 0xdb, 0xa0, 0x52, 0x46, 0xbf, 0x18, 0xaa, 0x6e,
	0x8d, 0xca, 0x58, 0xfd, 0x6a, 0xa8, 0xba, 0x2e, 0x95, 0x65, 0xf6, 0x9b, 0xa1, 0xea, 0xba, 0x54,
	0xa7, 0xd2, 0xec, 0x77, 0x4d, 0x75, 0x6a, 0x53, 0x9d, 0x6a, 0xab, 0x3f, 0x34, 0x95, 0xd6, 0xf0,
	0xb1, 0xa0, 0x3a, 0x35, 0x46, 0x7f, 0x7a, 0x1a, 0xcb, 0xa8, 0xf8, 0xa9, 0xc4, 0x52, 0x4e, 0x7f,
	0x79, 0x86, 0x4b, 0x79, 0x1d, 0x4b, 0x2e, 0x63, 0xf6, 0xb7, 0x67, 0xc0, 0x8c, 0xdd, 0x4b, 0x09,
	0x66, 0xf9, 0xfd, 0xe3, 0x19, 0x32, 0x23, 0xf7, 0x4e, 0xd0, 0x47, 0x3e, 0x9a, 0x7b, 0xfa, 0x03,
	0x3b, 0x84, 0xaf, 0xe2, 0xe2, 0xdc, 0xfb, 0xd7, 0xf3, 0xde, 0x6f, 0x88, 0x4f, 0xe4, 0xe0, 0xff,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x12, 0x39, 0xd8, 0x9e, 0x7e, 0x0b, 0x00, 0x00,
}
