// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDOption.proto

package com_htsc_mdc_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//期权
type MDOption struct {
	HTSCSecurityID       string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate               int32             `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime               int32             `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp        int64             `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	TradingPhaseCode     string            `protobuf:"bytes,5,opt,name=TradingPhaseCode,proto3" json:"TradingPhaseCode,omitempty"`
	SecurityIDSource     ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType         ESecurityType     `protobuf:"varint,7,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	MaxPx                int64             `protobuf:"varint,8,opt,name=MaxPx,proto3" json:"MaxPx,omitempty"`
	MinPx                int64             `protobuf:"varint,9,opt,name=MinPx,proto3" json:"MinPx,omitempty"`
	PreClosePx           int64             `protobuf:"varint,10,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	NumTrades            int64             `protobuf:"varint,11,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	TotalVolumeTrade     int64             `protobuf:"varint,12,opt,name=TotalVolumeTrade,proto3" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade      int64             `protobuf:"varint,13,opt,name=TotalValueTrade,proto3" json:"TotalValueTrade,omitempty"`
	LastPx               int64             `protobuf:"varint,14,opt,name=LastPx,proto3" json:"LastPx,omitempty"`
	OpenPx               int64             `protobuf:"varint,15,opt,name=OpenPx,proto3" json:"OpenPx,omitempty"`
	ClosePx              int64             `protobuf:"varint,16,opt,name=ClosePx,proto3" json:"ClosePx,omitempty"`
	HighPx               int64             `protobuf:"varint,17,opt,name=HighPx,proto3" json:"HighPx,omitempty"`
	LowPx                int64             `protobuf:"varint,18,opt,name=LowPx,proto3" json:"LowPx,omitempty"`
	DiffPx1              int64             `protobuf:"varint,19,opt,name=DiffPx1,proto3" json:"DiffPx1,omitempty"`
	DiffPx2              int64             `protobuf:"varint,20,opt,name=DiffPx2,proto3" json:"DiffPx2,omitempty"`
	TotalBuyQty          int64             `protobuf:"varint,21,opt,name=TotalBuyQty,proto3" json:"TotalBuyQty,omitempty"`
	TotalSellQty         int64             `protobuf:"varint,22,opt,name=TotalSellQty,proto3" json:"TotalSellQty,omitempty"`
	WeightedAvgBuyPx     int64             `protobuf:"varint,23,opt,name=WeightedAvgBuyPx,proto3" json:"WeightedAvgBuyPx,omitempty"`
	WeightedAvgSellPx    int64             `protobuf:"varint,24,opt,name=WeightedAvgSellPx,proto3" json:"WeightedAvgSellPx,omitempty"`
	WithdrawBuyNumber    int64             `protobuf:"varint,25,opt,name=WithdrawBuyNumber,proto3" json:"WithdrawBuyNumber,omitempty"`
	WithdrawBuyAmount    int64             `protobuf:"varint,26,opt,name=WithdrawBuyAmount,proto3" json:"WithdrawBuyAmount,omitempty"`
	WithdrawBuyMoney     int64             `protobuf:"varint,27,opt,name=WithdrawBuyMoney,proto3" json:"WithdrawBuyMoney,omitempty"`
	WithdrawSellNumber   int64             `protobuf:"varint,28,opt,name=WithdrawSellNumber,proto3" json:"WithdrawSellNumber,omitempty"`
	WithdrawSellAmount   int64             `protobuf:"varint,29,opt,name=WithdrawSellAmount,proto3" json:"WithdrawSellAmount,omitempty"`
	WithdrawSellMoney    int64             `protobuf:"varint,30,opt,name=WithdrawSellMoney,proto3" json:"WithdrawSellMoney,omitempty"`
	TotalBuyNumber       int64             `protobuf:"varint,31,opt,name=TotalBuyNumber,proto3" json:"TotalBuyNumber,omitempty"`
	TotalSellNumber      int64             `protobuf:"varint,32,opt,name=TotalSellNumber,proto3" json:"TotalSellNumber,omitempty"`
	BuyTradeMaxDuration  int64             `protobuf:"varint,33,opt,name=BuyTradeMaxDuration,proto3" json:"BuyTradeMaxDuration,omitempty"`
	SellTradeMaxDuration int64             `protobuf:"varint,34,opt,name=SellTradeMaxDuration,proto3" json:"SellTradeMaxDuration,omitempty"`
	NumBuyOrders         int32             `protobuf:"varint,35,opt,name=NumBuyOrders,proto3" json:"NumBuyOrders,omitempty"`
	NumSellOrders        int32             `protobuf:"varint,36,opt,name=NumSellOrders,proto3" json:"NumSellOrders,omitempty"`
	TradingDate          int32             `protobuf:"varint,37,opt,name=TradingDate,proto3" json:"TradingDate,omitempty"`
	PreOpenInterest      int64             `protobuf:"varint,38,opt,name=PreOpenInterest,proto3" json:"PreOpenInterest,omitempty"`
	PreSettlePrice       int64             `protobuf:"varint,39,opt,name=PreSettlePrice,proto3" json:"PreSettlePrice,omitempty"`
	OpenInterest         int64             `protobuf:"varint,40,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	SettlePrice          int64             `protobuf:"varint,41,opt,name=SettlePrice,proto3" json:"SettlePrice,omitempty"`
	PreDelta             int64             `protobuf:"varint,42,opt,name=PreDelta,proto3" json:"PreDelta,omitempty"`
	CurrDelta            int64             `protobuf:"varint,43,opt,name=CurrDelta,proto3" json:"CurrDelta,omitempty"`
	ExchangeDate         int32             `protobuf:"varint,44,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime         int32             `protobuf:"varint,45,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	ChannelNo            int32             `protobuf:"varint,50,opt,name=ChannelNo,proto3" json:"ChannelNo,omitempty"`
	BuyPriceQueue        []int64           `protobuf:"varint,51,rep,packed,name=BuyPriceQueue,proto3" json:"BuyPriceQueue,omitempty"`
	BuyOrderQtyQueue     []int64           `protobuf:"varint,52,rep,packed,name=BuyOrderQtyQueue,proto3" json:"BuyOrderQtyQueue,omitempty"`
	SellPriceQueue       []int64           `protobuf:"varint,53,rep,packed,name=SellPriceQueue,proto3" json:"SellPriceQueue,omitempty"`
	SellOrderQtyQueue    []int64           `protobuf:"varint,54,rep,packed,name=SellOrderQtyQueue,proto3" json:"SellOrderQtyQueue,omitempty"`
	BuyOrderQueue        []int64           `protobuf:"varint,55,rep,packed,name=BuyOrderQueue,proto3" json:"BuyOrderQueue,omitempty"`
	SellOrderQueue       []int64           `protobuf:"varint,56,rep,packed,name=SellOrderQueue,proto3" json:"SellOrderQueue,omitempty"`
	BuyNumOrdersQueue    []int64           `protobuf:"varint,57,rep,packed,name=BuyNumOrdersQueue,proto3" json:"BuyNumOrdersQueue,omitempty"`
	SellNumOrdersQueue   []int64           `protobuf:"varint,58,rep,packed,name=SellNumOrdersQueue,proto3" json:"SellNumOrdersQueue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MDOption) Reset()         { *m = MDOption{} }
func (m *MDOption) String() string { return proto.CompactTextString(m) }
func (*MDOption) ProtoMessage()    {}
func (*MDOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_77ea9d6844cbe0de, []int{0}
}

func (m *MDOption) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDOption.Unmarshal(m, b)
}
func (m *MDOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDOption.Marshal(b, m, deterministic)
}
func (m *MDOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDOption.Merge(m, src)
}
func (m *MDOption) XXX_Size() int {
	return xxx_messageInfo_MDOption.Size(m)
}
func (m *MDOption) XXX_DiscardUnknown() {
	xxx_messageInfo_MDOption.DiscardUnknown(m)
}

var xxx_messageInfo_MDOption proto.InternalMessageInfo

func (m *MDOption) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDOption) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDOption) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *MDOption) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *MDOption) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDOption) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDOption) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *MDOption) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDOption) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func (m *MDOption) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDOption) GetNumTrades() int64 {
	if m != nil {
		return m.NumTrades
	}
	return 0
}

func (m *MDOption) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *MDOption) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *MDOption) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *MDOption) GetOpenPx() int64 {
	if m != nil {
		return m.OpenPx
	}
	return 0
}

func (m *MDOption) GetClosePx() int64 {
	if m != nil {
		return m.ClosePx
	}
	return 0
}

func (m *MDOption) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *MDOption) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *MDOption) GetDiffPx1() int64 {
	if m != nil {
		return m.DiffPx1
	}
	return 0
}

func (m *MDOption) GetDiffPx2() int64 {
	if m != nil {
		return m.DiffPx2
	}
	return 0
}

func (m *MDOption) GetTotalBuyQty() int64 {
	if m != nil {
		return m.TotalBuyQty
	}
	return 0
}

func (m *MDOption) GetTotalSellQty() int64 {
	if m != nil {
		return m.TotalSellQty
	}
	return 0
}

func (m *MDOption) GetWeightedAvgBuyPx() int64 {
	if m != nil {
		return m.WeightedAvgBuyPx
	}
	return 0
}

func (m *MDOption) GetWeightedAvgSellPx() int64 {
	if m != nil {
		return m.WeightedAvgSellPx
	}
	return 0
}

func (m *MDOption) GetWithdrawBuyNumber() int64 {
	if m != nil {
		return m.WithdrawBuyNumber
	}
	return 0
}

func (m *MDOption) GetWithdrawBuyAmount() int64 {
	if m != nil {
		return m.WithdrawBuyAmount
	}
	return 0
}

func (m *MDOption) GetWithdrawBuyMoney() int64 {
	if m != nil {
		return m.WithdrawBuyMoney
	}
	return 0
}

func (m *MDOption) GetWithdrawSellNumber() int64 {
	if m != nil {
		return m.WithdrawSellNumber
	}
	return 0
}

func (m *MDOption) GetWithdrawSellAmount() int64 {
	if m != nil {
		return m.WithdrawSellAmount
	}
	return 0
}

func (m *MDOption) GetWithdrawSellMoney() int64 {
	if m != nil {
		return m.WithdrawSellMoney
	}
	return 0
}

func (m *MDOption) GetTotalBuyNumber() int64 {
	if m != nil {
		return m.TotalBuyNumber
	}
	return 0
}

func (m *MDOption) GetTotalSellNumber() int64 {
	if m != nil {
		return m.TotalSellNumber
	}
	return 0
}

func (m *MDOption) GetBuyTradeMaxDuration() int64 {
	if m != nil {
		return m.BuyTradeMaxDuration
	}
	return 0
}

func (m *MDOption) GetSellTradeMaxDuration() int64 {
	if m != nil {
		return m.SellTradeMaxDuration
	}
	return 0
}

func (m *MDOption) GetNumBuyOrders() int32 {
	if m != nil {
		return m.NumBuyOrders
	}
	return 0
}

func (m *MDOption) GetNumSellOrders() int32 {
	if m != nil {
		return m.NumSellOrders
	}
	return 0
}

func (m *MDOption) GetTradingDate() int32 {
	if m != nil {
		return m.TradingDate
	}
	return 0
}

func (m *MDOption) GetPreOpenInterest() int64 {
	if m != nil {
		return m.PreOpenInterest
	}
	return 0
}

func (m *MDOption) GetPreSettlePrice() int64 {
	if m != nil {
		return m.PreSettlePrice
	}
	return 0
}

func (m *MDOption) GetOpenInterest() int64 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *MDOption) GetSettlePrice() int64 {
	if m != nil {
		return m.SettlePrice
	}
	return 0
}

func (m *MDOption) GetPreDelta() int64 {
	if m != nil {
		return m.PreDelta
	}
	return 0
}

func (m *MDOption) GetCurrDelta() int64 {
	if m != nil {
		return m.CurrDelta
	}
	return 0
}

func (m *MDOption) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *MDOption) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *MDOption) GetChannelNo() int32 {
	if m != nil {
		return m.ChannelNo
	}
	return 0
}

func (m *MDOption) GetBuyPriceQueue() []int64 {
	if m != nil {
		return m.BuyPriceQueue
	}
	return nil
}

func (m *MDOption) GetBuyOrderQtyQueue() []int64 {
	if m != nil {
		return m.BuyOrderQtyQueue
	}
	return nil
}

func (m *MDOption) GetSellPriceQueue() []int64 {
	if m != nil {
		return m.SellPriceQueue
	}
	return nil
}

func (m *MDOption) GetSellOrderQtyQueue() []int64 {
	if m != nil {
		return m.SellOrderQtyQueue
	}
	return nil
}

func (m *MDOption) GetBuyOrderQueue() []int64 {
	if m != nil {
		return m.BuyOrderQueue
	}
	return nil
}

func (m *MDOption) GetSellOrderQueue() []int64 {
	if m != nil {
		return m.SellOrderQueue
	}
	return nil
}

func (m *MDOption) GetBuyNumOrdersQueue() []int64 {
	if m != nil {
		return m.BuyNumOrdersQueue
	}
	return nil
}

func (m *MDOption) GetSellNumOrdersQueue() []int64 {
	if m != nil {
		return m.SellNumOrdersQueue
	}
	return nil
}

func init() {
	proto.RegisterType((*MDOption)(nil), "com.htsc.mdc.insight.model.MDOption")
}

func init() { proto.RegisterFile("MDOption.proto", fileDescriptor_77ea9d6844cbe0de) }

var fileDescriptor_77ea9d6844cbe0de = []byte{
	// 885 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x05, 0xe3, 0xda, 0xb1, 0xd7, 0xb6, 0x22, 0xaf, 0xdd, 0x64, 0xaa, 0xa6, 0xa9, 0xe2, 0x26,
	0xa9, 0xea, 0xa6, 0x84, 0xa3, 0xf4, 0xfe, 0x16, 0x59, 0x06, 0x1c, 0x20, 0x92, 0x69, 0xc9, 0x68,
	0x9f, 0x19, 0x69, 0x23, 0x11, 0xe0, 0x45, 0x58, 0xee, 0x36, 0xe4, 0xdf, 0xf4, 0x53, 0xfa, 0x69,
	0xc5, 0xcc, 0x52, 0xd4, 0x92, 0x34, 0xfc, 0xa6, 0x39, 0xe7, 0xcc, 0xf0, 0xec, 0x70, 0x67, 0x44,
	0xd6, 0x1a, 0x0d, 0xaf, 0x57, 0x2a, 0x48, 0x62, 0x77, 0x25, 0x13, 0x95, 0xf0, 0xce, 0x2c, 0x89,
	0xdc, 0xa5, 0x4a, 0x67, 0x6e, 0x34, 0x9f, 0xb9, 0x41, 0x9c, 0x06, 0x8b, 0xa5, 0x72, 0xa3, 0x64,
	0x2e, 0xc2, 0xce, 0x93, 0xcb, 0xa9, 0x98, 0x69, 0x19, 0xa8, 0xfc, 0xfd, 0x70, 0x9a, 0x68, 0x39,
	0x13, 0x26, 0xa9, 0x73, 0x5c, 0x12, 0xb7, 0xf9, 0xaa, 0x00, 0x4f, 0xff, 0x6b, 0xb3, 0xdd, 0x75,
	0x71, 0xfe, 0x8a, 0xb5, 0xae, 0x6e, 0xa7, 0x17, 0x9b, 0x7c, 0x70, 0xba, 0x4e, 0x6f, 0x6f, 0x52,
	0x43, 0xf9, 0x63, 0xb6, 0x33, 0x1a, 0x0e, 0x7d, 0x25, 0xe0, 0x41, 0xd7, 0xe9, 0x6d, 0x4f, 0x8a,
	0xc8, 0xe0, 0xb7, 0x41, 0x24, 0x60, 0x6b, 0x8d, 0x63, 0xc4, 0x5f, 0xb0, 0xc3, 0xa1, 0xaf, 0x7c,
	0xfc, 0x9d, 0x2a, 0x3f, 0x5a, 0xc1, 0x17, 0x5d, 0xa7, 0xb7, 0x35, 0xa9, 0x82, 0xfc, 0x8c, 0xb5,
	0x6f, 0xa5, 0x3f, 0x0f, 0xe2, 0x85, 0xb7, 0xf4, 0x53, 0x71, 0x91, 0xcc, 0x05, 0x6c, 0xd3, 0xf3,
	0x1b, 0x38, 0xbf, 0x61, 0xed, 0xb4, 0x76, 0x4a, 0xd8, 0xe9, 0x3a, 0xbd, 0x56, 0xff, 0xa5, 0x5b,
	0xe9, 0x0d, 0xf5, 0xc4, 0x6d, 0xb4, 0x64, 0xd2, 0x48, 0xe7, 0x97, 0xec, 0x20, 0xb5, 0xfa, 0x03,
	0x0f, 0xa9, 0xdc, 0xf3, 0x7b, 0xcb, 0xa1, 0x70, 0x52, 0x49, 0xe3, 0x27, 0x6c, 0x7b, 0xe4, 0x67,
	0x5e, 0x06, 0xbb, 0x74, 0x46, 0x13, 0x10, 0x1a, 0xc4, 0x5e, 0x06, 0x7b, 0x05, 0x8a, 0x01, 0x7f,
	0xc6, 0x98, 0x27, 0xc5, 0x45, 0x98, 0xa4, 0xc2, 0xcb, 0x80, 0x11, 0x65, 0x21, 0xfc, 0x29, 0xdb,
	0x1b, 0xeb, 0x08, 0x0f, 0x2f, 0x52, 0xd8, 0x27, 0x7a, 0x03, 0x50, 0xbf, 0x12, 0xe5, 0x87, 0x7f,
	0x25, 0xa1, 0x8e, 0x04, 0x81, 0x70, 0x40, 0xa2, 0x06, 0xce, 0x7b, 0xec, 0x91, 0xc1, 0xfc, 0x50,
	0x17, 0xd2, 0x43, 0x92, 0xd6, 0x61, 0x7c, 0x87, 0x1f, 0xfc, 0x54, 0x79, 0x19, 0xb4, 0x48, 0x50,
	0x44, 0x88, 0x5f, 0xaf, 0x04, 0x1e, 0xe1, 0x91, 0xc1, 0x4d, 0xc4, 0x81, 0x3d, 0x5c, 0x1f, 0xa0,
	0x4d, 0xc4, 0x3a, 0xc4, 0x8c, 0xab, 0x60, 0xb1, 0xf4, 0x32, 0x38, 0x32, 0x19, 0x26, 0xc2, 0x5e,
	0x7c, 0x48, 0x3e, 0x7b, 0x19, 0x70, 0xd3, 0x0b, 0x0a, 0xb0, 0xce, 0x30, 0xf8, 0xf4, 0xc9, 0xcb,
	0xde, 0xc0, 0xb1, 0xa9, 0x53, 0x84, 0x1b, 0xa6, 0x0f, 0x27, 0x36, 0xd3, 0xe7, 0x5d, 0xb6, 0x4f,
	0xf6, 0x07, 0x3a, 0xbf, 0x51, 0x39, 0x7c, 0x49, 0xac, 0x0d, 0xf1, 0x53, 0x76, 0x40, 0xe1, 0x54,
	0x84, 0x21, 0x4a, 0x1e, 0x93, 0xa4, 0x82, 0x61, 0x1f, 0xff, 0x16, 0x38, 0x40, 0x62, 0xfe, 0xee,
	0x9f, 0xc5, 0x40, 0xe7, 0x5e, 0x06, 0x4f, 0x4c, 0x1f, 0xeb, 0x38, 0x7f, 0xcd, 0x8e, 0x2c, 0x0c,
	0x2b, 0x78, 0x19, 0x00, 0x89, 0x9b, 0x04, 0xa9, 0x03, 0xb5, 0x9c, 0x4b, 0xff, 0xf3, 0x40, 0xe7,
	0x63, 0x1d, 0x7d, 0x14, 0x12, 0xbe, 0x2a, 0xd4, 0x75, 0xa2, 0xa6, 0x7e, 0x17, 0x25, 0x3a, 0x56,
	0xd0, 0x69, 0xa8, 0x0d, 0x41, 0xae, 0x37, 0xe0, 0x28, 0x89, 0x45, 0x0e, 0x5f, 0x17, 0xae, 0x6b,
	0x38, 0x77, 0x19, 0x5f, 0x63, 0xe8, 0xac, 0x30, 0xf2, 0x94, 0xd4, 0x77, 0x30, 0x75, 0x7d, 0x61,
	0xe5, 0x9b, 0xa6, 0xbe, 0xf0, 0x62, 0x39, 0x47, 0xd4, 0x98, 0x79, 0x56, 0x75, 0x5e, 0x12, 0xb8,
	0x65, 0xd6, 0xaf, 0xa8, 0x70, 0xf2, 0x2d, 0x49, 0x6b, 0x68, 0x79, 0x67, 0x2d, 0xcb, 0x5d, 0xeb,
	0xce, 0x5a, 0x7e, 0xcf, 0xd9, 0xf1, 0x40, 0xe7, 0x74, 0x7f, 0x47, 0x7e, 0x36, 0xd4, 0xd2, 0xc7,
	0x75, 0x06, 0xcf, 0x49, 0x7d, 0x17, 0xc5, 0xfb, 0xec, 0x04, 0xf3, 0x1b, 0x29, 0xa7, 0x94, 0x72,
	0x27, 0x87, 0x77, 0x69, 0xac, 0xa3, 0x81, 0xce, 0xaf, 0xe5, 0x5c, 0xc8, 0x14, 0xbe, 0xa3, 0x1d,
	0x57, 0xc1, 0x70, 0xd3, 0x8d, 0x75, 0x84, 0xe9, 0x85, 0xe8, 0x05, 0x89, 0xaa, 0x20, 0xdd, 0x5b,
	0xb3, 0xd1, 0x68, 0x89, 0xbe, 0x24, 0x8d, 0x0d, 0xe1, 0xd9, 0x3d, 0x29, 0x70, 0xc4, 0xde, 0xc7,
	0x4a, 0x48, 0x91, 0x2a, 0x78, 0x65, 0xce, 0x5e, 0x83, 0xb1, 0x9b, 0x9e, 0x14, 0x53, 0xa1, 0x54,
	0x28, 0x3c, 0x19, 0xcc, 0x04, 0x7c, 0x6f, 0xba, 0x59, 0x45, 0xd1, 0x7d, 0xa5, 0x5c, 0xcf, 0x4c,
	0x42, 0xa5, 0x56, 0x97, 0xed, 0xdb, 0x85, 0x7e, 0x30, 0xf3, 0x64, 0x57, 0xe9, 0xb0, 0x5d, 0x4f,
	0x8a, 0xa1, 0x08, 0x95, 0x0f, 0x67, 0x44, 0x97, 0x31, 0x6e, 0xab, 0x0b, 0x2d, 0xa5, 0x21, 0x7f,
	0x34, 0xdb, 0xaa, 0x04, 0xf0, 0xf9, 0x97, 0xd9, 0x6c, 0xe9, 0xc7, 0x0b, 0x41, 0x87, 0x7e, 0x6d,
	0xba, 0x67, 0x63, 0xb6, 0x86, 0xfe, 0x45, 0x7e, 0xaa, 0x6a, 0xe8, 0xbf, 0x04, 0x9f, 0xb2, 0xf4,
	0xe3, 0x58, 0x84, 0xe3, 0x04, 0xfa, 0x24, 0xd8, 0x00, 0xbc, 0xc7, 0x0e, 0x71, 0x50, 0xd1, 0xeb,
	0x8d, 0x16, 0x5a, 0xc0, 0xdb, 0xee, 0x56, 0x6f, 0x6b, 0xf0, 0xa0, 0xed, 0x4c, 0xaa, 0x04, 0x77,
	0x59, 0x7b, 0xfd, 0xda, 0x6e, 0x54, 0x6e, 0xc4, 0x3f, 0x97, 0xe2, 0x06, 0xc7, 0xcf, 0x58, 0x8b,
	0xa6, 0x7a, 0x53, 0xfa, 0x97, 0x52, 0x5d, 0x63, 0xf8, 0x39, 0x3b, 0x2a, 0xdf, 0x76, 0x59, 0xfc,
	0xd7, 0x52, 0xde, 0x24, 0x0b, 0xdf, 0x06, 0x23, 0xf5, 0x6f, 0x15, 0xdf, 0x1b, 0x62, 0xed, 0xc3,
	0x92, 0xfe, 0x5e, 0xf5, 0x61, 0x69, 0xcf, 0xd9, 0x91, 0x19, 0x27, 0x73, 0xef, 0x8c, 0xfc, 0x8f,
	0x8d, 0x8f, 0x06, 0xc9, 0xfb, 0x8c, 0x17, 0x73, 0x65, 0xa7, 0xfc, 0x59, 0xa6, 0xdc, 0xc1, 0x0e,
	0xde, 0xb0, 0x7b, 0x3e, 0x47, 0x06, 0xe5, 0xa7, 0x8b, 0x87, 0xdf, 0x1b, 0xe9, 0x95, 0xf3, 0xaf,
	0xe3, 0x7c, 0xdc, 0xa1, 0x8f, 0x8f, 0xb7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x77, 0xc6, 0x7e,
	0x9c, 0xd8, 0x08, 0x00, 0x00,
}
