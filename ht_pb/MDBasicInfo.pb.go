// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDBasicInfo.proto

/*
Package com_htsc_mdc_insight_model is a generated protocol buffer package.

It is generated from these files:
	MDBasicInfo.proto

It has these top-level messages:
	MDBasicInfo
*/
package com_htsc_mdc_insight_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import com_htsc_mdc_model "."
import com_htsc_mdc_model1 "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 证券基础信息
type MDBasicInfo struct {
	HTSCSecurityID           string                               `protobuf:"bytes,1,opt,name=HTSCSecurityID" json:"HTSCSecurityID,omitempty"`
	SecurityID               string                               `protobuf:"bytes,2,opt,name=SecurityID" json:"SecurityID,omitempty"`
	Symbol                   string                               `protobuf:"bytes,3,opt,name=Symbol" json:"Symbol,omitempty"`
	ChiSpelling              string                               `protobuf:"bytes,4,opt,name=ChiSpelling" json:"ChiSpelling,omitempty"`
	EnglishName              string                               `protobuf:"bytes,5,opt,name=EnglishName" json:"EnglishName,omitempty"`
	SecurityIDSource         com_htsc_mdc_model.ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType             com_htsc_mdc_model1.ESecurityType    `protobuf:"varint,7,opt,name=securityType,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	SecuritySubType          string                               `protobuf:"bytes,8,opt,name=SecuritySubType" json:"SecuritySubType,omitempty"`
	ListDate                 string                               `protobuf:"bytes,9,opt,name=ListDate" json:"ListDate,omitempty"`
	Currency                 string                               `protobuf:"bytes,10,opt,name=Currency" json:"Currency,omitempty"`
	OutstandingShare         int64                                `protobuf:"varint,11,opt,name=OutstandingShare" json:"OutstandingShare,omitempty"`
	PublicFloatShareQuantity int64                                `protobuf:"varint,12,opt,name=PublicFloatShareQuantity" json:"PublicFloatShareQuantity,omitempty"`
	MDDate                   int32                                `protobuf:"varint,13,opt,name=MDDate" json:"MDDate,omitempty"`
	TradingPhaseCode         string                               `protobuf:"bytes,14,opt,name=TradingPhaseCode" json:"TradingPhaseCode,omitempty"`
	PreClosePx               int64                                `protobuf:"varint,15,opt,name=PreClosePx" json:"PreClosePx,omitempty"`
	MaxPx                    int64                                `protobuf:"varint,16,opt,name=MaxPx" json:"MaxPx,omitempty"`
	MinPx                    int64                                `protobuf:"varint,17,opt,name=MinPx" json:"MinPx,omitempty"`
}

func (m *MDBasicInfo) Reset()                    { *m = MDBasicInfo{} }
func (m *MDBasicInfo) String() string            { return proto.CompactTextString(m) }
func (*MDBasicInfo) ProtoMessage()               {}
func (*MDBasicInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MDBasicInfo) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDBasicInfo) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *MDBasicInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MDBasicInfo) GetChiSpelling() string {
	if m != nil {
		return m.ChiSpelling
	}
	return ""
}

func (m *MDBasicInfo) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *MDBasicInfo) GetSecurityIDSource() com_htsc_mdc_model.ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return com_htsc_mdc_model.ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDBasicInfo) GetSecurityType() com_htsc_mdc_model1.ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return com_htsc_mdc_model1.ESecurityType_DefaultSecurityType
}

func (m *MDBasicInfo) GetSecuritySubType() string {
	if m != nil {
		return m.SecuritySubType
	}
	return ""
}

func (m *MDBasicInfo) GetListDate() string {
	if m != nil {
		return m.ListDate
	}
	return ""
}

func (m *MDBasicInfo) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MDBasicInfo) GetOutstandingShare() int64 {
	if m != nil {
		return m.OutstandingShare
	}
	return 0
}

func (m *MDBasicInfo) GetPublicFloatShareQuantity() int64 {
	if m != nil {
		return m.PublicFloatShareQuantity
	}
	return 0
}

func (m *MDBasicInfo) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDBasicInfo) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDBasicInfo) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDBasicInfo) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDBasicInfo) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func init() {
	proto.RegisterType((*MDBasicInfo)(nil), "com.htsc.mdc.insight.model.MDBasicInfo")
}

func init() { proto.RegisterFile("MDBasicInfo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x15, 0x96, 0x96, 0xdd, 0xe9, 0xd2, 0xed, 0x1a, 0x04, 0x56, 0x0f, 0x28, 0x20, 0x81,
	0x22, 0x0e, 0x39, 0x00, 0x27, 0x8e, 0x4d, 0x8b, 0x76, 0x25, 0x0a, 0xd9, 0xa4, 0x2f, 0xe0, 0xa6,
	0xa6, 0xb1, 0xe4, 0xd8, 0x95, 0xed, 0x48, 0xcd, 0xdb, 0x70, 0xe1, 0x3d, 0x91, 0xa7, 0xdd, 0xc5,
	0xdb, 0x8a, 0x1e, 0xff, 0xef, 0xff, 0x67, 0x3c, 0x9d, 0x4e, 0xe0, 0x7a, 0x3e, 0x9d, 0x30, 0x2b,
	0xaa, 0x5b, 0xf5, 0x4b, 0xa7, 0x1b, 0xa3, 0x9d, 0x26, 0xe3, 0x4a, 0x37, 0x69, 0xed, 0x6c, 0x95,
	0x36, 0xab, 0x2a, 0x15, 0xca, 0x8a, 0x75, 0xed, 0xd2, 0x46, 0xaf, 0xb8, 0x1c, 0xbf, 0x9e, 0x95,
	0xbc, 0x6a, 0x8d, 0x70, 0xdd, 0xed, 0xb4, 0xd4, 0xad, 0xa9, 0xf8, 0xae, 0x68, 0xfc, 0xe2, 0xc1,
	0x58, 0x74, 0x9b, 0x3d, 0x7c, 0xf7, 0xa7, 0x07, 0x83, 0xa0, 0x3f, 0xf9, 0x00, 0xc3, 0x9b, 0x45,
	0x99, 0xfd, 0x6b, 0x41, 0xa3, 0x38, 0x4a, 0x2e, 0x8a, 0x03, 0x4a, 0xde, 0x00, 0x04, 0x99, 0x27,
	0x98, 0x09, 0x08, 0x79, 0x05, 0xfd, 0xb2, 0x6b, 0x96, 0x5a, 0xd2, 0x33, 0xf4, 0xf6, 0x8a, 0xc4,
	0x30, 0xc8, 0x6a, 0x51, 0x6e, 0xb8, 0x94, 0x42, 0xad, 0xe9, 0x53, 0x34, 0x43, 0xe4, 0x13, 0x33,
	0xb5, 0x96, 0xc2, 0xd6, 0x3f, 0x58, 0xc3, 0x69, 0x6f, 0x97, 0x08, 0x10, 0xb9, 0x83, 0x91, 0x3d,
	0xf8, 0x89, 0xb4, 0x1f, 0x47, 0xc9, 0xf0, 0xd3, 0xfb, 0xf4, 0xd1, 0x62, 0x70, 0x21, 0xe9, 0xd1,
	0x3e, 0x8a, 0xa3, 0x72, 0x32, 0x83, 0x4b, 0x1b, 0x2c, 0x87, 0x3e, 0xc3, 0x76, 0x6f, 0x4f, 0xb6,
	0xf3, 0xc1, 0xe2, 0x51, 0x19, 0x49, 0xe0, 0xea, 0xde, 0x2d, 0xdb, 0x25, 0x76, 0x3a, 0xc7, 0xf9,
	0x0f, 0x31, 0x19, 0xc3, 0xf9, 0x77, 0x61, 0xdd, 0x94, 0x39, 0x4e, 0x2f, 0x30, 0xf2, 0xa0, 0xbd,
	0x97, 0xb5, 0xc6, 0x70, 0x55, 0x75, 0x14, 0x76, 0xde, 0xbd, 0x26, 0x1f, 0x61, 0xf4, 0xb3, 0x75,
	0xd6, 0x31, 0xb5, 0x12, 0x6a, 0x5d, 0xd6, 0xcc, 0x70, 0x3a, 0x88, 0xa3, 0xe4, 0xac, 0x38, 0xe2,
	0xe4, 0x2b, 0xd0, 0xbc, 0x5d, 0x4a, 0x51, 0x7d, 0x93, 0x9a, 0x39, 0x64, 0x77, 0x2d, 0x53, 0x4e,
	0xb8, 0x8e, 0x5e, 0x62, 0xcd, 0x7f, 0x7d, 0xff, 0xff, 0xcd, 0xa7, 0x38, 0xdd, 0xf3, 0x38, 0x4a,
	0x7a, 0xc5, 0x5e, 0xf9, 0xf7, 0x17, 0x86, 0xf9, 0x37, 0xf2, 0x9a, 0x59, 0x9e, 0xe9, 0x15, 0xa7,
	0x43, 0x9c, 0xf1, 0x88, 0xfb, 0x1b, 0xc9, 0x0d, 0xcf, 0xa4, 0xb6, 0x3c, 0xdf, 0xd2, 0x2b, 0x7c,
	0x31, 0x20, 0xe4, 0x25, 0xf4, 0xe6, 0x6c, 0x9b, 0x6f, 0xe9, 0x08, 0xad, 0x9d, 0x40, 0x2a, 0x54,
	0xbe, 0xa5, 0xd7, 0x7b, 0xea, 0xc5, 0xe4, 0x0b, 0x9c, 0xb8, 0xf9, 0x49, 0xf8, 0x89, 0xe4, 0xfe,
	0xae, 0xed, 0x4d, 0xf4, 0x3b, 0x8a, 0x96, 0x7d, 0x3c, 0xf2, 0xcf, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x7a, 0x51, 0x39, 0xd7, 0x43, 0x03, 0x00, 0x00,
}
