// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDBasicInfo.proto

package com_htsc_mdc_insight_model

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//证券基础信息
type MDBasicInfo struct {
	HTSCSecurityID               string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	SecurityID                   string            `protobuf:"bytes,2,opt,name=SecurityID,proto3" json:"SecurityID,omitempty"`
	Symbol                       string            `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	ChiSpelling                  string            `protobuf:"bytes,4,opt,name=ChiSpelling,proto3" json:"ChiSpelling,omitempty"`
	EnglishName                  string            `protobuf:"bytes,5,opt,name=EnglishName,proto3" json:"EnglishName,omitempty"`
	SecurityIDSource             ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType                 ESecurityType     `protobuf:"varint,7,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	SecuritySubType              string            `protobuf:"bytes,8,opt,name=SecuritySubType,proto3" json:"SecuritySubType,omitempty"`
	ListDate                     string            `protobuf:"bytes,9,opt,name=ListDate,proto3" json:"ListDate,omitempty"`
	Currency                     string            `protobuf:"bytes,10,opt,name=Currency,proto3" json:"Currency,omitempty"`
	OutstandingShare             int64             `protobuf:"varint,11,opt,name=OutstandingShare,proto3" json:"OutstandingShare,omitempty"`
	PublicFloatShareQuantity     int64             `protobuf:"varint,12,opt,name=PublicFloatShareQuantity,proto3" json:"PublicFloatShareQuantity,omitempty"`
	MDDate                       int32             `protobuf:"varint,13,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	TradingPhaseCode             string            `protobuf:"bytes,14,opt,name=TradingPhaseCode,proto3" json:"TradingPhaseCode,omitempty"`
	PreClosePx                   int64             `protobuf:"varint,15,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	MaxPx                        int64             `protobuf:"varint,16,opt,name=MaxPx,proto3" json:"MaxPx,omitempty"`
	MinPx                        int64             `protobuf:"varint,17,opt,name=MinPx,proto3" json:"MinPx,omitempty"`
	LotSize                      int64             `protobuf:"varint,18,opt,name=LotSize,proto3" json:"LotSize,omitempty"`
	ShortSellFlag                bool              `protobuf:"varint,19,opt,name=ShortSellFlag,proto3" json:"ShortSellFlag,omitempty"`
	ExchangeDate                 string            `protobuf:"bytes,20,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeSymbol               string            `protobuf:"bytes,21,opt,name=ExchangeSymbol,proto3" json:"ExchangeSymbol,omitempty"`
	TickSize                     float64           `protobuf:"fixed64,22,opt,name=TickSize,proto3" json:"TickSize,omitempty"`
	LoanMarginIndicator          int32             `protobuf:"varint,23,opt,name=LoanMarginIndicator,proto3" json:"LoanMarginIndicator,omitempty"`
	PxAccuracy                   int32             `protobuf:"varint,24,opt,name=PxAccuracy,proto3" json:"PxAccuracy,omitempty"`
	IPOProfitable                int32             `protobuf:"varint,25,opt,name=IPOProfitable,proto3" json:"IPOProfitable,omitempty"`
	DiffRightsIndicator          int32             `protobuf:"varint,26,opt,name=DiffRightsIndicator,proto3" json:"DiffRightsIndicator,omitempty"`
	HKSpreadTableCode            string            `protobuf:"bytes,27,opt,name=HKSpreadTableCode,proto3" json:"HKSpreadTableCode,omitempty"`
	PreSettlePx                  float64           `protobuf:"fixed64,28,opt,name=PreSettlePx,proto3" json:"PreSettlePx,omitempty"`
	PreIOPV                      float64           `protobuf:"fixed64,29,opt,name=PreIOPV,proto3" json:"PreIOPV,omitempty"`
	OptionContractID             string            `protobuf:"bytes,40,opt,name=OptionContractID,proto3" json:"OptionContractID,omitempty"`
	OptionContractSymbol         string            `protobuf:"bytes,41,opt,name=OptionContractSymbol,proto3" json:"OptionContractSymbol,omitempty"`
	OptionUnderlyingSecurityID   string            `protobuf:"bytes,42,opt,name=OptionUnderlyingSecurityID,proto3" json:"OptionUnderlyingSecurityID,omitempty"`
	OptionUnderlyingSymbol       string            `protobuf:"bytes,43,opt,name=OptionUnderlyingSymbol,proto3" json:"OptionUnderlyingSymbol,omitempty"`
	OptionUnderlyingType         string            `protobuf:"bytes,44,opt,name=OptionUnderlyingType,proto3" json:"OptionUnderlyingType,omitempty"`
	OptionOptionType             string            `protobuf:"bytes,45,opt,name=OptionOptionType,proto3" json:"OptionOptionType,omitempty"`
	OptionCallOrPut              string            `protobuf:"bytes,46,opt,name=OptionCallOrPut,proto3" json:"OptionCallOrPut,omitempty"`
	OptionContractMultiplierUnit int64             `protobuf:"varint,47,opt,name=OptionContractMultiplierUnit,proto3" json:"OptionContractMultiplierUnit,omitempty"`
	OptionExercisePrice          float64           `protobuf:"fixed64,48,opt,name=OptionExercisePrice,proto3" json:"OptionExercisePrice,omitempty"`
	OptionStartDate              string            `protobuf:"bytes,49,opt,name=OptionStartDate,proto3" json:"OptionStartDate,omitempty"`
	OptionEndDate                string            `protobuf:"bytes,50,opt,name=OptionEndDate,proto3" json:"OptionEndDate,omitempty"`
	OptionExerciseDate           string            `protobuf:"bytes,51,opt,name=OptionExerciseDate,proto3" json:"OptionExerciseDate,omitempty"`
	OptionDeliveryDate           string            `protobuf:"bytes,52,opt,name=OptionDeliveryDate,proto3" json:"OptionDeliveryDate,omitempty"`
	OptionExpireDate             string            `protobuf:"bytes,53,opt,name=OptionExpireDate,proto3" json:"OptionExpireDate,omitempty"`
	OptionUpdateVersion          string            `protobuf:"bytes,54,opt,name=OptionUpdateVersion,proto3" json:"OptionUpdateVersion,omitempty"`
	OptionTotalLongPosition      int64             `protobuf:"varint,55,opt,name=OptionTotalLongPosition,proto3" json:"OptionTotalLongPosition,omitempty"`
	OptionSecurityClosePx        float64           `protobuf:"fixed64,56,opt,name=OptionSecurityClosePx,proto3" json:"OptionSecurityClosePx,omitempty"`
	OptionSettlPrice             float64           `protobuf:"fixed64,57,opt,name=OptionSettlPrice,proto3" json:"OptionSettlPrice,omitempty"`
	OptionUnderlyingClosePx      float64           `protobuf:"fixed64,58,opt,name=OptionUnderlyingClosePx,proto3" json:"OptionUnderlyingClosePx,omitempty"`
	OptionPriceLimitType         string            `protobuf:"bytes,59,opt,name=OptionPriceLimitType,proto3" json:"OptionPriceLimitType,omitempty"`
	OptionDailyPriceUpLimit      float64           `protobuf:"fixed64,60,opt,name=OptionDailyPriceUpLimit,proto3" json:"OptionDailyPriceUpLimit,omitempty"`
	OptionDailyPriceDownLimit    float64           `protobuf:"fixed64,61,opt,name=OptionDailyPriceDownLimit,proto3" json:"OptionDailyPriceDownLimit,omitempty"`
	OptionMarginUnit             float64           `protobuf:"fixed64,62,opt,name=OptionMarginUnit,proto3" json:"OptionMarginUnit,omitempty"`
	OptionMarginRatioParam1      float64           `protobuf:"fixed64,63,opt,name=OptionMarginRatioParam1,proto3" json:"OptionMarginRatioParam1,omitempty"`
	OptionMarginRatioParam2      float64           `protobuf:"fixed64,64,opt,name=OptionMarginRatioParam2,proto3" json:"OptionMarginRatioParam2,omitempty"`
	OptionRoundLot               int64             `protobuf:"varint,65,opt,name=OptionRoundLot,proto3" json:"OptionRoundLot,omitempty"`
	OptionLmtOrdMinFloor         int64             `protobuf:"varint,66,opt,name=OptionLmtOrdMinFloor,proto3" json:"OptionLmtOrdMinFloor,omitempty"`
	OptionLmtOrdMaxFloor         int64             `protobuf:"varint,67,opt,name=OptionLmtOrdMaxFloor,proto3" json:"OptionLmtOrdMaxFloor,omitempty"`
	OptionMktOrdMinFloor         int64             `protobuf:"varint,68,opt,name=OptionMktOrdMinFloor,proto3" json:"OptionMktOrdMinFloor,omitempty"`
	OptionMktOrdMaxFloor         int64             `protobuf:"varint,69,opt,name=OptionMktOrdMaxFloor,proto3" json:"OptionMktOrdMaxFloor,omitempty"`
	OptionTickSize               float64           `protobuf:"fixed64,70,opt,name=OptionTickSize,proto3" json:"OptionTickSize,omitempty"`
	OptionSecurityStatusFlag     string            `protobuf:"bytes,71,opt,name=OptionSecurityStatusFlag,proto3" json:"OptionSecurityStatusFlag,omitempty"`
	FITradeProductType           string            `protobuf:"bytes,80,opt,name=FITradeProductType,proto3" json:"FITradeProductType,omitempty"`
	FISecurityProperty           string            `protobuf:"bytes,81,opt,name=FISecurityProperty,proto3" json:"FISecurityProperty,omitempty"`
	FISecurityStatus             string            `protobuf:"bytes,82,opt,name=FISecurityStatus,proto3" json:"FISecurityStatus,omitempty"`
	FIPledgedSecurityID          string            `protobuf:"bytes,83,opt,name=FIPledgedSecurityID,proto3" json:"FIPledgedSecurityID,omitempty"`
	FIOpenTime                   string            `protobuf:"bytes,84,opt,name=FIOpenTime,proto3" json:"FIOpenTime,omitempty"`
	FICloseTime                  string            `protobuf:"bytes,85,opt,name=FICloseTime,proto3" json:"FICloseTime,omitempty"`
	FIIssueMode                  string            `protobuf:"bytes,86,opt,name=FIIssueMode,proto3" json:"FIIssueMode,omitempty"`
	FIFaceAmount                 float64           `protobuf:"fixed64,87,opt,name=FIFaceAmount,proto3" json:"FIFaceAmount,omitempty"`
	FIIssuePrice                 float64           `protobuf:"fixed64,88,opt,name=FIIssuePrice,proto3" json:"FIIssuePrice,omitempty"`
	FIInterestType               string            `protobuf:"bytes,89,opt,name=FIInterestType,proto3" json:"FIInterestType,omitempty"`
	FIInterestFrequency          string            `protobuf:"bytes,90,opt,name=FIInterestFrequency,proto3" json:"FIInterestFrequency,omitempty"`
	FIGuaranteedInterestRate     float64           `protobuf:"fixed64,91,opt,name=FIGuaranteedInterestRate,proto3" json:"FIGuaranteedInterestRate,omitempty"`
	FIBaseInterestRate           float64           `protobuf:"fixed64,92,opt,name=FIBaseInterestRate,proto3" json:"FIBaseInterestRate,omitempty"`
	FIQuotedMargin               float64           `protobuf:"fixed64,93,opt,name=FIQuotedMargin,proto3" json:"FIQuotedMargin,omitempty"`
	FITimeLimit                  int32             `protobuf:"varint,94,opt,name=FITimeLimit,proto3" json:"FITimeLimit,omitempty"`
	FITotalIssuance              float64           `protobuf:"fixed64,95,opt,name=FITotalIssuance,proto3" json:"FITotalIssuance,omitempty"`
	FIIssueStartDate             string            `protobuf:"bytes,96,opt,name=FIIssueStartDate,proto3" json:"FIIssueStartDate,omitempty"`
	FIIssueEndDate               string            `protobuf:"bytes,97,opt,name=FIIssueEndDate,proto3" json:"FIIssueEndDate,omitempty"`
	FIListDate                   string            `protobuf:"bytes,98,opt,name=FIListDate,proto3" json:"FIListDate,omitempty"`
	FIExpireDate                 string            `protobuf:"bytes,99,opt,name=FIExpireDate,proto3" json:"FIExpireDate,omitempty"`
	FINationalDebtType           string            `protobuf:"bytes,100,opt,name=FINationalDebtType,proto3" json:"FINationalDebtType,omitempty"`
	FIIssueMethod                string            `protobuf:"bytes,101,opt,name=FIIssueMethod,proto3" json:"FIIssueMethod,omitempty"`
	FICrossMarket                bool              `protobuf:"varint,102,opt,name=FICrossMarket,proto3" json:"FICrossMarket,omitempty"`
	FIShortSellFlag              bool              `protobuf:"varint,103,opt,name=FIShortSellFlag,proto3" json:"FIShortSellFlag,omitempty"`
	FITotalShortSellQuota        float64           `protobuf:"fixed64,104,opt,name=FITotalShortSellQuota,proto3" json:"FITotalShortSellQuota,omitempty"`
	FIDealerShortSellQuota       float64           `protobuf:"fixed64,105,opt,name=FIDealerShortSellQuota,proto3" json:"FIDealerShortSellQuota,omitempty"`
	FIPreClosePx                 float64           `protobuf:"fixed64,106,opt,name=FIPreClosePx,proto3" json:"FIPreClosePx,omitempty"`
	FIPreWeightedPx              float64           `protobuf:"fixed64,107,opt,name=FIPreWeightedPx,proto3" json:"FIPreWeightedPx,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}          `json:"-"`
	XXX_unrecognized             []byte            `json:"-"`
	XXX_sizecache                int32             `json:"-"`
}

func (m *MDBasicInfo) Reset()         { *m = MDBasicInfo{} }
func (m *MDBasicInfo) String() string { return proto.CompactTextString(m) }
func (*MDBasicInfo) ProtoMessage()    {}
func (*MDBasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_251d7881a5a45561, []int{0}
}

func (m *MDBasicInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDBasicInfo.Unmarshal(m, b)
}
func (m *MDBasicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDBasicInfo.Marshal(b, m, deterministic)
}
func (m *MDBasicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDBasicInfo.Merge(m, src)
}
func (m *MDBasicInfo) XXX_Size() int {
	return xxx_messageInfo_MDBasicInfo.Size(m)
}
func (m *MDBasicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MDBasicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MDBasicInfo proto.InternalMessageInfo

func (m *MDBasicInfo) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDBasicInfo) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *MDBasicInfo) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MDBasicInfo) GetChiSpelling() string {
	if m != nil {
		return m.ChiSpelling
	}
	return ""
}

func (m *MDBasicInfo) GetEnglishName() string {
	if m != nil {
		return m.EnglishName
	}
	return ""
}

func (m *MDBasicInfo) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDBasicInfo) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *MDBasicInfo) GetSecuritySubType() string {
	if m != nil {
		return m.SecuritySubType
	}
	return ""
}

func (m *MDBasicInfo) GetListDate() string {
	if m != nil {
		return m.ListDate
	}
	return ""
}

func (m *MDBasicInfo) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MDBasicInfo) GetOutstandingShare() int64 {
	if m != nil {
		return m.OutstandingShare
	}
	return 0
}

func (m *MDBasicInfo) GetPublicFloatShareQuantity() int64 {
	if m != nil {
		return m.PublicFloatShareQuantity
	}
	return 0
}

func (m *MDBasicInfo) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDBasicInfo) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDBasicInfo) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDBasicInfo) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDBasicInfo) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func (m *MDBasicInfo) GetLotSize() int64 {
	if m != nil {
		return m.LotSize
	}
	return 0
}

func (m *MDBasicInfo) GetShortSellFlag() bool {
	if m != nil {
		return m.ShortSellFlag
	}
	return false
}

func (m *MDBasicInfo) GetExchangeDate() string {
	if m != nil {
		return m.ExchangeDate
	}
	return ""
}

func (m *MDBasicInfo) GetExchangeSymbol() string {
	if m != nil {
		return m.ExchangeSymbol
	}
	return ""
}

func (m *MDBasicInfo) GetTickSize() float64 {
	if m != nil {
		return m.TickSize
	}
	return 0
}

func (m *MDBasicInfo) GetLoanMarginIndicator() int32 {
	if m != nil {
		return m.LoanMarginIndicator
	}
	return 0
}

func (m *MDBasicInfo) GetPxAccuracy() int32 {
	if m != nil {
		return m.PxAccuracy
	}
	return 0
}

func (m *MDBasicInfo) GetIPOProfitable() int32 {
	if m != nil {
		return m.IPOProfitable
	}
	return 0
}

func (m *MDBasicInfo) GetDiffRightsIndicator() int32 {
	if m != nil {
		return m.DiffRightsIndicator
	}
	return 0
}

func (m *MDBasicInfo) GetHKSpreadTableCode() string {
	if m != nil {
		return m.HKSpreadTableCode
	}
	return ""
}

func (m *MDBasicInfo) GetPreSettlePx() float64 {
	if m != nil {
		return m.PreSettlePx
	}
	return 0
}

func (m *MDBasicInfo) GetPreIOPV() float64 {
	if m != nil {
		return m.PreIOPV
	}
	return 0
}

func (m *MDBasicInfo) GetOptionContractID() string {
	if m != nil {
		return m.OptionContractID
	}
	return ""
}

func (m *MDBasicInfo) GetOptionContractSymbol() string {
	if m != nil {
		return m.OptionContractSymbol
	}
	return ""
}

func (m *MDBasicInfo) GetOptionUnderlyingSecurityID() string {
	if m != nil {
		return m.OptionUnderlyingSecurityID
	}
	return ""
}

func (m *MDBasicInfo) GetOptionUnderlyingSymbol() string {
	if m != nil {
		return m.OptionUnderlyingSymbol
	}
	return ""
}

func (m *MDBasicInfo) GetOptionUnderlyingType() string {
	if m != nil {
		return m.OptionUnderlyingType
	}
	return ""
}

func (m *MDBasicInfo) GetOptionOptionType() string {
	if m != nil {
		return m.OptionOptionType
	}
	return ""
}

func (m *MDBasicInfo) GetOptionCallOrPut() string {
	if m != nil {
		return m.OptionCallOrPut
	}
	return ""
}

func (m *MDBasicInfo) GetOptionContractMultiplierUnit() int64 {
	if m != nil {
		return m.OptionContractMultiplierUnit
	}
	return 0
}

func (m *MDBasicInfo) GetOptionExercisePrice() float64 {
	if m != nil {
		return m.OptionExercisePrice
	}
	return 0
}

func (m *MDBasicInfo) GetOptionStartDate() string {
	if m != nil {
		return m.OptionStartDate
	}
	return ""
}

func (m *MDBasicInfo) GetOptionEndDate() string {
	if m != nil {
		return m.OptionEndDate
	}
	return ""
}

func (m *MDBasicInfo) GetOptionExerciseDate() string {
	if m != nil {
		return m.OptionExerciseDate
	}
	return ""
}

func (m *MDBasicInfo) GetOptionDeliveryDate() string {
	if m != nil {
		return m.OptionDeliveryDate
	}
	return ""
}

func (m *MDBasicInfo) GetOptionExpireDate() string {
	if m != nil {
		return m.OptionExpireDate
	}
	return ""
}

func (m *MDBasicInfo) GetOptionUpdateVersion() string {
	if m != nil {
		return m.OptionUpdateVersion
	}
	return ""
}

func (m *MDBasicInfo) GetOptionTotalLongPosition() int64 {
	if m != nil {
		return m.OptionTotalLongPosition
	}
	return 0
}

func (m *MDBasicInfo) GetOptionSecurityClosePx() float64 {
	if m != nil {
		return m.OptionSecurityClosePx
	}
	return 0
}

func (m *MDBasicInfo) GetOptionSettlPrice() float64 {
	if m != nil {
		return m.OptionSettlPrice
	}
	return 0
}

func (m *MDBasicInfo) GetOptionUnderlyingClosePx() float64 {
	if m != nil {
		return m.OptionUnderlyingClosePx
	}
	return 0
}

func (m *MDBasicInfo) GetOptionPriceLimitType() string {
	if m != nil {
		return m.OptionPriceLimitType
	}
	return ""
}

func (m *MDBasicInfo) GetOptionDailyPriceUpLimit() float64 {
	if m != nil {
		return m.OptionDailyPriceUpLimit
	}
	return 0
}

func (m *MDBasicInfo) GetOptionDailyPriceDownLimit() float64 {
	if m != nil {
		return m.OptionDailyPriceDownLimit
	}
	return 0
}

func (m *MDBasicInfo) GetOptionMarginUnit() float64 {
	if m != nil {
		return m.OptionMarginUnit
	}
	return 0
}

func (m *MDBasicInfo) GetOptionMarginRatioParam1() float64 {
	if m != nil {
		return m.OptionMarginRatioParam1
	}
	return 0
}

func (m *MDBasicInfo) GetOptionMarginRatioParam2() float64 {
	if m != nil {
		return m.OptionMarginRatioParam2
	}
	return 0
}

func (m *MDBasicInfo) GetOptionRoundLot() int64 {
	if m != nil {
		return m.OptionRoundLot
	}
	return 0
}

func (m *MDBasicInfo) GetOptionLmtOrdMinFloor() int64 {
	if m != nil {
		return m.OptionLmtOrdMinFloor
	}
	return 0
}

func (m *MDBasicInfo) GetOptionLmtOrdMaxFloor() int64 {
	if m != nil {
		return m.OptionLmtOrdMaxFloor
	}
	return 0
}

func (m *MDBasicInfo) GetOptionMktOrdMinFloor() int64 {
	if m != nil {
		return m.OptionMktOrdMinFloor
	}
	return 0
}

func (m *MDBasicInfo) GetOptionMktOrdMaxFloor() int64 {
	if m != nil {
		return m.OptionMktOrdMaxFloor
	}
	return 0
}

func (m *MDBasicInfo) GetOptionTickSize() float64 {
	if m != nil {
		return m.OptionTickSize
	}
	return 0
}

func (m *MDBasicInfo) GetOptionSecurityStatusFlag() string {
	if m != nil {
		return m.OptionSecurityStatusFlag
	}
	return ""
}

func (m *MDBasicInfo) GetFITradeProductType() string {
	if m != nil {
		return m.FITradeProductType
	}
	return ""
}

func (m *MDBasicInfo) GetFISecurityProperty() string {
	if m != nil {
		return m.FISecurityProperty
	}
	return ""
}

func (m *MDBasicInfo) GetFISecurityStatus() string {
	if m != nil {
		return m.FISecurityStatus
	}
	return ""
}

func (m *MDBasicInfo) GetFIPledgedSecurityID() string {
	if m != nil {
		return m.FIPledgedSecurityID
	}
	return ""
}

func (m *MDBasicInfo) GetFIOpenTime() string {
	if m != nil {
		return m.FIOpenTime
	}
	return ""
}

func (m *MDBasicInfo) GetFICloseTime() string {
	if m != nil {
		return m.FICloseTime
	}
	return ""
}

func (m *MDBasicInfo) GetFIIssueMode() string {
	if m != nil {
		return m.FIIssueMode
	}
	return ""
}

func (m *MDBasicInfo) GetFIFaceAmount() float64 {
	if m != nil {
		return m.FIFaceAmount
	}
	return 0
}

func (m *MDBasicInfo) GetFIIssuePrice() float64 {
	if m != nil {
		return m.FIIssuePrice
	}
	return 0
}

func (m *MDBasicInfo) GetFIInterestType() string {
	if m != nil {
		return m.FIInterestType
	}
	return ""
}

func (m *MDBasicInfo) GetFIInterestFrequency() string {
	if m != nil {
		return m.FIInterestFrequency
	}
	return ""
}

func (m *MDBasicInfo) GetFIGuaranteedInterestRate() float64 {
	if m != nil {
		return m.FIGuaranteedInterestRate
	}
	return 0
}

func (m *MDBasicInfo) GetFIBaseInterestRate() float64 {
	if m != nil {
		return m.FIBaseInterestRate
	}
	return 0
}

func (m *MDBasicInfo) GetFIQuotedMargin() float64 {
	if m != nil {
		return m.FIQuotedMargin
	}
	return 0
}

func (m *MDBasicInfo) GetFITimeLimit() int32 {
	if m != nil {
		return m.FITimeLimit
	}
	return 0
}

func (m *MDBasicInfo) GetFITotalIssuance() float64 {
	if m != nil {
		return m.FITotalIssuance
	}
	return 0
}

func (m *MDBasicInfo) GetFIIssueStartDate() string {
	if m != nil {
		return m.FIIssueStartDate
	}
	return ""
}

func (m *MDBasicInfo) GetFIIssueEndDate() string {
	if m != nil {
		return m.FIIssueEndDate
	}
	return ""
}

func (m *MDBasicInfo) GetFIListDate() string {
	if m != nil {
		return m.FIListDate
	}
	return ""
}

func (m *MDBasicInfo) GetFIExpireDate() string {
	if m != nil {
		return m.FIExpireDate
	}
	return ""
}

func (m *MDBasicInfo) GetFINationalDebtType() string {
	if m != nil {
		return m.FINationalDebtType
	}
	return ""
}

func (m *MDBasicInfo) GetFIIssueMethod() string {
	if m != nil {
		return m.FIIssueMethod
	}
	return ""
}

func (m *MDBasicInfo) GetFICrossMarket() bool {
	if m != nil {
		return m.FICrossMarket
	}
	return false
}

func (m *MDBasicInfo) GetFIShortSellFlag() bool {
	if m != nil {
		return m.FIShortSellFlag
	}
	return false
}

func (m *MDBasicInfo) GetFITotalShortSellQuota() float64 {
	if m != nil {
		return m.FITotalShortSellQuota
	}
	return 0
}

func (m *MDBasicInfo) GetFIDealerShortSellQuota() float64 {
	if m != nil {
		return m.FIDealerShortSellQuota
	}
	return 0
}

func (m *MDBasicInfo) GetFIPreClosePx() float64 {
	if m != nil {
		return m.FIPreClosePx
	}
	return 0
}

func (m *MDBasicInfo) GetFIPreWeightedPx() float64 {
	if m != nil {
		return m.FIPreWeightedPx
	}
	return 0
}

func init() {
	proto.RegisterType((*MDBasicInfo)(nil), "com.htsc.mdc.insight.model.MDBasicInfo")
}

func init() { proto.RegisterFile("MDBasicInfo.proto", fileDescriptor_251d7881a5a45561) }

var fileDescriptor_251d7881a5a45561 = []byte{
	// 1460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0xfb, 0x93, 0xdb, 0xb4,
	0x16, 0x9e, 0xdc, 0xde, 0xbe, 0xd4, 0xb7, 0xfa, 0x52, 0xf7, 0xf6, 0x76, 0xf6, 0x76, 0x2e, 0x4c,
	0x28, 0x25, 0xb4, 0xdb, 0x52, 0x4a, 0x29, 0x85, 0x6e, 0x12, 0xb7, 0x1e, 0x92, 0xae, 0x37, 0xce,
	0xb6, 0xbc, 0x41, 0xb1, 0xb5, 0x89, 0x58, 0x47, 0x0a, 0xb2, 0x0c, 0x09, 0x7f, 0x0d, 0xff, 0x1b,
	0xff, 0x08, 0xa3, 0x23, 0x3b, 0x96, 0x9d, 0x64, 0x7f, 0xf1, 0x8c, 0xbe, 0xef, 0x3b, 0x7a, 0x7c,
	0x3a, 0x3a, 0x92, 0xd1, 0x95, 0x7e, 0x67, 0x97, 0xa6, 0x3c, 0xf2, 0xc5, 0xa1, 0x6c, 0xcd, 0x94,
	0xd4, 0x12, 0x6f, 0x45, 0x72, 0xda, 0x9a, 0xe8, 0x34, 0x6a, 0x4d, 0xe3, 0xa8, 0xc5, 0x45, 0xca,
	0xc7, 0x13, 0xdd, 0x9a, 0xca, 0x98, 0x25, 0x5b, 0x37, 0xbb, 0x21, 0x8b, 0x32, 0xc5, 0xf5, 0xc2,
	0xef, 0x84, 0x32, 0x53, 0x11, 0xb3, 0x41, 0x5b, 0x57, 0x97, 0xc4, 0x70, 0x31, 0xcb, 0xc1, 0xbb,
	0x7f, 0xdf, 0x41, 0xe7, 0x9c, 0xfe, 0xf1, 0xfb, 0xe8, 0xe2, 0xeb, 0x61, 0xd8, 0x2e, 0xbb, 0x20,
	0x8d, 0xed, 0x46, 0xf3, 0xec, 0xa0, 0x86, 0xe2, 0x3b, 0x08, 0x39, 0x9a, 0x7f, 0x81, 0xc6, 0x41,
	0xf0, 0x0d, 0x74, 0x2a, 0x5c, 0x4c, 0x47, 0x32, 0x21, 0x27, 0x80, 0xcb, 0x5b, 0x78, 0x1b, 0x9d,
	0x6b, 0x4f, 0x78, 0x38, 0x63, 0x49, 0xc2, 0xc5, 0x98, 0xfc, 0x1b, 0x48, 0x17, 0x32, 0x8a, 0xae,
	0x18, 0x27, 0x3c, 0x9d, 0xbc, 0xa1, 0x53, 0x46, 0x4e, 0x5a, 0x85, 0x03, 0xe1, 0x7d, 0x74, 0x39,
	0xad, 0x2d, 0x91, 0x9c, 0xda, 0x6e, 0x34, 0x2f, 0xee, 0xbc, 0xd7, 0xaa, 0x18, 0x03, 0x86, 0xb4,
	0x56, 0xfc, 0x18, 0xac, 0x84, 0xe3, 0x2e, 0x3a, 0x9f, 0x3a, 0xe6, 0x90, 0xd3, 0xd0, 0xdd, 0xff,
	0x8e, 0xed, 0xce, 0x08, 0x07, 0x95, 0x30, 0xdc, 0x44, 0x97, 0x0a, 0x36, 0xcc, 0x46, 0xd0, 0xd3,
	0x19, 0x98, 0x7f, 0x1d, 0xc6, 0x5b, 0xe8, 0x4c, 0x8f, 0xa7, 0xba, 0x43, 0x35, 0x23, 0x67, 0x41,
	0xb2, 0x6c, 0x1b, 0xae, 0x9d, 0x29, 0xc5, 0x44, 0xb4, 0x20, 0xc8, 0x72, 0x45, 0x1b, 0xdf, 0x43,
	0x97, 0xf7, 0x32, 0x9d, 0x6a, 0x2a, 0x62, 0x2e, 0xc6, 0xe1, 0x84, 0x2a, 0x46, 0xce, 0x6d, 0x37,
	0x9a, 0x27, 0x06, 0x2b, 0x38, 0x7e, 0x86, 0x48, 0x90, 0x8d, 0x12, 0x1e, 0x79, 0x89, 0xa4, 0x1a,
	0xb0, 0xfd, 0x8c, 0x0a, 0xcd, 0xf5, 0x82, 0x9c, 0x87, 0x98, 0x8d, 0xbc, 0xd9, 0xbf, 0x7e, 0x07,
	0x66, 0x77, 0x61, 0xbb, 0xd1, 0x3c, 0x39, 0xc8, 0x5b, 0x66, 0xfc, 0xa1, 0xa2, 0x66, 0x8c, 0x60,
	0x42, 0x53, 0xd6, 0x96, 0x31, 0x23, 0x17, 0x61, 0x8e, 0x2b, 0xb8, 0xc9, 0x91, 0x40, 0xb1, 0x76,
	0x22, 0x53, 0x16, 0xcc, 0xc9, 0x25, 0x18, 0xd1, 0x41, 0xf0, 0x35, 0x74, 0xb2, 0x4f, 0xe7, 0xc1,
	0x9c, 0x5c, 0x06, 0xca, 0x36, 0x00, 0xe5, 0x22, 0x98, 0x93, 0x2b, 0x39, 0x6a, 0x1a, 0x98, 0xa0,
	0xd3, 0x3d, 0xa9, 0x43, 0xfe, 0x27, 0x23, 0x18, 0xf0, 0xa2, 0x89, 0xff, 0x8f, 0x2e, 0x84, 0x13,
	0xa9, 0x74, 0xc8, 0x92, 0xc4, 0x4b, 0xe8, 0x98, 0x5c, 0xdd, 0x6e, 0x34, 0xcf, 0x0c, 0xaa, 0x20,
	0xbe, 0x8b, 0xce, 0x77, 0xe7, 0xd1, 0x84, 0x8a, 0x31, 0x83, 0x55, 0x5d, 0x83, 0x39, 0x57, 0x30,
	0x93, 0xfb, 0x45, 0x3b, 0xcf, 0xdd, 0xeb, 0x36, 0xf7, 0xab, 0xa8, 0xd9, 0x9f, 0x21, 0x8f, 0x8e,
	0x60, 0x32, 0x37, 0xb6, 0x1b, 0xcd, 0xc6, 0x60, 0xd9, 0xc6, 0x0f, 0xd0, 0xd5, 0x9e, 0xa4, 0xa2,
	0x4f, 0xd5, 0x98, 0x0b, 0x5f, 0xc4, 0x3c, 0xa2, 0x5a, 0x2a, 0x72, 0x13, 0x4c, 0x5c, 0x47, 0x81,
	0x4b, 0xf3, 0x97, 0x51, 0x94, 0x29, 0x1a, 0x2d, 0x08, 0x01, 0xa1, 0x83, 0x98, 0xf5, 0xf9, 0xc1,
	0x5e, 0xa0, 0xe4, 0x21, 0xd7, 0x74, 0x94, 0x30, 0x72, 0x0b, 0x24, 0x55, 0xd0, 0x8c, 0xdb, 0xe1,
	0x87, 0x87, 0x03, 0x53, 0x08, 0xd2, 0x72, 0xdc, 0x2d, 0x3b, 0xee, 0x1a, 0x0a, 0xdf, 0x47, 0x57,
	0x5e, 0x7f, 0x1d, 0xce, 0x14, 0xa3, 0xf1, 0xd0, 0x74, 0x01, 0x5b, 0xf9, 0x1f, 0x58, 0xf0, 0x2a,
	0x61, 0x4e, 0x65, 0xa0, 0x58, 0xc8, 0xb4, 0x4e, 0xcc, 0x66, 0xde, 0x86, 0x65, 0xbb, 0x90, 0xd9,
	0xa1, 0x40, 0x31, 0x7f, 0x2f, 0x78, 0x4b, 0xfe, 0x0b, 0x6c, 0xd1, 0x84, 0x9c, 0x9d, 0x69, 0x2e,
	0x45, 0x5b, 0x0a, 0xad, 0x68, 0xa4, 0xfd, 0x0e, 0x69, 0xda, 0x9c, 0xa9, 0xe3, 0x78, 0x07, 0x5d,
	0xab, 0x62, 0xf9, 0x4e, 0x7c, 0x00, 0xfa, 0xb5, 0x1c, 0x7e, 0x81, 0xb6, 0x2c, 0x7e, 0x20, 0x62,
	0xa6, 0x92, 0x85, 0x39, 0x00, 0x65, 0x6d, 0xba, 0x07, 0x91, 0xc7, 0x28, 0xf0, 0x13, 0x74, 0x63,
	0x85, 0xb5, 0xa3, 0x7e, 0x08, 0xb1, 0x1b, 0xd8, 0x72, 0xae, 0x25, 0x03, 0x47, 0xfe, 0xbe, 0x3b,
	0xd7, 0x2a, 0x57, 0x7a, 0x61, 0xbf, 0xa0, 0xff, 0xc8, 0xf5, 0xa2, 0xc4, 0x4d, 0x35, 0xc9, 0xd7,
	0x4b, 0x93, 0x64, 0x4f, 0x05, 0x99, 0x26, 0x2d, 0x5b, 0x4d, 0x6a, 0x30, 0xde, 0x45, 0xb7, 0xab,
	0xce, 0xf4, 0xb3, 0x44, 0xf3, 0x59, 0xc2, 0x99, 0x3a, 0x10, 0x5c, 0x93, 0x8f, 0xe1, 0xc8, 0x1c,
	0xab, 0x31, 0x19, 0x64, 0xf9, 0xee, 0x9c, 0xa9, 0x88, 0xa7, 0x2c, 0x50, 0x3c, 0x62, 0xe4, 0x01,
	0xec, 0xe5, 0x3a, 0xaa, 0x9c, 0x5f, 0xa8, 0xa9, 0xb2, 0xa5, 0xec, 0xa1, 0x3b, 0xbf, 0x25, 0x6c,
	0x72, 0x38, 0xef, 0x40, 0xc4, 0xa0, 0xdb, 0x01, 0x5d, 0x15, 0xc4, 0x2d, 0x84, 0xab, 0xc3, 0x80,
	0xf4, 0x11, 0x48, 0xd7, 0x30, 0xa5, 0xbe, 0xc3, 0x12, 0xfe, 0x3b, 0x53, 0x0b, 0xd0, 0x3f, 0x76,
	0xf5, 0x2e, 0x53, 0x7a, 0xdf, 0x9d, 0xcf, 0xb8, 0xb2, 0xbd, 0x7f, 0xe2, 0x7a, 0x5f, 0xe2, 0xa5,
	0x1b, 0x07, 0xb3, 0x98, 0x6a, 0xf6, 0x96, 0xa9, 0x94, 0x4b, 0x41, 0x9e, 0x80, 0x7c, 0x1d, 0x85,
	0x9f, 0xa2, 0x9b, 0xf9, 0xde, 0x49, 0x4d, 0x93, 0x9e, 0x14, 0xe3, 0x40, 0xa6, 0xdc, 0x00, 0xe4,
	0x53, 0xb0, 0x7f, 0x13, 0x8d, 0x1f, 0xa3, 0xeb, 0xb9, 0x61, 0x79, 0x4e, 0x16, 0x25, 0xf3, 0x29,
	0x78, 0xbf, 0x9e, 0x2c, 0x57, 0x03, 0x27, 0xd0, 0x6e, 0xd6, 0x67, 0x10, 0xb0, 0x82, 0x97, 0x73,
	0x2b, 0xb3, 0xb1, 0x18, 0xe3, 0x19, 0x84, 0x6c, 0xa2, 0xcb, 0x1c, 0x87, 0x8e, 0x7a, 0x7c, 0xca,
	0x35, 0xe4, 0xec, 0xe7, 0x6e, 0x8e, 0x57, 0xb9, 0x72, 0xb4, 0x0e, 0xe5, 0xc9, 0x02, 0xc8, 0x83,
	0x19, 0xd0, 0xe4, 0xb9, 0x3b, 0xda, 0x0a, 0x8d, 0x9f, 0xa3, 0x5b, 0x75, 0xaa, 0x23, 0xff, 0x10,
	0x36, 0xf6, 0x0b, 0x88, 0xdd, 0x2c, 0x28, 0x1d, 0xb1, 0x25, 0x16, 0x32, 0xff, 0x85, 0xeb, 0x48,
	0x89, 0x97, 0x73, 0xb4, 0xd8, 0x80, 0x6a, 0x2e, 0x03, 0xaa, 0xe8, 0xf4, 0x21, 0xf9, 0xd2, 0x9d,
	0xe3, 0x0a, 0xbd, 0x39, 0x72, 0x87, 0x7c, 0x75, 0x5c, 0xe4, 0x8e, 0xb9, 0x5f, 0x2c, 0x35, 0x90,
	0x99, 0x88, 0x7b, 0x52, 0x93, 0x97, 0x90, 0x18, 0x35, 0xb4, 0xf4, 0xbc, 0x37, 0xd5, 0x7b, 0x2a,
	0xee, 0x73, 0xe1, 0x25, 0x52, 0x2a, 0xb2, 0x0b, 0xea, 0xb5, 0xdc, 0x4a, 0x0c, 0x9d, 0xdb, 0x98,
	0xf6, 0x9a, 0x98, 0x9c, 0x2b, 0x63, 0xfa, 0x47, 0x95, 0x71, 0x3a, 0x6e, 0x4c, 0x95, 0x5b, 0x89,
	0x29, 0xc6, 0xe9, 0xae, 0x89, 0x29, 0xc6, 0x59, 0xae, 0x7b, 0x79, 0x6b, 0x7a, 0x60, 0x54, 0x0d,
	0x35, 0xef, 0x95, 0x6a, 0xaa, 0x87, 0x9a, 0xea, 0x2c, 0x85, 0x4b, 0xfd, 0x15, 0xe4, 0xdb, 0x46,
	0xde, 0xd4, 0x02, 0xcf, 0x37, 0x2f, 0x10, 0x16, 0x28, 0x19, 0x67, 0x91, 0xcd, 0xd2, 0xc0, 0xd6,
	0x82, 0x55, 0xc6, 0xea, 0x8b, 0x7e, 0x02, 0x25, 0x67, 0x4c, 0xe9, 0x05, 0xd9, 0x2f, 0xf4, 0x75,
	0xc6, 0xe4, 0x56, 0x89, 0xda, 0x71, 0xc9, 0xc0, 0xd6, 0x8e, 0x3a, 0x6e, 0x6a, 0x87, 0xe7, 0x07,
	0x09, 0x8b, 0xc7, 0x2c, 0x76, 0x2e, 0xa2, 0xd0, 0xd6, 0x8e, 0x35, 0x94, 0x79, 0x03, 0x78, 0xfe,
	0xde, 0x8c, 0x89, 0x21, 0x9f, 0x32, 0x32, 0xb4, 0xaf, 0xe9, 0x12, 0x31, 0xb7, 0xaf, 0xe7, 0xc3,
	0x91, 0x04, 0xc1, 0x81, 0x7d, 0x13, 0x3b, 0x90, 0x55, 0xf8, 0x69, 0x9a, 0xb1, 0xbe, 0xb9, 0xc7,
	0xdf, 0x16, 0x8a, 0x25, 0x64, 0x5e, 0x40, 0x9e, 0xef, 0xd1, 0x88, 0xbd, 0x9c, 0xca, 0x4c, 0x68,
	0xf2, 0x0e, 0xf6, 0xa0, 0x82, 0x59, 0x0d, 0x84, 0xd8, 0x7a, 0xf2, 0x4d, 0xa1, 0x29, 0x31, 0xb3,
	0x9b, 0x9e, 0xef, 0x0b, 0xcd, 0x14, 0x4b, 0xad, 0xcb, 0xdf, 0xda, 0x57, 0x52, 0x15, 0xb5, 0x2e,
	0x14, 0x88, 0xa7, 0xd8, 0x6f, 0x19, 0x3c, 0x68, 0xbf, 0x2b, 0x5c, 0x58, 0xa1, 0xcc, 0xfe, 0x7b,
	0xfe, 0xab, 0x8c, 0x2a, 0x2a, 0x34, 0x63, 0x71, 0x21, 0x18, 0x98, 0x3a, 0xfd, 0x3d, 0xcc, 0x64,
	0x23, 0x6f, 0xf7, 0x73, 0x97, 0xa6, 0xac, 0x12, 0xf5, 0x03, 0x44, 0xad, 0x61, 0xec, 0x2a, 0xf6,
	0x33, 0xa9, 0x59, 0x6c, 0x0f, 0x2a, 0xf9, 0xd1, 0xe6, 0x64, 0x15, 0xb5, 0xbe, 0x1a, 0x87, 0x6d,
	0x0d, 0xfa, 0x09, 0xde, 0x53, 0x2e, 0x64, 0x6e, 0x41, 0xcf, 0x87, 0xa2, 0x6e, 0x4c, 0xa2, 0x22,
	0x62, 0xe4, 0x67, 0xe8, 0xaa, 0x0e, 0xdb, 0x1c, 0x02, 0x27, 0xcb, 0x0b, 0xf3, 0x97, 0x22, 0x87,
	0xaa, 0x78, 0xee, 0xb2, 0xc1, 0x8a, 0x2b, 0x93, 0x2e, 0x5d, 0x76, 0x50, 0x9b, 0x39, 0xcb, 0x3f,
	0x89, 0x51, 0x91, 0x39, 0xcb, 0x7f, 0x09, 0xd8, 0x51, 0xe7, 0xbe, 0x8b, 0xec, 0xbb, 0xd7, 0xc5,
	0xac, 0x77, 0x6f, 0x4c, 0xa1, 0x12, 0x34, 0xe9, 0xb0, 0x91, 0xdd, 0xd5, 0xb8, 0x38, 0x0b, 0x75,
	0xc6, 0xdc, 0xe6, 0x45, 0x62, 0x31, 0x3d, 0x91, 0x31, 0x61, 0xf6, 0x36, 0xaf, 0x80, 0x56, 0xd5,
	0x56, 0x32, 0x4d, 0xfb, 0x54, 0x1d, 0x31, 0x4d, 0x0e, 0xed, 0xbb, 0xbc, 0x02, 0x5a, 0xf7, 0xaa,
	0xef, 0xf7, 0x31, 0xe8, 0xea, 0xb0, 0xb9, 0x25, 0x73, 0x43, 0x97, 0xb8, 0xd9, 0x29, 0x4a, 0x26,
	0xf6, 0x96, 0x5c, 0x4b, 0x9a, 0xb7, 0x9d, 0xe7, 0x77, 0x18, 0x4d, 0x98, 0xaa, 0x85, 0x71, 0x08,
	0xdb, 0xc0, 0x5a, 0xdf, 0x9c, 0xbf, 0x97, 0x5f, 0x8b, 0x93, 0xe0, 0xfc, 0xbf, 0xc0, 0xdc, 0x03,
	0xc5, 0xde, 0x31, 0xf3, 0xb4, 0x66, 0x71, 0x30, 0x27, 0x47, 0xc5, 0xce, 0x57, 0xe0, 0xdd, 0xc7,
	0xe8, 0x98, 0x3f, 0xf6, 0x5d, 0xf7, 0x07, 0x3f, 0x30, 0x7f, 0xe5, 0xe9, 0xeb, 0xc6, 0x5f, 0x8d,
	0xc6, 0xe8, 0x14, 0xfc, 0xa2, 0x3f, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x63, 0xad, 0xcc,
	0x01, 0x10, 0x00, 0x00,
}
