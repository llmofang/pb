// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Login.proto

/*
Package com_htsc_mdc_insight_model is a generated protocol buffer package.

It is generated from these files:
	Login.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	UserWithPassword
	UserWithToken
	DeviceInfo
*/
package com_htsc_mdc_insight_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 登录类型
type ELoginType int32

const (
	ELoginType_DEFAULT_LOGIN_TYPE              ELoginType = 0
	ELoginType_INSIGHT_LOGIN_FOR_DISCOVERY     ELoginType = 1
	ELoginType_THRID_PARTY_LOGIN_FOR_DISCOVERY ELoginType = 2
	ELoginType_LOGIN_FOR_SERVICE               ELoginType = 3
)

var ELoginType_name = map[int32]string{
	0: "DEFAULT_LOGIN_TYPE",
	1: "INSIGHT_LOGIN_FOR_DISCOVERY",
	2: "THRID_PARTY_LOGIN_FOR_DISCOVERY",
	3: "LOGIN_FOR_SERVICE",
}
var ELoginType_value = map[string]int32{
	"DEFAULT_LOGIN_TYPE":              0,
	"INSIGHT_LOGIN_FOR_DISCOVERY":     1,
	"THRID_PARTY_LOGIN_FOR_DISCOVERY": 2,
	"LOGIN_FOR_SERVICE":               3,
}

func (x ELoginType) String() string {
	return proto.EnumName(ELoginType_name, int32(x))
}

// 登录请求
//
// 行情中心的登录场景有三种：
// 一种是行情中心自身的用户，利用行情中心的用户名和密码登录到服务发现网关。
//  在此种登录方式下，需要填充login_type为INSIGHT_LOGIN_FOR_DISCOVERY，
//  并填充uwp字段（uwp的otp等单次校验信息根据系统业务决定是否填充）。
// 第二种是利用第三方系统已经校验过的用户名和Token登录到服务发现网关。
//  在此种登录方式下，需要填充login_type为THRID_PARTY_LOGIN_FOR_DISCOVERY，
//  并填充uwt字段。
// 在上述两种场景下，服务发现网关会在用户登录成功时为用户回送token（由统一认证颁发或原样返回）
// 第三种是用户登录到行情服务网关。
//   在此种登录场景下，需要填充login_type为LOGIN_FOR_SERVICE，
//   客户端在此种场景下登录时，应当填充uwt字段
//
// 客户端在发送登录请求时应当尽可能多地填充DeviceInfo中的字段
//
// 网关会在用户请求登录时回复以LoginResponse，对服务发现网关而言，
// LoginResponse会直接包含服务发现的结果ServiceDiscoveryResponse
//
type LoginRequest struct {
	AppType    int32             `protobuf:"varint,1,opt,name=appType" json:"appType,omitempty"`
	AppVersion string            `protobuf:"bytes,2,opt,name=appVersion" json:"appVersion,omitempty"`
	LoginType  ELoginType        `protobuf:"varint,3,opt,name=loginType,enum=com.htsc.mdc.insight.model.ELoginType" json:"loginType,omitempty"`
	Uwp        *UserWithPassword `protobuf:"bytes,4,opt,name=uwp" json:"uwp,omitempty"`
	Uwt        *UserWithToken    `protobuf:"bytes,5,opt,name=uwt" json:"uwt,omitempty"`
	DeviceInfo *DeviceInfo       `protobuf:"bytes,6,opt,name=deviceInfo" json:"deviceInfo,omitempty"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}

func (m *LoginRequest) GetAppType() int32 {
	if m != nil {
		return m.AppType
	}
	return 0
}

func (m *LoginRequest) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *LoginRequest) GetLoginType() ELoginType {
	if m != nil {
		return m.LoginType
	}
	return ELoginType_DEFAULT_LOGIN_TYPE
}

func (m *LoginRequest) GetUwp() *UserWithPassword {
	if m != nil {
		return m.Uwp
	}
	return nil
}

func (m *LoginRequest) GetUwt() *UserWithToken {
	if m != nil {
		return m.Uwt
	}
	return nil
}

func (m *LoginRequest) GetDeviceInfo() *DeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

// 登录响应
type LoginResponse struct {
	IsSuccess     bool                 `protobuf:"varint,1,opt,name=isSuccess" json:"isSuccess,omitempty"`
	ErrorContext  *InsightErrorContext `protobuf:"bytes,2,opt,name=errorContext" json:"errorContext,omitempty"`
	Token         string               `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	LastLoginTime int64                `protobuf:"varint,4,opt,name=lastLoginTime" json:"lastLoginTime,omitempty"`
	LastLoginIp   string               `protobuf:"bytes,5,opt,name=lastLoginIp" json:"lastLoginIp,omitempty"`
	ReservedInfo  string               `protobuf:"bytes,6,opt,name=reservedInfo" json:"reservedInfo,omitempty"`
	// 当用户登录行情服务网关成功时，行情服务网关会向用户揭示行情来源和站点名称
	DataSource string `protobuf:"bytes,7,opt,name=dataSource" json:"dataSource,omitempty"`
	Site       string `protobuf:"bytes,8,opt,name=site" json:"site,omitempty"`
	// 当用户登录服务发现网关成功时，服务发现网关会在登录响应报文内直接填充服务发现回应
	// 用户也可通过发送ServiceDiscoveryRequest专门要求服务发现网关ServiceDiscoveryResponse
	ServiceDiscoveryResponse *ServiceDiscoveryResponse `protobuf:"bytes,9,opt,name=serviceDiscoveryResponse" json:"serviceDiscoveryResponse,omitempty"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}

func (m *LoginResponse) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *LoginResponse) GetErrorContext() *InsightErrorContext {
	if m != nil {
		return m.ErrorContext
	}
	return nil
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginResponse) GetLastLoginTime() int64 {
	if m != nil {
		return m.LastLoginTime
	}
	return 0
}

func (m *LoginResponse) GetLastLoginIp() string {
	if m != nil {
		return m.LastLoginIp
	}
	return ""
}

func (m *LoginResponse) GetReservedInfo() string {
	if m != nil {
		return m.ReservedInfo
	}
	return ""
}

func (m *LoginResponse) GetDataSource() string {
	if m != nil {
		return m.DataSource
	}
	return ""
}

func (m *LoginResponse) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *LoginResponse) GetServiceDiscoveryResponse() *ServiceDiscoveryResponse {
	if m != nil {
		return m.ServiceDiscoveryResponse
	}
	return nil
}

// 以密码方式登录时的用户信息
type UserWithPassword struct {
	UserName string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Otp      string `protobuf:"bytes,3,opt,name=otp" json:"otp,omitempty"`
	Captcha  string `protobuf:"bytes,4,opt,name=captcha" json:"captcha,omitempty"`
	Sms      string `protobuf:"bytes,5,opt,name=sms" json:"sms,omitempty"`
}

func (m *UserWithPassword) Reset()         { *m = UserWithPassword{} }
func (m *UserWithPassword) String() string { return proto.CompactTextString(m) }
func (*UserWithPassword) ProtoMessage()    {}

func (m *UserWithPassword) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserWithPassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UserWithPassword) GetOtp() string {
	if m != nil {
		return m.Otp
	}
	return ""
}

func (m *UserWithPassword) GetCaptcha() string {
	if m != nil {
		return m.Captcha
	}
	return ""
}

func (m *UserWithPassword) GetSms() string {
	if m != nil {
		return m.Sms
	}
	return ""
}

// 以Token方式登录时的用户信息
type UserWithToken struct {
	UserName string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *UserWithToken) Reset()         { *m = UserWithToken{} }
func (m *UserWithToken) String() string { return proto.CompactTextString(m) }
func (*UserWithToken) ProtoMessage()    {}

func (m *UserWithToken) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *UserWithToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 登录行情网关的设备信息
// 业务系统在登录时应当尽可能地填充下列字段
type DeviceInfo struct {
	// deviceId和deviceMac至少应当填充一项
	DeviceId        string `protobuf:"bytes,1,opt,name=deviceId" json:"deviceId,omitempty"`
	DeviceMac       string `protobuf:"bytes,2,opt,name=deviceMac" json:"deviceMac,omitempty"`
	DeviceHarddisk  string `protobuf:"bytes,3,opt,name=deviceHarddisk" json:"deviceHarddisk,omitempty"`
	DeviceCPU       string `protobuf:"bytes,4,opt,name=deviceCPU" json:"deviceCPU,omitempty"`
	CellphoneNumber string `protobuf:"bytes,5,opt,name=cellphoneNumber" json:"cellphoneNumber,omitempty"`
	CellphoneImei   string `protobuf:"bytes,6,opt,name=cellphoneImei" json:"cellphoneImei,omitempty"`
}

func (m *DeviceInfo) Reset()         { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()    {}

func (m *DeviceInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DeviceInfo) GetDeviceMac() string {
	if m != nil {
		return m.DeviceMac
	}
	return ""
}

func (m *DeviceInfo) GetDeviceHarddisk() string {
	if m != nil {
		return m.DeviceHarddisk
	}
	return ""
}

func (m *DeviceInfo) GetDeviceCPU() string {
	if m != nil {
		return m.DeviceCPU
	}
	return ""
}

func (m *DeviceInfo) GetCellphoneNumber() string {
	if m != nil {
		return m.CellphoneNumber
	}
	return ""
}

func (m *DeviceInfo) GetCellphoneImei() string {
	if m != nil {
		return m.CellphoneImei
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "com.htsc.mdc.insight.model.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "com.htsc.mdc.insight.model.LoginResponse")
	proto.RegisterType((*UserWithPassword)(nil), "com.htsc.mdc.insight.model.UserWithPassword")
	proto.RegisterType((*UserWithToken)(nil), "com.htsc.mdc.insight.model.UserWithToken")
	proto.RegisterType((*DeviceInfo)(nil), "com.htsc.mdc.insight.model.DeviceInfo")
	proto.RegisterEnum("com.htsc.mdc.insight.model.ELoginType", ELoginType_name, ELoginType_value)
}
