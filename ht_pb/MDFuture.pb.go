// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MDFuture.proto

package ht_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//期货
type MDFuture struct {
	HTSCSecurityID          string            `protobuf:"bytes,1,opt,name=HTSCSecurityID,proto3" json:"HTSCSecurityID,omitempty"`
	MDDate                  int32             `protobuf:"varint,2,opt,name=MDDate,proto3" json:"MDDate,omitempty"`
	MDTime                  int32             `protobuf:"varint,3,opt,name=MDTime,proto3" json:"MDTime,omitempty"`
	DataTimestamp           int64             `protobuf:"varint,4,opt,name=DataTimestamp,proto3" json:"DataTimestamp,omitempty"`
	TradingPhaseCode        string            `protobuf:"bytes,5,opt,name=TradingPhaseCode,proto3" json:"TradingPhaseCode,omitempty"`
	SecurityIDSource        ESecurityIDSource `protobuf:"varint,6,opt,name=securityIDSource,proto3,enum=com.htsc.mdc.model.ESecurityIDSource" json:"securityIDSource,omitempty"`
	SecurityType            ESecurityType     `protobuf:"varint,7,opt,name=securityType,proto3,enum=com.htsc.mdc.model.ESecurityType" json:"securityType,omitempty"`
	MaxPx                   int64             `protobuf:"varint,8,opt,name=MaxPx,proto3" json:"MaxPx,omitempty"`
	MinPx                   int64             `protobuf:"varint,9,opt,name=MinPx,proto3" json:"MinPx,omitempty"`
	PreClosePx              int64             `protobuf:"varint,10,opt,name=PreClosePx,proto3" json:"PreClosePx,omitempty"`
	NumTrades               int64             `protobuf:"varint,11,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	TotalVolumeTrade        int64             `protobuf:"varint,12,opt,name=TotalVolumeTrade,proto3" json:"TotalVolumeTrade,omitempty"`
	TotalValueTrade         int64             `protobuf:"varint,13,opt,name=TotalValueTrade,proto3" json:"TotalValueTrade,omitempty"`
	LastPx                  int64             `protobuf:"varint,14,opt,name=LastPx,proto3" json:"LastPx,omitempty"`
	OpenPx                  int64             `protobuf:"varint,15,opt,name=OpenPx,proto3" json:"OpenPx,omitempty"`
	ClosePx                 int64             `protobuf:"varint,16,opt,name=ClosePx,proto3" json:"ClosePx,omitempty"`
	HighPx                  int64             `protobuf:"varint,17,opt,name=HighPx,proto3" json:"HighPx,omitempty"`
	LowPx                   int64             `protobuf:"varint,18,opt,name=LowPx,proto3" json:"LowPx,omitempty"`
	TradingDate             int32             `protobuf:"varint,19,opt,name=TradingDate,proto3" json:"TradingDate,omitempty"`
	PreOpenInterest         int64             `protobuf:"varint,20,opt,name=PreOpenInterest,proto3" json:"PreOpenInterest,omitempty"`
	PreSettlePrice          int64             `protobuf:"varint,21,opt,name=PreSettlePrice,proto3" json:"PreSettlePrice,omitempty"`
	OpenInterest            int64             `protobuf:"varint,22,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	SettlePrice             int64             `protobuf:"varint,23,opt,name=SettlePrice,proto3" json:"SettlePrice,omitempty"`
	PreDelta                int64             `protobuf:"varint,24,opt,name=PreDelta,proto3" json:"PreDelta,omitempty"`
	CurrDelta               int64             `protobuf:"varint,25,opt,name=CurrDelta,proto3" json:"CurrDelta,omitempty"`
	MiddlePx                int64             `protobuf:"varint,26,opt,name=MiddlePx,proto3" json:"MiddlePx,omitempty"`
	ImpliedBuyPx            int64             `protobuf:"varint,27,opt,name=ImpliedBuyPx,proto3" json:"ImpliedBuyPx,omitempty"`
	ImpliedBuyQty           int64             `protobuf:"varint,28,opt,name=ImpliedBuyQty,proto3" json:"ImpliedBuyQty,omitempty"`
	ImpliedSellPx           int64             `protobuf:"varint,29,opt,name=ImpliedSellPx,proto3" json:"ImpliedSellPx,omitempty"`
	ImpliedSellQty          int64             `protobuf:"varint,30,opt,name=ImpliedSellQty,proto3" json:"ImpliedSellQty,omitempty"`
	PositionTrend           int64             `protobuf:"varint,31,opt,name=PositionTrend,proto3" json:"PositionTrend,omitempty"`
	ChangeSpeed             int64             `protobuf:"varint,32,opt,name=ChangeSpeed,proto3" json:"ChangeSpeed,omitempty"`
	ChangeRate              int64             `protobuf:"varint,33,opt,name=ChangeRate,proto3" json:"ChangeRate,omitempty"`
	ChangeValue             int64             `protobuf:"varint,34,opt,name=ChangeValue,proto3" json:"ChangeValue,omitempty"`
	Swing                   int64             `protobuf:"varint,35,opt,name=Swing,proto3" json:"Swing,omitempty"`
	CommodityContractNumber string            `protobuf:"bytes,36,opt,name=CommodityContractNumber,proto3" json:"CommodityContractNumber,omitempty"`
	ExchangeDate            int32             `protobuf:"varint,37,opt,name=ExchangeDate,proto3" json:"ExchangeDate,omitempty"`
	ExchangeTime            int32             `protobuf:"varint,38,opt,name=ExchangeTime,proto3" json:"ExchangeTime,omitempty"`
	ChannelNo               int32             `protobuf:"varint,50,opt,name=ChannelNo,proto3" json:"ChannelNo,omitempty"`
	BuyPriceQueue           []int64           `protobuf:"varint,51,rep,packed,name=BuyPriceQueue,proto3" json:"BuyPriceQueue,omitempty"`
	BuyOrderQtyQueue        []int64           `protobuf:"varint,52,rep,packed,name=BuyOrderQtyQueue,proto3" json:"BuyOrderQtyQueue,omitempty"`
	SellPriceQueue          []int64           `protobuf:"varint,53,rep,packed,name=SellPriceQueue,proto3" json:"SellPriceQueue,omitempty"`
	SellOrderQtyQueue       []int64           `protobuf:"varint,54,rep,packed,name=SellOrderQtyQueue,proto3" json:"SellOrderQtyQueue,omitempty"`
	BuyOrderQueue           []int64           `protobuf:"varint,55,rep,packed,name=BuyOrderQueue,proto3" json:"BuyOrderQueue,omitempty"`
	SellOrderQueue          []int64           `protobuf:"varint,56,rep,packed,name=SellOrderQueue,proto3" json:"SellOrderQueue,omitempty"`
	BuyNumOrdersQueue       []int64           `protobuf:"varint,57,rep,packed,name=BuyNumOrdersQueue,proto3" json:"BuyNumOrdersQueue,omitempty"`
	SellNumOrdersQueue      []int64           `protobuf:"varint,58,rep,packed,name=SellNumOrdersQueue,proto3" json:"SellNumOrdersQueue,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}          `json:"-"`
	XXX_unrecognized        []byte            `json:"-"`
	XXX_sizecache           int32             `json:"-"`
}

func (m *MDFuture) Reset()         { *m = MDFuture{} }
func (m *MDFuture) String() string { return proto.CompactTextString(m) }
func (*MDFuture) ProtoMessage()    {}
func (*MDFuture) Descriptor() ([]byte, []int) {
	return fileDescriptor_043780cc9b0fc57c, []int{0}
}

func (m *MDFuture) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MDFuture.Unmarshal(m, b)
}
func (m *MDFuture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MDFuture.Marshal(b, m, deterministic)
}
func (m *MDFuture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDFuture.Merge(m, src)
}
func (m *MDFuture) XXX_Size() int {
	return xxx_messageInfo_MDFuture.Size(m)
}
func (m *MDFuture) XXX_DiscardUnknown() {
	xxx_messageInfo_MDFuture.DiscardUnknown(m)
}

var xxx_messageInfo_MDFuture proto.InternalMessageInfo

func (m *MDFuture) GetHTSCSecurityID() string {
	if m != nil {
		return m.HTSCSecurityID
	}
	return ""
}

func (m *MDFuture) GetMDDate() int32 {
	if m != nil {
		return m.MDDate
	}
	return 0
}

func (m *MDFuture) GetMDTime() int32 {
	if m != nil {
		return m.MDTime
	}
	return 0
}

func (m *MDFuture) GetDataTimestamp() int64 {
	if m != nil {
		return m.DataTimestamp
	}
	return 0
}

func (m *MDFuture) GetTradingPhaseCode() string {
	if m != nil {
		return m.TradingPhaseCode
	}
	return ""
}

func (m *MDFuture) GetSecurityIDSource() ESecurityIDSource {
	if m != nil {
		return m.SecurityIDSource
	}
	return ESecurityIDSource_DefaultSecurityIDSource
}

func (m *MDFuture) GetSecurityType() ESecurityType {
	if m != nil {
		return m.SecurityType
	}
	return ESecurityType_DefaultSecurityType
}

func (m *MDFuture) GetMaxPx() int64 {
	if m != nil {
		return m.MaxPx
	}
	return 0
}

func (m *MDFuture) GetMinPx() int64 {
	if m != nil {
		return m.MinPx
	}
	return 0
}

func (m *MDFuture) GetPreClosePx() int64 {
	if m != nil {
		return m.PreClosePx
	}
	return 0
}

func (m *MDFuture) GetNumTrades() int64 {
	if m != nil {
		return m.NumTrades
	}
	return 0
}

func (m *MDFuture) GetTotalVolumeTrade() int64 {
	if m != nil {
		return m.TotalVolumeTrade
	}
	return 0
}

func (m *MDFuture) GetTotalValueTrade() int64 {
	if m != nil {
		return m.TotalValueTrade
	}
	return 0
}

func (m *MDFuture) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *MDFuture) GetOpenPx() int64 {
	if m != nil {
		return m.OpenPx
	}
	return 0
}

func (m *MDFuture) GetClosePx() int64 {
	if m != nil {
		return m.ClosePx
	}
	return 0
}

func (m *MDFuture) GetHighPx() int64 {
	if m != nil {
		return m.HighPx
	}
	return 0
}

func (m *MDFuture) GetLowPx() int64 {
	if m != nil {
		return m.LowPx
	}
	return 0
}

func (m *MDFuture) GetTradingDate() int32 {
	if m != nil {
		return m.TradingDate
	}
	return 0
}

func (m *MDFuture) GetPreOpenInterest() int64 {
	if m != nil {
		return m.PreOpenInterest
	}
	return 0
}

func (m *MDFuture) GetPreSettlePrice() int64 {
	if m != nil {
		return m.PreSettlePrice
	}
	return 0
}

func (m *MDFuture) GetOpenInterest() int64 {
	if m != nil {
		return m.OpenInterest
	}
	return 0
}

func (m *MDFuture) GetSettlePrice() int64 {
	if m != nil {
		return m.SettlePrice
	}
	return 0
}

func (m *MDFuture) GetPreDelta() int64 {
	if m != nil {
		return m.PreDelta
	}
	return 0
}

func (m *MDFuture) GetCurrDelta() int64 {
	if m != nil {
		return m.CurrDelta
	}
	return 0
}

func (m *MDFuture) GetMiddlePx() int64 {
	if m != nil {
		return m.MiddlePx
	}
	return 0
}

func (m *MDFuture) GetImpliedBuyPx() int64 {
	if m != nil {
		return m.ImpliedBuyPx
	}
	return 0
}

func (m *MDFuture) GetImpliedBuyQty() int64 {
	if m != nil {
		return m.ImpliedBuyQty
	}
	return 0
}

func (m *MDFuture) GetImpliedSellPx() int64 {
	if m != nil {
		return m.ImpliedSellPx
	}
	return 0
}

func (m *MDFuture) GetImpliedSellQty() int64 {
	if m != nil {
		return m.ImpliedSellQty
	}
	return 0
}

func (m *MDFuture) GetPositionTrend() int64 {
	if m != nil {
		return m.PositionTrend
	}
	return 0
}

func (m *MDFuture) GetChangeSpeed() int64 {
	if m != nil {
		return m.ChangeSpeed
	}
	return 0
}

func (m *MDFuture) GetChangeRate() int64 {
	if m != nil {
		return m.ChangeRate
	}
	return 0
}

func (m *MDFuture) GetChangeValue() int64 {
	if m != nil {
		return m.ChangeValue
	}
	return 0
}

func (m *MDFuture) GetSwing() int64 {
	if m != nil {
		return m.Swing
	}
	return 0
}

func (m *MDFuture) GetCommodityContractNumber() string {
	if m != nil {
		return m.CommodityContractNumber
	}
	return ""
}

func (m *MDFuture) GetExchangeDate() int32 {
	if m != nil {
		return m.ExchangeDate
	}
	return 0
}

func (m *MDFuture) GetExchangeTime() int32 {
	if m != nil {
		return m.ExchangeTime
	}
	return 0
}

func (m *MDFuture) GetChannelNo() int32 {
	if m != nil {
		return m.ChannelNo
	}
	return 0
}

func (m *MDFuture) GetBuyPriceQueue() []int64 {
	if m != nil {
		return m.BuyPriceQueue
	}
	return nil
}

func (m *MDFuture) GetBuyOrderQtyQueue() []int64 {
	if m != nil {
		return m.BuyOrderQtyQueue
	}
	return nil
}

func (m *MDFuture) GetSellPriceQueue() []int64 {
	if m != nil {
		return m.SellPriceQueue
	}
	return nil
}

func (m *MDFuture) GetSellOrderQtyQueue() []int64 {
	if m != nil {
		return m.SellOrderQtyQueue
	}
	return nil
}

func (m *MDFuture) GetBuyOrderQueue() []int64 {
	if m != nil {
		return m.BuyOrderQueue
	}
	return nil
}

func (m *MDFuture) GetSellOrderQueue() []int64 {
	if m != nil {
		return m.SellOrderQueue
	}
	return nil
}

func (m *MDFuture) GetBuyNumOrdersQueue() []int64 {
	if m != nil {
		return m.BuyNumOrdersQueue
	}
	return nil
}

func (m *MDFuture) GetSellNumOrdersQueue() []int64 {
	if m != nil {
		return m.SellNumOrdersQueue
	}
	return nil
}

func init() {
	proto.RegisterType((*MDFuture)(nil), "com.htsc.mdc.insight.model.MDFuture")
}

func init() { proto.RegisterFile("MDFuture.proto", fileDescriptor_043780cc9b0fc57c) }

var fileDescriptor_043780cc9b0fc57c = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x95, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x86, 0xc1, 0xb8, 0x76, 0xec, 0x8d, 0xa5, 0xc8, 0x9b, 0x34, 0xde, 0xaa, 0x69, 0xaa, 0xb8,
	0x49, 0x20, 0xe4, 0x82, 0x48, 0x9d, 0x1e, 0xd2, 0x5e, 0x4a, 0x72, 0x61, 0x03, 0x91, 0xb2, 0x3a,
	0xa0, 0xf7, 0x0c, 0x39, 0x90, 0x08, 0x90, 0x5c, 0x61, 0xb9, 0x44, 0xc8, 0xb7, 0xe9, 0xb3, 0xf5,
	0x49, 0x8a, 0x99, 0xa5, 0x78, 0x90, 0x1a, 0xdf, 0x69, 0xbe, 0xf9, 0x67, 0x38, 0x27, 0x91, 0xac,
	0x3b, 0x9d, 0xfc, 0x95, 0x99, 0x4c, 0x83, 0xbb, 0xd5, 0xca, 0x28, 0xde, 0xf7, 0x55, 0xec, 0x6e,
	0x4c, 0xea, 0xbb, 0x71, 0xe0, 0xbb, 0x61, 0x92, 0x86, 0xeb, 0x8d, 0x71, 0x63, 0x15, 0x40, 0xd4,
	0xbf, 0xbc, 0x59, 0x82, 0x9f, 0xe9, 0xd0, 0x14, 0x77, 0x93, 0xa5, 0xca, 0xb4, 0x5f, 0x06, 0xf5,
	0x9f, 0x54, 0x8e, 0x55, 0xb1, 0x2d, 0xe1, 0xd5, 0xbf, 0x1d, 0x76, 0xba, 0x4b, 0xce, 0xdf, 0xb0,
	0xee, 0xed, 0x6a, 0x39, 0xae, 0xe3, 0x85, 0x33, 0x70, 0x86, 0x67, 0x8b, 0x3d, 0xca, 0x9f, 0xb1,
	0x93, 0xe9, 0x64, 0xe2, 0x19, 0x10, 0x0f, 0x06, 0xce, 0xf0, 0x78, 0x51, 0x5a, 0x96, 0xaf, 0xc2,
	0x18, 0xc4, 0xd1, 0x8e, 0xa3, 0xc5, 0x5f, 0xb1, 0xce, 0xc4, 0x33, 0x1e, 0xfe, 0x4e, 0x8d, 0x17,
	0x6f, 0xc5, 0x37, 0x03, 0x67, 0x78, 0xb4, 0x68, 0x43, 0xfe, 0x96, 0xf5, 0x56, 0xda, 0x0b, 0xc2,
	0x64, 0x2d, 0x37, 0x5e, 0x0a, 0x63, 0x15, 0x80, 0x38, 0xa6, 0xe7, 0x1f, 0x70, 0x3e, 0x67, 0xbd,
	0x74, 0xaf, 0x4b, 0x71, 0x32, 0x70, 0x86, 0xdd, 0xeb, 0xd7, 0x6e, 0x6b, 0x36, 0x34, 0x13, 0xf7,
	0x60, 0x24, 0x8b, 0x83, 0x70, 0x7e, 0xc3, 0xce, 0xd3, 0xc6, 0x7c, 0xc4, 0x43, 0x4a, 0xf7, 0xf2,
	0xde, 0x74, 0x28, 0x5c, 0xb4, 0xc2, 0xf8, 0x53, 0x76, 0x3c, 0xf5, 0x72, 0x99, 0x8b, 0x53, 0xea,
	0xd1, 0x1a, 0x44, 0xc3, 0x44, 0xe6, 0xe2, 0xac, 0xa4, 0x68, 0xf0, 0x17, 0x8c, 0x49, 0x0d, 0xe3,
	0x48, 0xa5, 0x20, 0x73, 0xc1, 0xc8, 0xd5, 0x20, 0xfc, 0x39, 0x3b, 0x9b, 0x65, 0x31, 0x36, 0x0f,
	0xa9, 0x78, 0x44, 0xee, 0x1a, 0xd0, 0xbc, 0x94, 0xf1, 0xa2, 0xbf, 0x55, 0x94, 0xc5, 0x40, 0x50,
	0x9c, 0x93, 0xe8, 0x80, 0xf3, 0x21, 0x7b, 0x6c, 0x99, 0x17, 0x65, 0xa5, 0xb4, 0x43, 0xd2, 0x7d,
	0x8c, 0x3b, 0xfc, 0xe8, 0xa5, 0x46, 0xe6, 0xa2, 0x4b, 0x82, 0xd2, 0x42, 0xfe, 0x69, 0x0b, 0xd8,
	0xc2, 0x63, 0xcb, 0xad, 0xc5, 0x05, 0x7b, 0xb8, 0x6b, 0xa0, 0x47, 0x8e, 0x9d, 0x89, 0x11, 0xb7,
	0xe1, 0x7a, 0x23, 0x73, 0x71, 0x61, 0x23, 0xac, 0x85, 0xb3, 0xf8, 0xa8, 0xbe, 0xc8, 0x5c, 0x70,
	0x3b, 0x0b, 0x32, 0xf8, 0x80, 0x3d, 0x2a, 0xb7, 0x4c, 0x87, 0xf5, 0x84, 0x0e, 0xa8, 0x89, 0xb0,
	0x07, 0xa9, 0x01, 0x1f, 0x7b, 0x97, 0x18, 0xd0, 0x90, 0x1a, 0xf1, 0xd4, 0xf6, 0xb0, 0x87, 0xf1,
	0x8e, 0xa5, 0x86, 0x25, 0x18, 0x13, 0x81, 0xd4, 0xa1, 0x0f, 0xe2, 0x5b, 0x12, 0xee, 0x51, 0x7e,
	0xc5, 0xce, 0x5b, 0xe9, 0x9e, 0x91, 0xaa, 0xc5, 0xb0, 0xae, 0x66, 0xa2, 0x4b, 0x92, 0x34, 0x11,
	0xef, 0xb3, 0x53, 0xa9, 0x61, 0x02, 0x91, 0xf1, 0x84, 0x20, 0x77, 0x65, 0xe3, 0x06, 0xc7, 0x99,
	0xd6, 0xd6, 0xf9, 0x9d, 0xdd, 0x60, 0x05, 0x30, 0x72, 0x1a, 0x06, 0x41, 0x84, 0xc3, 0xeb, 0xdb,
	0xc8, 0x9d, 0x8d, 0xb5, 0xdd, 0xc5, 0xdb, 0x28, 0x84, 0x60, 0x94, 0x15, 0x32, 0x17, 0xdf, 0xdb,
	0xda, 0x9a, 0x0c, 0xff, 0x57, 0xb5, 0x3d, 0x37, 0x85, 0x78, 0x6e, 0xff, 0x57, 0x2d, 0xd8, 0x50,
	0x2d, 0x21, 0x8a, 0x64, 0x2e, 0x7e, 0x68, 0xa9, 0x2c, 0xc4, 0x99, 0x35, 0x00, 0x26, 0x7b, 0x61,
	0x67, 0xd6, 0xa6, 0x98, 0x4d, 0xaa, 0x34, 0x34, 0xa1, 0x4a, 0x56, 0x1a, 0x92, 0x40, 0xfc, 0x68,
	0xb3, 0xb5, 0x20, 0x4e, 0x6d, 0xbc, 0xf1, 0x92, 0x35, 0x2c, 0xb7, 0x00, 0x81, 0x18, 0xd8, 0xa9,
	0x35, 0x10, 0xde, 0xbe, 0x35, 0x17, 0xb8, 0xee, 0x97, 0xf6, 0xf6, 0x6b, 0x52, 0x67, 0xa0, 0xdb,
	0x14, 0x57, 0xcd, 0x0c, 0x84, 0xf0, 0x8e, 0x96, 0x5f, 0xc2, 0x64, 0x2d, 0x7e, 0xb2, 0x77, 0x44,
	0x06, 0xff, 0xc0, 0x2e, 0xc7, 0x2a, 0x8e, 0x55, 0x10, 0x9a, 0x62, 0xac, 0x12, 0xa3, 0x3d, 0xdf,
	0xcc, 0xb2, 0xf8, 0x33, 0x68, 0xf1, 0x8a, 0x5e, 0x26, 0x5f, 0x73, 0xe3, 0xc4, 0x6f, 0x72, 0x9f,
	0x1e, 0x40, 0x27, 0xf8, 0x9a, 0x4e, 0xb0, 0xc5, 0x9a, 0x1a, 0x7a, 0xcf, 0xbd, 0x69, 0x6b, 0xe8,
	0x6d, 0x87, 0x3b, 0xdf, 0x78, 0x49, 0x02, 0xd1, 0x4c, 0x89, 0x6b, 0x12, 0xd4, 0x80, 0x0f, 0x59,
	0x07, 0x97, 0x87, 0x97, 0x33, 0xcf, 0x20, 0x03, 0xf1, 0x7e, 0x70, 0x34, 0x3c, 0x1a, 0x3d, 0xe8,
	0x39, 0x8b, 0xb6, 0x83, 0xbb, 0xac, 0x37, 0xca, 0x8a, 0x4f, 0x3a, 0x00, 0x3d, 0x37, 0x85, 0x15,
	0xff, 0x52, 0x89, 0x0f, 0x7c, 0xfc, 0x2d, 0xeb, 0xd2, 0x2e, 0xeb, 0xd4, 0xbf, 0x56, 0xea, 0x3d,
	0x0f, 0x7f, 0xc7, 0x2e, 0x90, 0xb4, 0x93, 0xff, 0x56, 0xc9, 0x0f, 0x9d, 0x65, 0xdd, 0x96, 0x91,
	0xfa, 0xf7, 0x56, 0xdd, 0xb5, 0x63, 0x57, 0x47, 0x43, 0xfa, 0xa1, 0x5d, 0x47, 0x43, 0xfb, 0x8e,
	0x5d, 0x8c, 0xb2, 0x62, 0x96, 0xc5, 0xc4, 0x52, 0x2b, 0xff, 0xa3, 0xae, 0xe3, 0xc0, 0xc9, 0xaf,
	0x19, 0xc7, 0x1c, 0x7b, 0x21, 0x7f, 0x56, 0x21, 0xff, 0xe3, 0x1d, 0xfd, 0xcc, 0xee, 0xf9, 0x60,
	0x8e, 0xaa, 0x8f, 0xab, 0xc4, 0x2f, 0x62, 0x7a, 0xeb, 0xfc, 0xe3, 0x38, 0x9f, 0x4f, 0xe8, 0xf3,
	0xf8, 0xfe, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xe6, 0x8c, 0xa3, 0x7a, 0x07, 0x00, 0x00,
}
