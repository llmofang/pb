// Code generated by protoc-gen-go.
// source: microserver.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	microserver.proto

It has these top-level messages:
	GetNameParams
	GetKeysParams
	GetDataParams
	PushDataParams
	NameResponse
	KeysResponse
	DataResponse
	PushResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetNameParams struct {
}

func (m *GetNameParams) Reset()                    { *m = GetNameParams{} }
func (m *GetNameParams) String() string            { return proto.CompactTextString(m) }
func (*GetNameParams) ProtoMessage()               {}
func (*GetNameParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetKeysParams struct {
	Values map[string]string `protobuf:"bytes,1,rep,name=Values,json=values" json:"Values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetKeysParams) Reset()                    { *m = GetKeysParams{} }
func (m *GetKeysParams) String() string            { return proto.CompactTextString(m) }
func (*GetKeysParams) ProtoMessage()               {}
func (*GetKeysParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetKeysParams) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type GetDataParams struct {
	UUID   string            `protobuf:"bytes,1,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
	Url    string            `protobuf:"bytes,2,opt,name=Url,json=url" json:"Url,omitempty"`
	Values map[string]string `protobuf:"bytes,3,rep,name=Values,json=values" json:"Values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetDataParams) Reset()                    { *m = GetDataParams{} }
func (m *GetDataParams) String() string            { return proto.CompactTextString(m) }
func (*GetDataParams) ProtoMessage()               {}
func (*GetDataParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetDataParams) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *GetDataParams) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GetDataParams) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type PushDataParams struct {
	Data []byte `protobuf:"bytes,1,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *PushDataParams) Reset()                    { *m = PushDataParams{} }
func (m *PushDataParams) String() string            { return proto.CompactTextString(m) }
func (*PushDataParams) ProtoMessage()               {}
func (*PushDataParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PushDataParams) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type NameResponse struct {
	Name string `protobuf:"bytes,1,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *NameResponse) Reset()                    { *m = NameResponse{} }
func (m *NameResponse) String() string            { return proto.CompactTextString(m) }
func (*NameResponse) ProtoMessage()               {}
func (*NameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NameResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type KeysResponse struct {
	Keys []string `protobuf:"bytes,1,rep,name=Keys,json=keys" json:"Keys,omitempty"`
}

func (m *KeysResponse) Reset()                    { *m = KeysResponse{} }
func (m *KeysResponse) String() string            { return proto.CompactTextString(m) }
func (*KeysResponse) ProtoMessage()               {}
func (*KeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *KeysResponse) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type DataResponse struct {
	ErrCode  uint32 `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	Response []byte `protobuf:"bytes,2,opt,name=Response,json=response,proto3" json:"Response,omitempty"`
}

func (m *DataResponse) Reset()                    { *m = DataResponse{} }
func (m *DataResponse) String() string            { return proto.CompactTextString(m) }
func (*DataResponse) ProtoMessage()               {}
func (*DataResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DataResponse) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *DataResponse) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

type PushResponse struct {
	ErrCode  uint32 `protobuf:"varint,1,opt,name=ErrCode,json=errCode" json:"ErrCode,omitempty"`
	Response []byte `protobuf:"bytes,2,opt,name=Response,json=response,proto3" json:"Response,omitempty"`
}

func (m *PushResponse) Reset()                    { *m = PushResponse{} }
func (m *PushResponse) String() string            { return proto.CompactTextString(m) }
func (*PushResponse) ProtoMessage()               {}
func (*PushResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PushResponse) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *PushResponse) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*GetNameParams)(nil), "pb.GetNameParams")
	proto.RegisterType((*GetKeysParams)(nil), "pb.GetKeysParams")
	proto.RegisterType((*GetDataParams)(nil), "pb.GetDataParams")
	proto.RegisterType((*PushDataParams)(nil), "pb.PushDataParams")
	proto.RegisterType((*NameResponse)(nil), "pb.NameResponse")
	proto.RegisterType((*KeysResponse)(nil), "pb.KeysResponse")
	proto.RegisterType((*DataResponse)(nil), "pb.DataResponse")
	proto.RegisterType((*PushResponse)(nil), "pb.PushResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MicroFrame service

type MicroFrameClient interface {
	GetName(ctx context.Context, in *GetNameParams, opts ...grpc.CallOption) (*NameResponse, error)
	GetKeys(ctx context.Context, in *GetKeysParams, opts ...grpc.CallOption) (*KeysResponse, error)
	GetData(ctx context.Context, in *GetDataParams, opts ...grpc.CallOption) (*DataResponse, error)
	GetResponse(ctx context.Context, in *PushDataParams, opts ...grpc.CallOption) (*PushResponse, error)
}

type microFrameClient struct {
	cc *grpc.ClientConn
}

func NewMicroFrameClient(cc *grpc.ClientConn) MicroFrameClient {
	return &microFrameClient{cc}
}

func (c *microFrameClient) GetName(ctx context.Context, in *GetNameParams, opts ...grpc.CallOption) (*NameResponse, error) {
	out := new(NameResponse)
	err := grpc.Invoke(ctx, "/pb.MicroFrame/GetName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microFrameClient) GetKeys(ctx context.Context, in *GetKeysParams, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := grpc.Invoke(ctx, "/pb.MicroFrame/GetKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microFrameClient) GetData(ctx context.Context, in *GetDataParams, opts ...grpc.CallOption) (*DataResponse, error) {
	out := new(DataResponse)
	err := grpc.Invoke(ctx, "/pb.MicroFrame/GetData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microFrameClient) GetResponse(ctx context.Context, in *PushDataParams, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := grpc.Invoke(ctx, "/pb.MicroFrame/GetResponse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MicroFrame service

type MicroFrameServer interface {
	GetName(context.Context, *GetNameParams) (*NameResponse, error)
	GetKeys(context.Context, *GetKeysParams) (*KeysResponse, error)
	GetData(context.Context, *GetDataParams) (*DataResponse, error)
	GetResponse(context.Context, *PushDataParams) (*PushResponse, error)
}

func RegisterMicroFrameServer(s *grpc.Server, srv MicroFrameServer) {
	s.RegisterService(&_MicroFrame_serviceDesc, srv)
}

func _MicroFrame_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroFrameServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MicroFrame/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroFrameServer).GetName(ctx, req.(*GetNameParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroFrame_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeysParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroFrameServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MicroFrame/GetKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroFrameServer).GetKeys(ctx, req.(*GetKeysParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroFrame_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroFrameServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MicroFrame/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroFrameServer).GetData(ctx, req.(*GetDataParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroFrame_GetResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDataParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroFrameServer).GetResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MicroFrame/GetResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroFrameServer).GetResponse(ctx, req.(*PushDataParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _MicroFrame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MicroFrame",
	HandlerType: (*MicroFrameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _MicroFrame_GetName_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _MicroFrame_GetKeys_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _MicroFrame_GetData_Handler,
		},
		{
			MethodName: "GetResponse",
			Handler:    _MicroFrame_GetResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microserver.proto",
}

func init() { proto.RegisterFile("microserver.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x51, 0x4b, 0x32, 0x41,
	0x14, 0x75, 0x5d, 0x3f, 0xf5, 0xbb, 0xae, 0xa5, 0x43, 0x0f, 0x22, 0x04, 0x31, 0xf4, 0xe0, 0xd3,
	0x12, 0x86, 0x50, 0xbd, 0xa6, 0x45, 0x44, 0x21, 0x03, 0xf6, 0x3e, 0xe6, 0x40, 0x91, 0xba, 0xcb,
	0xcc, 0xae, 0xe0, 0x63, 0xbf, 0xa6, 0xdf, 0xd4, 0xbf, 0x69, 0xee, 0xcc, 0xb8, 0x3b, 0xfb, 0x5c,
	0x6f, 0xf7, 0x5c, 0xcf, 0x39, 0x9c, 0x39, 0xde, 0x85, 0xfe, 0xe6, 0xfd, 0x55, 0x26, 0x4a, 0xc8,
	0x9d, 0x90, 0x71, 0x2a, 0x93, 0x2c, 0x21, 0xf5, 0x74, 0x49, 0x8f, 0xa1, 0x7b, 0x2f, 0xb2, 0x67,
	0xbe, 0x11, 0x73, 0x2e, 0xf9, 0x46, 0xd1, 0xcf, 0xc0, 0x6c, 0x1e, 0xc5, 0x5e, 0xd9, 0x0d, 0x99,
	0x40, 0xf3, 0x85, 0xaf, 0x73, 0xa1, 0x06, 0xc1, 0x59, 0x38, 0xea, 0x8c, 0x4f, 0xe3, 0x74, 0x19,
	0x57, 0x28, 0xb1, 0xfd, 0x7d, 0xb6, 0xcd, 0xe4, 0x9e, 0x35, 0x77, 0x06, 0x0c, 0xaf, 0xa1, 0xe3,
	0xad, 0x49, 0x0f, 0xc2, 0x0f, 0xb1, 0xd7, 0x16, 0xc1, 0xe8, 0x3f, 0xc3, 0x91, 0x9c, 0xc0, 0x3f,
	0x43, 0x1d, 0xd4, 0xcd, 0xce, 0x82, 0x9b, 0xfa, 0x55, 0x40, 0xbf, 0x6c, 0x86, 0x29, 0xcf, 0xb8,
	0xcb, 0x40, 0xa0, 0xb1, 0x58, 0x3c, 0x4c, 0x9d, 0xbc, 0x91, 0xeb, 0x19, 0x1d, 0x17, 0x72, 0xed,
	0xd4, 0x61, 0x2e, 0xd7, 0x5e, 0xd2, 0xb0, 0x92, 0xb4, 0x34, 0xfa, 0xeb, 0xa4, 0xe7, 0x70, 0x34,
	0xcf, 0xd5, 0x5b, 0x35, 0x29, 0x22, 0x23, 0x8f, 0x58, 0x63, 0xa5, 0x67, 0x4a, 0x21, 0xc2, 0x86,
	0x99, 0x50, 0x69, 0xb2, 0x55, 0x02, 0x39, 0x88, 0x0f, 0xaf, 0xd9, 0xea, 0x19, 0x39, 0x58, 0xa8,
	0xcf, 0x41, 0x6c, 0x3a, 0xd7, 0x1c, 0x1d, 0x43, 0xd1, 0x29, 0x44, 0xe8, 0x5d, 0x70, 0x06, 0xd0,
	0x9a, 0x49, 0x79, 0x9b, 0xac, 0xac, 0x55, 0x97, 0xb5, 0x84, 0x85, 0x64, 0x08, 0xed, 0x03, 0xcb,
	0x84, 0x8e, 0x58, 0x5b, 0x3a, 0x8c, 0x2e, 0x98, 0xf9, 0x77, 0x2e, 0xe3, 0xef, 0x00, 0xe0, 0x09,
	0x4f, 0xea, 0x4e, 0x3f, 0x5b, 0x90, 0x0b, 0x68, 0xb9, 0x3b, 0x22, 0x7d, 0xd7, 0x7a, 0x79, 0x54,
	0xc3, 0x1e, 0xae, 0xfc, 0x0a, 0x68, 0xcd, 0x29, 0xf0, 0x8d, 0x85, 0xa2, 0xbc, 0x28, 0xab, 0xf0,
	0x0b, 0x29, 0x14, 0xd8, 0x40, 0xa1, 0x28, 0x8b, 0xb7, 0x0a, 0xbf, 0x1e, 0xad, 0x98, 0x40, 0x47,
	0x93, 0xca, 0x4e, 0x91, 0x52, 0xfd, 0xbf, 0xac, 0xcc, 0xef, 0x83, 0xd6, 0x96, 0x4d, 0xf3, 0x7d,
	0x5c, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x35, 0xd1, 0x9b, 0x50, 0x34, 0x03, 0x00, 0x00,
}
