// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transactionData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transactionData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* TransactionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_transactionData_2eproto() {
  protobuf_AddDesc_transactionData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transactionData.proto");
  GOOGLE_CHECK(file != NULL);
  TransactionData_descriptor_ = file->message_type(0);
  static const int TransactionData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, windcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, actionday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, bsflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, orderkind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, functioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, askorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, bidorder_),
  };
  TransactionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionData_descriptor_,
      TransactionData::default_instance_,
      TransactionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transactionData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionData_descriptor_, &TransactionData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transactionData_2eproto() {
  delete TransactionData::default_instance_;
  delete TransactionData_reflection_;
}

void protobuf_AddDesc_transactionData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025transactionData.proto\022\004comm\"\357\001\n\017Transa"
    "ctionData\022\020\n\010WindCode\030\001 \002(\t\022\014\n\004Code\030\002 \002("
    "\t\022\021\n\tActionDay\030\003 \002(\005\022\014\n\004Time\030\004 \002(\005\022\r\n\005In"
    "dex\030\005 \002(\005\022\r\n\005Price\030\006 \002(\005\022\016\n\006Volume\030\007 \002(\005"
    "\022\020\n\010Turnover\030\010 \002(\005\022\016\n\006BSFlag\030\t \002(\005\022\021\n\tOr"
    "derKind\030\n \002(\t\022\024\n\014FunctionCode\030\013 \002(\t\022\020\n\010A"
    "skOrder\030\014 \002(\005\022\020\n\010BidOrder\030\r \002(\005", 271);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transactionData.proto", &protobuf_RegisterTypes);
  TransactionData::default_instance_ = new TransactionData();
  TransactionData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transactionData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transactionData_2eproto {
  StaticDescriptorInitializer_transactionData_2eproto() {
    protobuf_AddDesc_transactionData_2eproto();
  }
} static_descriptor_initializer_transactionData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TransactionData::kWindCodeFieldNumber;
const int TransactionData::kCodeFieldNumber;
const int TransactionData::kActionDayFieldNumber;
const int TransactionData::kTimeFieldNumber;
const int TransactionData::kIndexFieldNumber;
const int TransactionData::kPriceFieldNumber;
const int TransactionData::kVolumeFieldNumber;
const int TransactionData::kTurnoverFieldNumber;
const int TransactionData::kBSFlagFieldNumber;
const int TransactionData::kOrderKindFieldNumber;
const int TransactionData::kFunctionCodeFieldNumber;
const int TransactionData::kAskOrderFieldNumber;
const int TransactionData::kBidOrderFieldNumber;
#endif  // !_MSC_VER

TransactionData::TransactionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.TransactionData)
}

void TransactionData::InitAsDefaultInstance() {
}

TransactionData::TransactionData(const TransactionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.TransactionData)
}

void TransactionData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  windcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionday_ = 0;
  time_ = 0;
  index_ = 0;
  price_ = 0;
  volume_ = 0;
  turnover_ = 0;
  bsflag_ = 0;
  orderkind_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  functioncode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  askorder_ = 0;
  bidorder_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionData::~TransactionData() {
  // @@protoc_insertion_point(destructor:comm.TransactionData)
  SharedDtor();
}

void TransactionData::SharedDtor() {
  if (windcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete windcode_;
  }
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (orderkind_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orderkind_;
  }
  if (functioncode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete functioncode_;
  }
  if (this != default_instance_) {
  }
}

void TransactionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionData_descriptor_;
}

const TransactionData& TransactionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transactionData_2eproto();
  return *default_instance_;
}

TransactionData* TransactionData::default_instance_ = NULL;

TransactionData* TransactionData::New() const {
  return new TransactionData;
}

void TransactionData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransactionData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(actionday_, turnover_);
    if (has_windcode()) {
      if (windcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        windcode_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(bsflag_, askorder_);
    if (has_orderkind()) {
      if (orderkind_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orderkind_->clear();
      }
    }
    if (has_functioncode()) {
      if (functioncode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        functioncode_->clear();
      }
    }
    bidorder_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.TransactionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string WindCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->windcode().data(), this->windcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "windcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (tag == 18) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ActionDay;
        break;
      }

      // required int32 ActionDay = 3;
      case 3: {
        if (tag == 24) {
         parse_ActionDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionday_)));
          set_has_actionday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Time;
        break;
      }

      // required int32 Time = 4;
      case 4: {
        if (tag == 32) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Index;
        break;
      }

      // required int32 Index = 5;
      case 5: {
        if (tag == 40) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Price;
        break;
      }

      // required int32 Price = 6;
      case 6: {
        if (tag == 48) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Volume;
        break;
      }

      // required int32 Volume = 7;
      case 7: {
        if (tag == 56) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Turnover;
        break;
      }

      // required int32 Turnover = 8;
      case 8: {
        if (tag == 64) {
         parse_Turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_BSFlag;
        break;
      }

      // required int32 BSFlag = 9;
      case 9: {
        if (tag == 72) {
         parse_BSFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsflag_)));
          set_has_bsflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OrderKind;
        break;
      }

      // required string OrderKind = 10;
      case 10: {
        if (tag == 82) {
         parse_OrderKind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderkind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orderkind().data(), this->orderkind().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orderkind");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_FunctionCode;
        break;
      }

      // required string FunctionCode = 11;
      case 11: {
        if (tag == 90) {
         parse_FunctionCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_functioncode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->functioncode().data(), this->functioncode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "functioncode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AskOrder;
        break;
      }

      // required int32 AskOrder = 12;
      case 12: {
        if (tag == 96) {
         parse_AskOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askorder_)));
          set_has_askorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_BidOrder;
        break;
      }

      // required int32 BidOrder = 13;
      case 13: {
        if (tag == 104) {
         parse_BidOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidorder_)));
          set_has_bidorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.TransactionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.TransactionData)
  return false;
#undef DO_
}

void TransactionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.TransactionData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "windcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->windcode(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionday(), output);
  }

  // required int32 Time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // required int32 Index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  // required int32 Price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price(), output);
  }

  // required int32 Volume = 7;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->volume(), output);
  }

  // required int32 Turnover = 8;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->turnover(), output);
  }

  // required int32 BSFlag = 9;
  if (has_bsflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bsflag(), output);
  }

  // required string OrderKind = 10;
  if (has_orderkind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderkind().data(), this->orderkind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderkind");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->orderkind(), output);
  }

  // required string FunctionCode = 11;
  if (has_functioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->functioncode().data(), this->functioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "functioncode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->functioncode(), output);
  }

  // required int32 AskOrder = 12;
  if (has_askorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->askorder(), output);
  }

  // required int32 BidOrder = 13;
  if (has_bidorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bidorder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.TransactionData)
}

::google::protobuf::uint8* TransactionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.TransactionData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "windcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->windcode(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionday(), target);
  }

  // required int32 Time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // required int32 Index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  // required int32 Price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->price(), target);
  }

  // required int32 Volume = 7;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->volume(), target);
  }

  // required int32 Turnover = 8;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->turnover(), target);
  }

  // required int32 BSFlag = 9;
  if (has_bsflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bsflag(), target);
  }

  // required string OrderKind = 10;
  if (has_orderkind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orderkind().data(), this->orderkind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orderkind");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->orderkind(), target);
  }

  // required string FunctionCode = 11;
  if (has_functioncode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->functioncode().data(), this->functioncode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "functioncode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->functioncode(), target);
  }

  // required int32 AskOrder = 12;
  if (has_askorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->askorder(), target);
  }

  // required int32 BidOrder = 13;
  if (has_bidorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bidorder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.TransactionData)
  return target;
}

int TransactionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string WindCode = 1;
    if (has_windcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->windcode());
    }

    // required string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // required int32 ActionDay = 3;
    if (has_actionday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionday());
    }

    // required int32 Time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required int32 Index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 Price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 Volume = 7;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // required int32 Turnover = 8;
    if (has_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turnover());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 BSFlag = 9;
    if (has_bsflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bsflag());
    }

    // required string OrderKind = 10;
    if (has_orderkind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderkind());
    }

    // required string FunctionCode = 11;
    if (has_functioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->functioncode());
    }

    // required int32 AskOrder = 12;
    if (has_askorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askorder());
    }

    // required int32 BidOrder = 13;
    if (has_bidorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidorder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionData::MergeFrom(const TransactionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_windcode()) {
      set_windcode(from.windcode());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_actionday()) {
      set_actionday(from.actionday());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bsflag()) {
      set_bsflag(from.bsflag());
    }
    if (from.has_orderkind()) {
      set_orderkind(from.orderkind());
    }
    if (from.has_functioncode()) {
      set_functioncode(from.functioncode());
    }
    if (from.has_askorder()) {
      set_askorder(from.askorder());
    }
    if (from.has_bidorder()) {
      set_bidorder(from.bidorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionData::CopyFrom(const TransactionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void TransactionData::Swap(TransactionData* other) {
  if (other != this) {
    std::swap(windcode_, other->windcode_);
    std::swap(code_, other->code_);
    std::swap(actionday_, other->actionday_);
    std::swap(time_, other->time_);
    std::swap(index_, other->index_);
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(bsflag_, other->bsflag_);
    std::swap(orderkind_, other->orderkind_);
    std::swap(functioncode_, other->functioncode_);
    std::swap(askorder_, other->askorder_);
    std::swap(bidorder_, other->bidorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionData_descriptor_;
  metadata.reflection = TransactionData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
