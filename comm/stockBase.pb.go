// Code generated by protoc-gen-go.
// source: stockBase.proto
// DO NOT EDIT!

/*
Package comm is a generated protocol buffer package.

It is generated from these files:
	stockBase.proto

It has these top-level messages:
	StockBaseList
	StockBase
*/
package comm

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type StockBaseList struct {
	InfoList         []*StockBase `protobuf:"bytes,1,rep" json:"InfoList,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *StockBaseList) Reset()         { *m = StockBaseList{} }
func (m *StockBaseList) String() string { return proto.CompactTextString(m) }
func (*StockBaseList) ProtoMessage()    {}

func (m *StockBaseList) GetInfoList() []*StockBase {
	if m != nil {
		return m.InfoList
	}
	return nil
}

type StockBase struct {
	HTCode                   *string `protobuf:"bytes,1,req" json:"HTCode,omitempty"`
	SecurityID               *string `protobuf:"bytes,2,req" json:"SecurityID,omitempty"`
	Symbol                   *string `protobuf:"bytes,3,req" json:"Symbol,omitempty"`
	ChiSpelling              *string `protobuf:"bytes,4,req" json:"ChiSpelling,omitempty"`
	EnglishName              *string `protobuf:"bytes,5,req" json:"EnglishName,omitempty"`
	SecurityIDSource         *int32  `protobuf:"varint,6,req" json:"SecurityIDSource,omitempty"`
	SecurityType             *int32  `protobuf:"varint,7,req" json:"SecurityType,omitempty"`
	SecuritySubType          *string `protobuf:"bytes,8,req" json:"SecuritySubType,omitempty"`
	ListDate                 *string `protobuf:"bytes,9,req" json:"ListDate,omitempty"`
	Currency                 *string `protobuf:"bytes,10,req" json:"Currency,omitempty"`
	OutstandingShare         *int64  `protobuf:"varint,11,req" json:"OutstandingShare,omitempty"`
	PublicFloatShareQuantity *int64  `protobuf:"varint,12,req" json:"PublicFloatShareQuantity,omitempty"`
	MDDate                   *int32  `protobuf:"varint,13,req" json:"MDDate,omitempty"`
	TradingPhaseCode         *string `protobuf:"bytes,14,req" json:"TradingPhaseCode,omitempty"`
	PreClosePx               *int64  `protobuf:"varint,15,req" json:"PreClosePx,omitempty"`
	MaxPx                    *int64  `protobuf:"varint,16,req" json:"MaxPx,omitempty"`
	MinPx                    *int64  `protobuf:"varint,17,req" json:"MinPx,omitempty"`
	XXX_unrecognized         []byte  `json:"-"`
}

func (m *StockBase) Reset()         { *m = StockBase{} }
func (m *StockBase) String() string { return proto.CompactTextString(m) }
func (*StockBase) ProtoMessage()    {}

func (m *StockBase) GetHTCode() string {
	if m != nil && m.HTCode != nil {
		return *m.HTCode
	}
	return ""
}

func (m *StockBase) GetSecurityID() string {
	if m != nil && m.SecurityID != nil {
		return *m.SecurityID
	}
	return ""
}

func (m *StockBase) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *StockBase) GetChiSpelling() string {
	if m != nil && m.ChiSpelling != nil {
		return *m.ChiSpelling
	}
	return ""
}

func (m *StockBase) GetEnglishName() string {
	if m != nil && m.EnglishName != nil {
		return *m.EnglishName
	}
	return ""
}

func (m *StockBase) GetSecurityIDSource() int32 {
	if m != nil && m.SecurityIDSource != nil {
		return *m.SecurityIDSource
	}
	return 0
}

func (m *StockBase) GetSecurityType() int32 {
	if m != nil && m.SecurityType != nil {
		return *m.SecurityType
	}
	return 0
}

func (m *StockBase) GetSecuritySubType() string {
	if m != nil && m.SecuritySubType != nil {
		return *m.SecuritySubType
	}
	return ""
}

func (m *StockBase) GetListDate() string {
	if m != nil && m.ListDate != nil {
		return *m.ListDate
	}
	return ""
}

func (m *StockBase) GetCurrency() string {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return ""
}

func (m *StockBase) GetOutstandingShare() int64 {
	if m != nil && m.OutstandingShare != nil {
		return *m.OutstandingShare
	}
	return 0
}

func (m *StockBase) GetPublicFloatShareQuantity() int64 {
	if m != nil && m.PublicFloatShareQuantity != nil {
		return *m.PublicFloatShareQuantity
	}
	return 0
}

func (m *StockBase) GetMDDate() int32 {
	if m != nil && m.MDDate != nil {
		return *m.MDDate
	}
	return 0
}

func (m *StockBase) GetTradingPhaseCode() string {
	if m != nil && m.TradingPhaseCode != nil {
		return *m.TradingPhaseCode
	}
	return ""
}

func (m *StockBase) GetPreClosePx() int64 {
	if m != nil && m.PreClosePx != nil {
		return *m.PreClosePx
	}
	return 0
}

func (m *StockBase) GetMaxPx() int64 {
	if m != nil && m.MaxPx != nil {
		return *m.MaxPx
	}
	return 0
}

func (m *StockBase) GetMinPx() int64 {
	if m != nil && m.MinPx != nil {
		return *m.MinPx
	}
	return 0
}

func init() {
}
