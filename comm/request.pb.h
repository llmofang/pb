// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef PROTOBUF_request_2eproto__INCLUDED
#define PROTOBUF_request_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_request_2eproto();
void protobuf_AssignDesc_request_2eproto();
void protobuf_ShutdownFile_request_2eproto();

class Request;
class Response;

// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Qid = 1;
  inline bool has_qid() const;
  inline void clear_qid();
  static const int kQidFieldNumber = 1;
  inline ::google::protobuf::int32 qid() const;
  inline void set_qid(::google::protobuf::int32 value);

  // optional bytes Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required bytes ReqType = 3;
  inline bool has_reqtype() const;
  inline void clear_reqtype();
  static const int kReqTypeFieldNumber = 3;
  inline const ::std::string& reqtype() const;
  inline void set_reqtype(const ::std::string& value);
  inline void set_reqtype(const char* value);
  inline void set_reqtype(const void* value, size_t size);
  inline ::std::string* mutable_reqtype();
  inline ::std::string* release_reqtype();
  inline void set_allocated_reqtype(::std::string* reqtype);

  // optional bytes Data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:comm.Request)
 private:
  inline void set_has_qid();
  inline void clear_has_qid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reqtype();
  inline void clear_has_reqtype();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* reqtype_;
  ::std::string* data_;
  ::google::protobuf::int32 qid_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Qid = 1;
  inline bool has_qid() const;
  inline void clear_qid();
  static const int kQidFieldNumber = 1;
  inline ::google::protobuf::int32 qid() const;
  inline void set_qid(::google::protobuf::int32 value);

  // optional bytes Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const void* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required bytes ReqType = 3;
  inline bool has_reqtype() const;
  inline void clear_reqtype();
  static const int kReqTypeFieldNumber = 3;
  inline const ::std::string& reqtype() const;
  inline void set_reqtype(const ::std::string& value);
  inline void set_reqtype(const char* value);
  inline void set_reqtype(const void* value, size_t size);
  inline ::std::string* mutable_reqtype();
  inline ::std::string* release_reqtype();
  inline void set_allocated_reqtype(::std::string* reqtype);

  // required int32 Error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);

  // required bytes Data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:comm.Response)
 private:
  inline void set_has_qid();
  inline void clear_has_qid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reqtype();
  inline void clear_has_reqtype();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::google::protobuf::int32 qid_;
  ::google::protobuf::int32 error_;
  ::std::string* reqtype_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_request_2eproto();
  friend void protobuf_AssignDesc_request_2eproto();
  friend void protobuf_ShutdownFile_request_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required int32 Qid = 1;
inline bool Request::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_qid() {
  qid_ = 0;
  clear_has_qid();
}
inline ::google::protobuf::int32 Request::qid() const {
  // @@protoc_insertion_point(field_get:comm.Request.Qid)
  return qid_;
}
inline void Request::set_qid(::google::protobuf::int32 value) {
  set_has_qid();
  qid_ = value;
  // @@protoc_insertion_point(field_set:comm.Request.Qid)
}

// optional bytes Type = 2;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:comm.Request.Type)
  return *type_;
}
inline void Request::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:comm.Request.Type)
}
inline void Request::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:comm.Request.Type)
}
inline void Request::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comm.Request.Type)
}
inline ::std::string* Request::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comm.Request.Type)
  return type_;
}
inline ::std::string* Request::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comm.Request.Type)
}

// required bytes ReqType = 3;
inline bool Request::has_reqtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_reqtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_reqtype() {
  if (reqtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_->clear();
  }
  clear_has_reqtype();
}
inline const ::std::string& Request::reqtype() const {
  // @@protoc_insertion_point(field_get:comm.Request.ReqType)
  return *reqtype_;
}
inline void Request::set_reqtype(const ::std::string& value) {
  set_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_ = new ::std::string;
  }
  reqtype_->assign(value);
  // @@protoc_insertion_point(field_set:comm.Request.ReqType)
}
inline void Request::set_reqtype(const char* value) {
  set_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_ = new ::std::string;
  }
  reqtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:comm.Request.ReqType)
}
inline void Request::set_reqtype(const void* value, size_t size) {
  set_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_ = new ::std::string;
  }
  reqtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comm.Request.ReqType)
}
inline ::std::string* Request::mutable_reqtype() {
  set_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comm.Request.ReqType)
  return reqtype_;
}
inline ::std::string* Request::release_reqtype() {
  clear_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reqtype_;
    reqtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_reqtype(::std::string* reqtype) {
  if (reqtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reqtype_;
  }
  if (reqtype) {
    set_has_reqtype();
    reqtype_ = reqtype;
  } else {
    clear_has_reqtype();
    reqtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comm.Request.ReqType)
}

// optional bytes Data = 4;
inline bool Request::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:comm.Request.Data)
  return *data_;
}
inline void Request::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:comm.Request.Data)
}
inline void Request::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:comm.Request.Data)
}
inline void Request::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comm.Request.Data)
}
inline ::std::string* Request::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comm.Request.Data)
  return data_;
}
inline ::std::string* Request::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comm.Request.Data)
}

// -------------------------------------------------------------------

// Response

// required int32 Qid = 1;
inline bool Response::has_qid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_qid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_qid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_qid() {
  qid_ = 0;
  clear_has_qid();
}
inline ::google::protobuf::int32 Response::qid() const {
  // @@protoc_insertion_point(field_get:comm.Response.Qid)
  return qid_;
}
inline void Response::set_qid(::google::protobuf::int32 value) {
  set_has_qid();
  qid_ = value;
  // @@protoc_insertion_point(field_set:comm.Response.Qid)
}

// optional bytes Type = 2;
inline bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& Response::type() const {
  // @@protoc_insertion_point(field_get:comm.Response.Type)
  return *type_;
}
inline void Response::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:comm.Response.Type)
}
inline void Response::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:comm.Response.Type)
}
inline void Response::set_type(const void* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comm.Response.Type)
}
inline ::std::string* Response::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comm.Response.Type)
  return type_;
}
inline ::std::string* Response::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comm.Response.Type)
}

// required bytes ReqType = 3;
inline bool Response::has_reqtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_reqtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_reqtype() {
  if (reqtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_->clear();
  }
  clear_has_reqtype();
}
inline const ::std::string& Response::reqtype() const {
  // @@protoc_insertion_point(field_get:comm.Response.ReqType)
  return *reqtype_;
}
inline void Response::set_reqtype(const ::std::string& value) {
  set_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_ = new ::std::string;
  }
  reqtype_->assign(value);
  // @@protoc_insertion_point(field_set:comm.Response.ReqType)
}
inline void Response::set_reqtype(const char* value) {
  set_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_ = new ::std::string;
  }
  reqtype_->assign(value);
  // @@protoc_insertion_point(field_set_char:comm.Response.ReqType)
}
inline void Response::set_reqtype(const void* value, size_t size) {
  set_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_ = new ::std::string;
  }
  reqtype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comm.Response.ReqType)
}
inline ::std::string* Response::mutable_reqtype() {
  set_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reqtype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comm.Response.ReqType)
  return reqtype_;
}
inline ::std::string* Response::release_reqtype() {
  clear_has_reqtype();
  if (reqtype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reqtype_;
    reqtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response::set_allocated_reqtype(::std::string* reqtype) {
  if (reqtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reqtype_;
  }
  if (reqtype) {
    set_has_reqtype();
    reqtype_ = reqtype;
  } else {
    clear_has_reqtype();
    reqtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comm.Response.ReqType)
}

// required int32 Error = 4;
inline bool Response::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 Response::error() const {
  // @@protoc_insertion_point(field_get:comm.Response.Error)
  return error_;
}
inline void Response::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:comm.Response.Error)
}

// required bytes Data = 5;
inline bool Response::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Response::data() const {
  // @@protoc_insertion_point(field_get:comm.Response.Data)
  return *data_;
}
inline void Response::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:comm.Response.Data)
}
inline void Response::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:comm.Response.Data)
}
inline void Response::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comm.Response.Data)
}
inline ::std::string* Response::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comm.Response.Data)
  return data_;
}
inline ::std::string* Response::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Response::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comm.Response.Data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_request_2eproto__INCLUDED
