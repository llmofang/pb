// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: futureData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "futureData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* FutureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FutureData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_futureData_2eproto() {
  protobuf_AddDesc_futureData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "futureData.proto");
  GOOGLE_CHECK(file != NULL);
  FutureData_descriptor_ = file->message_type(0);
  static const int FutureData_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, windcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, actionday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, preopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, presettleprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, settleprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, highlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, lowlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, predelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, currdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, askvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, bidvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, auctionprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, auctionqty_),
  };
  FutureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FutureData_descriptor_,
      FutureData::default_instance_,
      FutureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FutureData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_futureData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FutureData_descriptor_, &FutureData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_futureData_2eproto() {
  delete FutureData::default_instance_;
  delete FutureData_reflection_;
}

void protobuf_AddDesc_futureData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020futureData.proto\022\004comm\"\204\004\n\nFutureData\022"
    "\020\n\010WindCode\030\001 \002(\t\022\014\n\004Code\030\002 \002(\t\022\021\n\tActio"
    "nDay\030\003 \002(\005\022\022\n\nTradingDay\030\004 \002(\005\022\014\n\004Time\030\005"
    " \002(\005\022\016\n\006Status\030\006 \002(\005\022\027\n\017PreOpenInterest\030"
    "\007 \002(\003\022\020\n\010PreClose\030\010 \002(\r\022\026\n\016PreSettlePric"
    "e\030\t \002(\r\022\014\n\004Open\030\n \002(\r\022\014\n\004High\030\013 \002(\r\022\013\n\003L"
    "ow\030\014 \002(\r\022\r\n\005Match\030\r \002(\r\022\016\n\006Volume\030\016 \002(\003\022"
    "\020\n\010Turnover\030\017 \002(\003\022\024\n\014openInterest\030\020 \002(\003\022"
    "\r\n\005Close\030\021 \002(\r\022\023\n\013SettlePrice\030\022 \002(\r\022\023\n\013H"
    "ighLimited\030\023 \002(\r\022\022\n\nLowLimited\030\024 \002(\r\022\020\n\010"
    "PreDelta\030\025 \002(\005\022\021\n\tCurrDelta\030\026 \002(\005\022\020\n\010Ask"
    "Price\030\027 \003(\r\022\016\n\006AskVol\030\030 \003(\r\022\020\n\010BidPrice\030"
    "\031 \003(\r\022\016\n\006BidVol\030\032 \003(\r\022\024\n\014AuctionPrice\030\033 "
    "\002(\005\022\022\n\nAuctionQty\030\034 \002(\005", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "futureData.proto", &protobuf_RegisterTypes);
  FutureData::default_instance_ = new FutureData();
  FutureData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_futureData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_futureData_2eproto {
  StaticDescriptorInitializer_futureData_2eproto() {
    protobuf_AddDesc_futureData_2eproto();
  }
} static_descriptor_initializer_futureData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FutureData::kWindCodeFieldNumber;
const int FutureData::kCodeFieldNumber;
const int FutureData::kActionDayFieldNumber;
const int FutureData::kTradingDayFieldNumber;
const int FutureData::kTimeFieldNumber;
const int FutureData::kStatusFieldNumber;
const int FutureData::kPreOpenInterestFieldNumber;
const int FutureData::kPreCloseFieldNumber;
const int FutureData::kPreSettlePriceFieldNumber;
const int FutureData::kOpenFieldNumber;
const int FutureData::kHighFieldNumber;
const int FutureData::kLowFieldNumber;
const int FutureData::kMatchFieldNumber;
const int FutureData::kVolumeFieldNumber;
const int FutureData::kTurnoverFieldNumber;
const int FutureData::kOpenInterestFieldNumber;
const int FutureData::kCloseFieldNumber;
const int FutureData::kSettlePriceFieldNumber;
const int FutureData::kHighLimitedFieldNumber;
const int FutureData::kLowLimitedFieldNumber;
const int FutureData::kPreDeltaFieldNumber;
const int FutureData::kCurrDeltaFieldNumber;
const int FutureData::kAskPriceFieldNumber;
const int FutureData::kAskVolFieldNumber;
const int FutureData::kBidPriceFieldNumber;
const int FutureData::kBidVolFieldNumber;
const int FutureData::kAuctionPriceFieldNumber;
const int FutureData::kAuctionQtyFieldNumber;
#endif  // !_MSC_VER

FutureData::FutureData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.FutureData)
}

void FutureData::InitAsDefaultInstance() {
}

FutureData::FutureData(const FutureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.FutureData)
}

void FutureData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  windcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionday_ = 0;
  tradingday_ = 0;
  time_ = 0;
  status_ = 0;
  preopeninterest_ = GOOGLE_LONGLONG(0);
  preclose_ = 0u;
  presettleprice_ = 0u;
  open_ = 0u;
  high_ = 0u;
  low_ = 0u;
  match_ = 0u;
  volume_ = GOOGLE_LONGLONG(0);
  turnover_ = GOOGLE_LONGLONG(0);
  openinterest_ = GOOGLE_LONGLONG(0);
  close_ = 0u;
  settleprice_ = 0u;
  highlimited_ = 0u;
  lowlimited_ = 0u;
  predelta_ = 0;
  currdelta_ = 0;
  auctionprice_ = 0;
  auctionqty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FutureData::~FutureData() {
  // @@protoc_insertion_point(destructor:comm.FutureData)
  SharedDtor();
}

void FutureData::SharedDtor() {
  if (windcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete windcode_;
  }
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void FutureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FutureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FutureData_descriptor_;
}

const FutureData& FutureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_futureData_2eproto();
  return *default_instance_;
}

FutureData* FutureData::default_instance_ = NULL;

FutureData* FutureData::New() const {
  return new FutureData;
}

void FutureData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FutureData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(actionday_, preclose_);
    if (has_windcode()) {
      if (windcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        windcode_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(presettleprice_, openinterest_);
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(close_, currdelta_);
  }
  ZR_(auctionprice_, auctionqty_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  askprice_.Clear();
  askvol_.Clear();
  bidprice_.Clear();
  bidvol_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FutureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.FutureData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string WindCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->windcode().data(), this->windcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "windcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (tag == 18) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ActionDay;
        break;
      }

      // required int32 ActionDay = 3;
      case 3: {
        if (tag == 24) {
         parse_ActionDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionday_)));
          set_has_actionday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TradingDay;
        break;
      }

      // required int32 TradingDay = 4;
      case 4: {
        if (tag == 32) {
         parse_TradingDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Time;
        break;
      }

      // required int32 Time = 5;
      case 5: {
        if (tag == 40) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Status;
        break;
      }

      // required int32 Status = 6;
      case 6: {
        if (tag == 48) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PreOpenInterest;
        break;
      }

      // required int64 PreOpenInterest = 7;
      case 7: {
        if (tag == 56) {
         parse_PreOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preopeninterest_)));
          set_has_preopeninterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_PreClose;
        break;
      }

      // required uint32 PreClose = 8;
      case 8: {
        if (tag == 64) {
         parse_PreClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preclose_)));
          set_has_preclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_PreSettlePrice;
        break;
      }

      // required uint32 PreSettlePrice = 9;
      case 9: {
        if (tag == 72) {
         parse_PreSettlePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &presettleprice_)));
          set_has_presettleprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Open;
        break;
      }

      // required uint32 Open = 10;
      case 10: {
        if (tag == 80) {
         parse_Open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_High;
        break;
      }

      // required uint32 High = 11;
      case 11: {
        if (tag == 88) {
         parse_High:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_Low;
        break;
      }

      // required uint32 Low = 12;
      case 12: {
        if (tag == 96) {
         parse_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Match;
        break;
      }

      // required uint32 Match = 13;
      case 13: {
        if (tag == 104) {
         parse_Match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_)));
          set_has_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_Volume;
        break;
      }

      // required int64 Volume = 14;
      case 14: {
        if (tag == 112) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_Turnover;
        break;
      }

      // required int64 Turnover = 15;
      case 15: {
        if (tag == 120) {
         parse_Turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_openInterest;
        break;
      }

      // required int64 openInterest = 16;
      case 16: {
        if (tag == 128) {
         parse_openInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Close;
        break;
      }

      // required uint32 Close = 17;
      case 17: {
        if (tag == 136) {
         parse_Close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_SettlePrice;
        break;
      }

      // required uint32 SettlePrice = 18;
      case 18: {
        if (tag == 144) {
         parse_SettlePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settleprice_)));
          set_has_settleprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_HighLimited;
        break;
      }

      // required uint32 HighLimited = 19;
      case 19: {
        if (tag == 152) {
         parse_HighLimited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlimited_)));
          set_has_highlimited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_LowLimited;
        break;
      }

      // required uint32 LowLimited = 20;
      case 20: {
        if (tag == 160) {
         parse_LowLimited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlimited_)));
          set_has_lowlimited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_PreDelta;
        break;
      }

      // required int32 PreDelta = 21;
      case 21: {
        if (tag == 168) {
         parse_PreDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &predelta_)));
          set_has_predelta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_CurrDelta;
        break;
      }

      // required int32 CurrDelta = 22;
      case 22: {
        if (tag == 176) {
         parse_CurrDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currdelta_)));
          set_has_currdelta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_AskPrice;
        break;
      }

      // repeated uint32 AskPrice = 23;
      case 23: {
        if (tag == 184) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 184, input, this->mutable_askprice())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_AskPrice;
        if (input->ExpectTag(192)) goto parse_AskVol;
        break;
      }

      // repeated uint32 AskVol = 24;
      case 24: {
        if (tag == 192) {
         parse_AskVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 192, input, this->mutable_askvol())));
        } else if (tag == 194) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_AskVol;
        if (input->ExpectTag(200)) goto parse_BidPrice;
        break;
      }

      // repeated uint32 BidPrice = 25;
      case 25: {
        if (tag == 200) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 200, input, this->mutable_bidprice())));
        } else if (tag == 202) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_BidPrice;
        if (input->ExpectTag(208)) goto parse_BidVol;
        break;
      }

      // repeated uint32 BidVol = 26;
      case 26: {
        if (tag == 208) {
         parse_BidVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208, input, this->mutable_bidvol())));
        } else if (tag == 210) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_BidVol;
        if (input->ExpectTag(216)) goto parse_AuctionPrice;
        break;
      }

      // required int32 AuctionPrice = 27;
      case 27: {
        if (tag == 216) {
         parse_AuctionPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auctionprice_)));
          set_has_auctionprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_AuctionQty;
        break;
      }

      // required int32 AuctionQty = 28;
      case 28: {
        if (tag == 224) {
         parse_AuctionQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auctionqty_)));
          set_has_auctionqty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.FutureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.FutureData)
  return false;
#undef DO_
}

void FutureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.FutureData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "windcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->windcode(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionday(), output);
  }

  // required int32 TradingDay = 4;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tradingday(), output);
  }

  // required int32 Time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // required int32 Status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // required int64 PreOpenInterest = 7;
  if (has_preopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->preopeninterest(), output);
  }

  // required uint32 PreClose = 8;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preclose(), output);
  }

  // required uint32 PreSettlePrice = 9;
  if (has_presettleprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->presettleprice(), output);
  }

  // required uint32 Open = 10;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->open(), output);
  }

  // required uint32 High = 11;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->high(), output);
  }

  // required uint32 Low = 12;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->low(), output);
  }

  // required uint32 Match = 13;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->match(), output);
  }

  // required int64 Volume = 14;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->volume(), output);
  }

  // required int64 Turnover = 15;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->turnover(), output);
  }

  // required int64 openInterest = 16;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->openinterest(), output);
  }

  // required uint32 Close = 17;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->close(), output);
  }

  // required uint32 SettlePrice = 18;
  if (has_settleprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->settleprice(), output);
  }

  // required uint32 HighLimited = 19;
  if (has_highlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->highlimited(), output);
  }

  // required uint32 LowLimited = 20;
  if (has_lowlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->lowlimited(), output);
  }

  // required int32 PreDelta = 21;
  if (has_predelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->predelta(), output);
  }

  // required int32 CurrDelta = 22;
  if (has_currdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->currdelta(), output);
  }

  // repeated uint32 AskPrice = 23;
  for (int i = 0; i < this->askprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      23, this->askprice(i), output);
  }

  // repeated uint32 AskVol = 24;
  for (int i = 0; i < this->askvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      24, this->askvol(i), output);
  }

  // repeated uint32 BidPrice = 25;
  for (int i = 0; i < this->bidprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      25, this->bidprice(i), output);
  }

  // repeated uint32 BidVol = 26;
  for (int i = 0; i < this->bidvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->bidvol(i), output);
  }

  // required int32 AuctionPrice = 27;
  if (has_auctionprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->auctionprice(), output);
  }

  // required int32 AuctionQty = 28;
  if (has_auctionqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->auctionqty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.FutureData)
}

::google::protobuf::uint8* FutureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.FutureData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "windcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->windcode(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionday(), target);
  }

  // required int32 TradingDay = 4;
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tradingday(), target);
  }

  // required int32 Time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // required int32 Status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // required int64 PreOpenInterest = 7;
  if (has_preopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->preopeninterest(), target);
  }

  // required uint32 PreClose = 8;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->preclose(), target);
  }

  // required uint32 PreSettlePrice = 9;
  if (has_presettleprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->presettleprice(), target);
  }

  // required uint32 Open = 10;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->open(), target);
  }

  // required uint32 High = 11;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->high(), target);
  }

  // required uint32 Low = 12;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->low(), target);
  }

  // required uint32 Match = 13;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->match(), target);
  }

  // required int64 Volume = 14;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->volume(), target);
  }

  // required int64 Turnover = 15;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->turnover(), target);
  }

  // required int64 openInterest = 16;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->openinterest(), target);
  }

  // required uint32 Close = 17;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->close(), target);
  }

  // required uint32 SettlePrice = 18;
  if (has_settleprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->settleprice(), target);
  }

  // required uint32 HighLimited = 19;
  if (has_highlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->highlimited(), target);
  }

  // required uint32 LowLimited = 20;
  if (has_lowlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->lowlimited(), target);
  }

  // required int32 PreDelta = 21;
  if (has_predelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->predelta(), target);
  }

  // required int32 CurrDelta = 22;
  if (has_currdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->currdelta(), target);
  }

  // repeated uint32 AskPrice = 23;
  for (int i = 0; i < this->askprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(23, this->askprice(i), target);
  }

  // repeated uint32 AskVol = 24;
  for (int i = 0; i < this->askvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(24, this->askvol(i), target);
  }

  // repeated uint32 BidPrice = 25;
  for (int i = 0; i < this->bidprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(25, this->bidprice(i), target);
  }

  // repeated uint32 BidVol = 26;
  for (int i = 0; i < this->bidvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(26, this->bidvol(i), target);
  }

  // required int32 AuctionPrice = 27;
  if (has_auctionprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->auctionprice(), target);
  }

  // required int32 AuctionQty = 28;
  if (has_auctionqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->auctionqty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.FutureData)
  return target;
}

int FutureData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string WindCode = 1;
    if (has_windcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->windcode());
    }

    // required string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // required int32 ActionDay = 3;
    if (has_actionday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionday());
    }

    // required int32 TradingDay = 4;
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingday());
    }

    // required int32 Time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required int32 Status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int64 PreOpenInterest = 7;
    if (has_preopeninterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preopeninterest());
    }

    // required uint32 PreClose = 8;
    if (has_preclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preclose());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 PreSettlePrice = 9;
    if (has_presettleprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->presettleprice());
    }

    // required uint32 Open = 10;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open());
    }

    // required uint32 High = 11;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high());
    }

    // required uint32 Low = 12;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low());
    }

    // required uint32 Match = 13;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match());
    }

    // required int64 Volume = 14;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // required int64 Turnover = 15;
    if (has_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turnover());
    }

    // required int64 openInterest = 16;
    if (has_openinterest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->openinterest());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 Close = 17;
    if (has_close()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close());
    }

    // required uint32 SettlePrice = 18;
    if (has_settleprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settleprice());
    }

    // required uint32 HighLimited = 19;
    if (has_highlimited()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highlimited());
    }

    // required uint32 LowLimited = 20;
    if (has_lowlimited()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowlimited());
    }

    // required int32 PreDelta = 21;
    if (has_predelta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->predelta());
    }

    // required int32 CurrDelta = 22;
    if (has_currdelta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currdelta());
    }

  }
  if (_has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    // required int32 AuctionPrice = 27;
    if (has_auctionprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auctionprice());
    }

    // required int32 AuctionQty = 28;
    if (has_auctionqty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auctionqty());
    }

  }
  // repeated uint32 AskPrice = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->askprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askprice(i));
    }
    total_size += 2 * this->askprice_size() + data_size;
  }

  // repeated uint32 AskVol = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->askvol_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askvol(i));
    }
    total_size += 2 * this->askvol_size() + data_size;
  }

  // repeated uint32 BidPrice = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->bidprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidprice(i));
    }
    total_size += 2 * this->bidprice_size() + data_size;
  }

  // repeated uint32 BidVol = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->bidvol_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidvol(i));
    }
    total_size += 2 * this->bidvol_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FutureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FutureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FutureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FutureData::MergeFrom(const FutureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  askprice_.MergeFrom(from.askprice_);
  askvol_.MergeFrom(from.askvol_);
  bidprice_.MergeFrom(from.bidprice_);
  bidvol_.MergeFrom(from.bidvol_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_windcode()) {
      set_windcode(from.windcode());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_actionday()) {
      set_actionday(from.actionday());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_preopeninterest()) {
      set_preopeninterest(from.preopeninterest());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_presettleprice()) {
      set_presettleprice(from.presettleprice());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_match()) {
      set_match(from.match());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_settleprice()) {
      set_settleprice(from.settleprice());
    }
    if (from.has_highlimited()) {
      set_highlimited(from.highlimited());
    }
    if (from.has_lowlimited()) {
      set_lowlimited(from.lowlimited());
    }
    if (from.has_predelta()) {
      set_predelta(from.predelta());
    }
    if (from.has_currdelta()) {
      set_currdelta(from.currdelta());
    }
  }
  if (from._has_bits_[26 / 32] & (0xffu << (26 % 32))) {
    if (from.has_auctionprice()) {
      set_auctionprice(from.auctionprice());
    }
    if (from.has_auctionqty()) {
      set_auctionqty(from.auctionqty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FutureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureData::CopyFrom(const FutureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0c3fffff) != 0x0c3fffff) return false;

  return true;
}

void FutureData::Swap(FutureData* other) {
  if (other != this) {
    std::swap(windcode_, other->windcode_);
    std::swap(code_, other->code_);
    std::swap(actionday_, other->actionday_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(time_, other->time_);
    std::swap(status_, other->status_);
    std::swap(preopeninterest_, other->preopeninterest_);
    std::swap(preclose_, other->preclose_);
    std::swap(presettleprice_, other->presettleprice_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(match_, other->match_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(close_, other->close_);
    std::swap(settleprice_, other->settleprice_);
    std::swap(highlimited_, other->highlimited_);
    std::swap(lowlimited_, other->lowlimited_);
    std::swap(predelta_, other->predelta_);
    std::swap(currdelta_, other->currdelta_);
    askprice_.Swap(&other->askprice_);
    askvol_.Swap(&other->askvol_);
    bidprice_.Swap(&other->bidprice_);
    bidvol_.Swap(&other->bidvol_);
    std::swap(auctionprice_, other->auctionprice_);
    std::swap(auctionqty_, other->auctionqty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FutureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FutureData_descriptor_;
  metadata.reflection = FutureData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
