// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketData.proto

#ifndef PROTOBUF_marketData_2eproto__INCLUDED
#define PROTOBUF_marketData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_marketData_2eproto();
void protobuf_InitDefaults_marketData_2eproto();
void protobuf_AssignDesc_marketData_2eproto();
void protobuf_ShutdownFile_marketData_2eproto();

class MarketData;

// ===================================================================

class MarketData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comm.MarketData) */ {
 public:
  MarketData();
  virtual ~MarketData();

  MarketData(const MarketData& from);

  inline MarketData& operator=(const MarketData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketData& default_instance();

  static const MarketData* internal_default_instance();

  void Swap(MarketData* other);

  // implements Message ----------------------------------------------

  inline MarketData* New() const { return New(NULL); }

  MarketData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketData& from);
  void MergeFrom(const MarketData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarketData* other);
  void UnsafeMergeFrom(const MarketData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string WindCode = 1;
  bool has_windcode() const;
  void clear_windcode();
  static const int kWindCodeFieldNumber = 1;
  const ::std::string& windcode() const;
  void set_windcode(const ::std::string& value);
  void set_windcode(const char* value);
  void set_windcode(const char* value, size_t size);
  ::std::string* mutable_windcode();
  ::std::string* release_windcode();
  void set_allocated_windcode(::std::string* windcode);

  // required string Code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 ActionDay = 3;
  bool has_actionday() const;
  void clear_actionday();
  static const int kActionDayFieldNumber = 3;
  ::google::protobuf::int32 actionday() const;
  void set_actionday(::google::protobuf::int32 value);

  // required int32 TradingDay = 4;
  bool has_tradingday() const;
  void clear_tradingday();
  static const int kTradingDayFieldNumber = 4;
  ::google::protobuf::int32 tradingday() const;
  void set_tradingday(::google::protobuf::int32 value);

  // required int32 Time = 5;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // required int32 Status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // required uint32 PreClose = 7;
  bool has_preclose() const;
  void clear_preclose();
  static const int kPreCloseFieldNumber = 7;
  ::google::protobuf::uint32 preclose() const;
  void set_preclose(::google::protobuf::uint32 value);

  // required uint32 Open = 8;
  bool has_open() const;
  void clear_open();
  static const int kOpenFieldNumber = 8;
  ::google::protobuf::uint32 open() const;
  void set_open(::google::protobuf::uint32 value);

  // required uint32 High = 9;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 9;
  ::google::protobuf::uint32 high() const;
  void set_high(::google::protobuf::uint32 value);

  // required uint32 Low = 10;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 10;
  ::google::protobuf::uint32 low() const;
  void set_low(::google::protobuf::uint32 value);

  // required uint32 Match = 11;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 11;
  ::google::protobuf::uint32 match() const;
  void set_match(::google::protobuf::uint32 value);

  // repeated uint32 AskPrice = 12;
  int askprice_size() const;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 12;
  ::google::protobuf::uint32 askprice(int index) const;
  void set_askprice(int index, ::google::protobuf::uint32 value);
  void add_askprice(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      askprice() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_askprice();

  // repeated uint32 AskVol = 13;
  int askvol_size() const;
  void clear_askvol();
  static const int kAskVolFieldNumber = 13;
  ::google::protobuf::uint32 askvol(int index) const;
  void set_askvol(int index, ::google::protobuf::uint32 value);
  void add_askvol(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      askvol() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_askvol();

  // repeated uint32 BidPrice = 14;
  int bidprice_size() const;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 14;
  ::google::protobuf::uint32 bidprice(int index) const;
  void set_bidprice(int index, ::google::protobuf::uint32 value);
  void add_bidprice(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bidprice() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bidprice();

  // repeated uint32 BidVol = 15;
  int bidvol_size() const;
  void clear_bidvol();
  static const int kBidVolFieldNumber = 15;
  ::google::protobuf::uint32 bidvol(int index) const;
  void set_bidvol(int index, ::google::protobuf::uint32 value);
  void add_bidvol(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bidvol() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bidvol();

  // required uint32 NumTrades = 16;
  bool has_numtrades() const;
  void clear_numtrades();
  static const int kNumTradesFieldNumber = 16;
  ::google::protobuf::uint32 numtrades() const;
  void set_numtrades(::google::protobuf::uint32 value);

  // required int64 Volume = 17;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 17;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required int64 Turnover = 18;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 18;
  ::google::protobuf::int64 turnover() const;
  void set_turnover(::google::protobuf::int64 value);

  // required int64 TotalBidVol = 19;
  bool has_totalbidvol() const;
  void clear_totalbidvol();
  static const int kTotalBidVolFieldNumber = 19;
  ::google::protobuf::int64 totalbidvol() const;
  void set_totalbidvol(::google::protobuf::int64 value);

  // required int64 TotalAskVol = 20;
  bool has_totalaskvol() const;
  void clear_totalaskvol();
  static const int kTotalAskVolFieldNumber = 20;
  ::google::protobuf::int64 totalaskvol() const;
  void set_totalaskvol(::google::protobuf::int64 value);

  // required uint32 WeighteAvgBidPrice = 21;
  bool has_weighteavgbidprice() const;
  void clear_weighteavgbidprice();
  static const int kWeighteAvgBidPriceFieldNumber = 21;
  ::google::protobuf::uint32 weighteavgbidprice() const;
  void set_weighteavgbidprice(::google::protobuf::uint32 value);

  // required uint32 WeighteAvgAskPrice = 22;
  bool has_weighteavgaskprice() const;
  void clear_weighteavgaskprice();
  static const int kWeighteAvgAskPriceFieldNumber = 22;
  ::google::protobuf::uint32 weighteavgaskprice() const;
  void set_weighteavgaskprice(::google::protobuf::uint32 value);

  // required int32 IOPV = 23;
  bool has_iopv() const;
  void clear_iopv();
  static const int kIOPVFieldNumber = 23;
  ::google::protobuf::int32 iopv() const;
  void set_iopv(::google::protobuf::int32 value);

  // required int32 YieldToMaturity = 24;
  bool has_yieldtomaturity() const;
  void clear_yieldtomaturity();
  static const int kYieldToMaturityFieldNumber = 24;
  ::google::protobuf::int32 yieldtomaturity() const;
  void set_yieldtomaturity(::google::protobuf::int32 value);

  // required uint32 HighLimited = 25;
  bool has_highlimited() const;
  void clear_highlimited();
  static const int kHighLimitedFieldNumber = 25;
  ::google::protobuf::uint32 highlimited() const;
  void set_highlimited(::google::protobuf::uint32 value);

  // required uint32 LowLimited = 26;
  bool has_lowlimited() const;
  void clear_lowlimited();
  static const int kLowLimitedFieldNumber = 26;
  ::google::protobuf::uint32 lowlimited() const;
  void set_lowlimited(::google::protobuf::uint32 value);

  // required string Prefix = 27;
  bool has_prefix() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 27;
  const ::std::string& prefix() const;
  void set_prefix(const ::std::string& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  ::std::string* mutable_prefix();
  ::std::string* release_prefix();
  void set_allocated_prefix(::std::string* prefix);

  // required int32 Syl1 = 28;
  bool has_syl1() const;
  void clear_syl1();
  static const int kSyl1FieldNumber = 28;
  ::google::protobuf::int32 syl1() const;
  void set_syl1(::google::protobuf::int32 value);

  // required int32 Syl2 = 29;
  bool has_syl2() const;
  void clear_syl2();
  static const int kSyl2FieldNumber = 29;
  ::google::protobuf::int32 syl2() const;
  void set_syl2(::google::protobuf::int32 value);

  // required int32 SD2 = 30;
  bool has_sd2() const;
  void clear_sd2();
  static const int kSD2FieldNumber = 30;
  ::google::protobuf::int32 sd2() const;
  void set_sd2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:comm.MarketData)
 private:
  inline void set_has_windcode();
  inline void clear_has_windcode();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_actionday();
  inline void clear_has_actionday();
  inline void set_has_tradingday();
  inline void clear_has_tradingday();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_preclose();
  inline void clear_has_preclose();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_match();
  inline void clear_has_match();
  inline void set_has_numtrades();
  inline void clear_has_numtrades();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_totalbidvol();
  inline void clear_has_totalbidvol();
  inline void set_has_totalaskvol();
  inline void clear_has_totalaskvol();
  inline void set_has_weighteavgbidprice();
  inline void clear_has_weighteavgbidprice();
  inline void set_has_weighteavgaskprice();
  inline void clear_has_weighteavgaskprice();
  inline void set_has_iopv();
  inline void clear_has_iopv();
  inline void set_has_yieldtomaturity();
  inline void clear_has_yieldtomaturity();
  inline void set_has_highlimited();
  inline void clear_has_highlimited();
  inline void set_has_lowlimited();
  inline void clear_has_lowlimited();
  inline void set_has_prefix();
  inline void clear_has_prefix();
  inline void set_has_syl1();
  inline void clear_has_syl1();
  inline void set_has_syl2();
  inline void clear_has_syl2();
  inline void set_has_sd2();
  inline void clear_has_sd2();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > askprice_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > askvol_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bidprice_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bidvol_;
  ::google::protobuf::internal::ArenaStringPtr windcode_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr prefix_;
  ::google::protobuf::int32 actionday_;
  ::google::protobuf::int32 tradingday_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 preclose_;
  ::google::protobuf::uint32 open_;
  ::google::protobuf::uint32 high_;
  ::google::protobuf::uint32 low_;
  ::google::protobuf::uint32 match_;
  ::google::protobuf::uint32 numtrades_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int64 turnover_;
  ::google::protobuf::int64 totalbidvol_;
  ::google::protobuf::int64 totalaskvol_;
  ::google::protobuf::uint32 weighteavgbidprice_;
  ::google::protobuf::uint32 weighteavgaskprice_;
  ::google::protobuf::int32 iopv_;
  ::google::protobuf::int32 yieldtomaturity_;
  ::google::protobuf::uint32 highlimited_;
  ::google::protobuf::uint32 lowlimited_;
  ::google::protobuf::int32 syl1_;
  ::google::protobuf::int32 syl2_;
  ::google::protobuf::int32 sd2_;
  friend void  protobuf_InitDefaults_marketData_2eproto_impl();
  friend void  protobuf_AddDesc_marketData_2eproto_impl();
  friend void protobuf_AssignDesc_marketData_2eproto();
  friend void protobuf_ShutdownFile_marketData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MarketData> MarketData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketData

// required string WindCode = 1;
inline bool MarketData::has_windcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketData::set_has_windcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketData::clear_has_windcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketData::clear_windcode() {
  windcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_windcode();
}
inline const ::std::string& MarketData::windcode() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WindCode)
  return windcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_windcode(const ::std::string& value) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.WindCode)
}
inline void MarketData::set_windcode(const char* value) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.WindCode)
}
inline void MarketData::set_windcode(const char* value, size_t size) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.WindCode)
}
inline ::std::string* MarketData::mutable_windcode() {
  set_has_windcode();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.WindCode)
  return windcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData::release_windcode() {
  // @@protoc_insertion_point(field_release:comm.MarketData.WindCode)
  clear_has_windcode();
  return windcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_allocated_windcode(::std::string* windcode) {
  if (windcode != NULL) {
    set_has_windcode();
  } else {
    clear_has_windcode();
  }
  windcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), windcode);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.WindCode)
}

// required string Code = 2;
inline bool MarketData::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketData::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketData::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketData::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& MarketData::code() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.Code)
}
inline void MarketData::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.Code)
}
inline void MarketData::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.Code)
}
inline ::std::string* MarketData::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData::release_code() {
  // @@protoc_insertion_point(field_release:comm.MarketData.Code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.Code)
}

// required int32 ActionDay = 3;
inline bool MarketData::has_actionday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketData::set_has_actionday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketData::clear_has_actionday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketData::clear_actionday() {
  actionday_ = 0;
  clear_has_actionday();
}
inline ::google::protobuf::int32 MarketData::actionday() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ActionDay)
  return actionday_;
}
inline void MarketData::set_actionday(::google::protobuf::int32 value) {
  set_has_actionday();
  actionday_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ActionDay)
}

// required int32 TradingDay = 4;
inline bool MarketData::has_tradingday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketData::set_has_tradingday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketData::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketData::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
inline ::google::protobuf::int32 MarketData::tradingday() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TradingDay)
  return tradingday_;
}
inline void MarketData::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TradingDay)
}

// required int32 Time = 5;
inline bool MarketData::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketData::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarketData::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarketData::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 MarketData::time() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Time)
  return time_;
}
inline void MarketData::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Time)
}

// required int32 Status = 6;
inline bool MarketData::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarketData::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarketData::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarketData::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 MarketData::status() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Status)
  return status_;
}
inline void MarketData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Status)
}

// required uint32 PreClose = 7;
inline bool MarketData::has_preclose() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarketData::set_has_preclose() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarketData::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarketData::clear_preclose() {
  preclose_ = 0u;
  clear_has_preclose();
}
inline ::google::protobuf::uint32 MarketData::preclose() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.PreClose)
  return preclose_;
}
inline void MarketData::set_preclose(::google::protobuf::uint32 value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.PreClose)
}

// required uint32 Open = 8;
inline bool MarketData::has_open() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarketData::set_has_open() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarketData::clear_has_open() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarketData::clear_open() {
  open_ = 0u;
  clear_has_open();
}
inline ::google::protobuf::uint32 MarketData::open() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Open)
  return open_;
}
inline void MarketData::set_open(::google::protobuf::uint32 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Open)
}

// required uint32 High = 9;
inline bool MarketData::has_high() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarketData::set_has_high() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarketData::clear_has_high() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarketData::clear_high() {
  high_ = 0u;
  clear_has_high();
}
inline ::google::protobuf::uint32 MarketData::high() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.High)
  return high_;
}
inline void MarketData::set_high(::google::protobuf::uint32 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.High)
}

// required uint32 Low = 10;
inline bool MarketData::has_low() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MarketData::set_has_low() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MarketData::clear_has_low() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MarketData::clear_low() {
  low_ = 0u;
  clear_has_low();
}
inline ::google::protobuf::uint32 MarketData::low() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Low)
  return low_;
}
inline void MarketData::set_low(::google::protobuf::uint32 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Low)
}

// required uint32 Match = 11;
inline bool MarketData::has_match() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MarketData::set_has_match() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MarketData::clear_has_match() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MarketData::clear_match() {
  match_ = 0u;
  clear_has_match();
}
inline ::google::protobuf::uint32 MarketData::match() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Match)
  return match_;
}
inline void MarketData::set_match(::google::protobuf::uint32 value) {
  set_has_match();
  match_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Match)
}

// repeated uint32 AskPrice = 12;
inline int MarketData::askprice_size() const {
  return askprice_.size();
}
inline void MarketData::clear_askprice() {
  askprice_.Clear();
}
inline ::google::protobuf::uint32 MarketData::askprice(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.AskPrice)
  return askprice_.Get(index);
}
inline void MarketData::set_askprice(int index, ::google::protobuf::uint32 value) {
  askprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.AskPrice)
}
inline void MarketData::add_askprice(::google::protobuf::uint32 value) {
  askprice_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.AskPrice)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarketData::askprice() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.AskPrice)
  return askprice_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarketData::mutable_askprice() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.AskPrice)
  return &askprice_;
}

// repeated uint32 AskVol = 13;
inline int MarketData::askvol_size() const {
  return askvol_.size();
}
inline void MarketData::clear_askvol() {
  askvol_.Clear();
}
inline ::google::protobuf::uint32 MarketData::askvol(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.AskVol)
  return askvol_.Get(index);
}
inline void MarketData::set_askvol(int index, ::google::protobuf::uint32 value) {
  askvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.AskVol)
}
inline void MarketData::add_askvol(::google::protobuf::uint32 value) {
  askvol_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.AskVol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarketData::askvol() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.AskVol)
  return askvol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarketData::mutable_askvol() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.AskVol)
  return &askvol_;
}

// repeated uint32 BidPrice = 14;
inline int MarketData::bidprice_size() const {
  return bidprice_.size();
}
inline void MarketData::clear_bidprice() {
  bidprice_.Clear();
}
inline ::google::protobuf::uint32 MarketData::bidprice(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BidPrice)
  return bidprice_.Get(index);
}
inline void MarketData::set_bidprice(int index, ::google::protobuf::uint32 value) {
  bidprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.BidPrice)
}
inline void MarketData::add_bidprice(::google::protobuf::uint32 value) {
  bidprice_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.BidPrice)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarketData::bidprice() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.BidPrice)
  return bidprice_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarketData::mutable_bidprice() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.BidPrice)
  return &bidprice_;
}

// repeated uint32 BidVol = 15;
inline int MarketData::bidvol_size() const {
  return bidvol_.size();
}
inline void MarketData::clear_bidvol() {
  bidvol_.Clear();
}
inline ::google::protobuf::uint32 MarketData::bidvol(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BidVol)
  return bidvol_.Get(index);
}
inline void MarketData::set_bidvol(int index, ::google::protobuf::uint32 value) {
  bidvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.BidVol)
}
inline void MarketData::add_bidvol(::google::protobuf::uint32 value) {
  bidvol_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.BidVol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarketData::bidvol() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.BidVol)
  return bidvol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarketData::mutable_bidvol() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.BidVol)
  return &bidvol_;
}

// required uint32 NumTrades = 16;
inline bool MarketData::has_numtrades() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MarketData::set_has_numtrades() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MarketData::clear_has_numtrades() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MarketData::clear_numtrades() {
  numtrades_ = 0u;
  clear_has_numtrades();
}
inline ::google::protobuf::uint32 MarketData::numtrades() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.NumTrades)
  return numtrades_;
}
inline void MarketData::set_numtrades(::google::protobuf::uint32 value) {
  set_has_numtrades();
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.NumTrades)
}

// required int64 Volume = 17;
inline bool MarketData::has_volume() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MarketData::set_has_volume() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MarketData::clear_has_volume() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MarketData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 MarketData::volume() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Volume)
  return volume_;
}
inline void MarketData::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Volume)
}

// required int64 Turnover = 18;
inline bool MarketData::has_turnover() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MarketData::set_has_turnover() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MarketData::clear_has_turnover() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MarketData::clear_turnover() {
  turnover_ = GOOGLE_LONGLONG(0);
  clear_has_turnover();
}
inline ::google::protobuf::int64 MarketData::turnover() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Turnover)
  return turnover_;
}
inline void MarketData::set_turnover(::google::protobuf::int64 value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Turnover)
}

// required int64 TotalBidVol = 19;
inline bool MarketData::has_totalbidvol() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MarketData::set_has_totalbidvol() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MarketData::clear_has_totalbidvol() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MarketData::clear_totalbidvol() {
  totalbidvol_ = GOOGLE_LONGLONG(0);
  clear_has_totalbidvol();
}
inline ::google::protobuf::int64 MarketData::totalbidvol() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalBidVol)
  return totalbidvol_;
}
inline void MarketData::set_totalbidvol(::google::protobuf::int64 value) {
  set_has_totalbidvol();
  totalbidvol_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalBidVol)
}

// required int64 TotalAskVol = 20;
inline bool MarketData::has_totalaskvol() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MarketData::set_has_totalaskvol() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MarketData::clear_has_totalaskvol() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MarketData::clear_totalaskvol() {
  totalaskvol_ = GOOGLE_LONGLONG(0);
  clear_has_totalaskvol();
}
inline ::google::protobuf::int64 MarketData::totalaskvol() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalAskVol)
  return totalaskvol_;
}
inline void MarketData::set_totalaskvol(::google::protobuf::int64 value) {
  set_has_totalaskvol();
  totalaskvol_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalAskVol)
}

// required uint32 WeighteAvgBidPrice = 21;
inline bool MarketData::has_weighteavgbidprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MarketData::set_has_weighteavgbidprice() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MarketData::clear_has_weighteavgbidprice() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MarketData::clear_weighteavgbidprice() {
  weighteavgbidprice_ = 0u;
  clear_has_weighteavgbidprice();
}
inline ::google::protobuf::uint32 MarketData::weighteavgbidprice() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WeighteAvgBidPrice)
  return weighteavgbidprice_;
}
inline void MarketData::set_weighteavgbidprice(::google::protobuf::uint32 value) {
  set_has_weighteavgbidprice();
  weighteavgbidprice_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WeighteAvgBidPrice)
}

// required uint32 WeighteAvgAskPrice = 22;
inline bool MarketData::has_weighteavgaskprice() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MarketData::set_has_weighteavgaskprice() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MarketData::clear_has_weighteavgaskprice() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MarketData::clear_weighteavgaskprice() {
  weighteavgaskprice_ = 0u;
  clear_has_weighteavgaskprice();
}
inline ::google::protobuf::uint32 MarketData::weighteavgaskprice() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WeighteAvgAskPrice)
  return weighteavgaskprice_;
}
inline void MarketData::set_weighteavgaskprice(::google::protobuf::uint32 value) {
  set_has_weighteavgaskprice();
  weighteavgaskprice_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WeighteAvgAskPrice)
}

// required int32 IOPV = 23;
inline bool MarketData::has_iopv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MarketData::set_has_iopv() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MarketData::clear_has_iopv() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MarketData::clear_iopv() {
  iopv_ = 0;
  clear_has_iopv();
}
inline ::google::protobuf::int32 MarketData::iopv() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.IOPV)
  return iopv_;
}
inline void MarketData::set_iopv(::google::protobuf::int32 value) {
  set_has_iopv();
  iopv_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.IOPV)
}

// required int32 YieldToMaturity = 24;
inline bool MarketData::has_yieldtomaturity() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MarketData::set_has_yieldtomaturity() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MarketData::clear_has_yieldtomaturity() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MarketData::clear_yieldtomaturity() {
  yieldtomaturity_ = 0;
  clear_has_yieldtomaturity();
}
inline ::google::protobuf::int32 MarketData::yieldtomaturity() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.YieldToMaturity)
  return yieldtomaturity_;
}
inline void MarketData::set_yieldtomaturity(::google::protobuf::int32 value) {
  set_has_yieldtomaturity();
  yieldtomaturity_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.YieldToMaturity)
}

// required uint32 HighLimited = 25;
inline bool MarketData::has_highlimited() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MarketData::set_has_highlimited() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MarketData::clear_has_highlimited() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MarketData::clear_highlimited() {
  highlimited_ = 0u;
  clear_has_highlimited();
}
inline ::google::protobuf::uint32 MarketData::highlimited() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.HighLimited)
  return highlimited_;
}
inline void MarketData::set_highlimited(::google::protobuf::uint32 value) {
  set_has_highlimited();
  highlimited_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.HighLimited)
}

// required uint32 LowLimited = 26;
inline bool MarketData::has_lowlimited() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MarketData::set_has_lowlimited() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MarketData::clear_has_lowlimited() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MarketData::clear_lowlimited() {
  lowlimited_ = 0u;
  clear_has_lowlimited();
}
inline ::google::protobuf::uint32 MarketData::lowlimited() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.LowLimited)
  return lowlimited_;
}
inline void MarketData::set_lowlimited(::google::protobuf::uint32 value) {
  set_has_lowlimited();
  lowlimited_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.LowLimited)
}

// required string Prefix = 27;
inline bool MarketData::has_prefix() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MarketData::set_has_prefix() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MarketData::clear_has_prefix() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MarketData::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
inline const ::std::string& MarketData::prefix() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.Prefix)
}
inline void MarketData::set_prefix(const char* value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.Prefix)
}
inline void MarketData::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.Prefix)
}
inline ::std::string* MarketData::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.Prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData::release_prefix() {
  // @@protoc_insertion_point(field_release:comm.MarketData.Prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.Prefix)
}

// required int32 Syl1 = 28;
inline bool MarketData::has_syl1() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MarketData::set_has_syl1() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MarketData::clear_has_syl1() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MarketData::clear_syl1() {
  syl1_ = 0;
  clear_has_syl1();
}
inline ::google::protobuf::int32 MarketData::syl1() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Syl1)
  return syl1_;
}
inline void MarketData::set_syl1(::google::protobuf::int32 value) {
  set_has_syl1();
  syl1_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Syl1)
}

// required int32 Syl2 = 29;
inline bool MarketData::has_syl2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MarketData::set_has_syl2() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MarketData::clear_has_syl2() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MarketData::clear_syl2() {
  syl2_ = 0;
  clear_has_syl2();
}
inline ::google::protobuf::int32 MarketData::syl2() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Syl2)
  return syl2_;
}
inline void MarketData::set_syl2(::google::protobuf::int32 value) {
  set_has_syl2();
  syl2_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Syl2)
}

// required int32 SD2 = 30;
inline bool MarketData::has_sd2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MarketData::set_has_sd2() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MarketData::clear_has_sd2() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MarketData::clear_sd2() {
  sd2_ = 0;
  clear_has_sd2();
}
inline ::google::protobuf::int32 MarketData::sd2() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.SD2)
  return sd2_;
}
inline void MarketData::set_sd2(::google::protobuf::int32 value) {
  set_has_sd2();
  sd2_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.SD2)
}

inline const MarketData* MarketData::internal_default_instance() {
  return &MarketData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_marketData_2eproto__INCLUDED
