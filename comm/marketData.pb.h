// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketData.proto

#ifndef PROTOBUF_marketData_2eproto__INCLUDED
#define PROTOBUF_marketData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_marketData_2eproto();
void protobuf_InitDefaults_marketData_2eproto();
void protobuf_AssignDesc_marketData_2eproto();
void protobuf_ShutdownFile_marketData_2eproto();

class MarketData;

// ===================================================================

class MarketData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comm.MarketData) */ {
 public:
  MarketData();
  virtual ~MarketData();

  MarketData(const MarketData& from);

  inline MarketData& operator=(const MarketData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketData& default_instance();

  static const MarketData* internal_default_instance();

  void Swap(MarketData* other);

  // implements Message ----------------------------------------------

  inline MarketData* New() const { return New(NULL); }

  MarketData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketData& from);
  void MergeFrom(const MarketData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarketData* other);
  void UnsafeMergeFrom(const MarketData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string HTSCSecurityID = 1;
  bool has_htscsecurityid() const;
  void clear_htscsecurityid();
  static const int kHTSCSecurityIDFieldNumber = 1;
  const ::std::string& htscsecurityid() const;
  void set_htscsecurityid(const ::std::string& value);
  void set_htscsecurityid(const char* value);
  void set_htscsecurityid(const char* value, size_t size);
  ::std::string* mutable_htscsecurityid();
  ::std::string* release_htscsecurityid();
  void set_allocated_htscsecurityid(::std::string* htscsecurityid);

  // required int32 MDDate = 2;
  bool has_mddate() const;
  void clear_mddate();
  static const int kMDDateFieldNumber = 2;
  ::google::protobuf::int32 mddate() const;
  void set_mddate(::google::protobuf::int32 value);

  // required int32 MDTime = 3;
  bool has_mdtime() const;
  void clear_mdtime();
  static const int kMDTimeFieldNumber = 3;
  ::google::protobuf::int32 mdtime() const;
  void set_mdtime(::google::protobuf::int32 value);

  // optional string TradingPhaseCode = 4;
  bool has_tradingphasecode() const;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 4;
  const ::std::string& tradingphasecode() const;
  void set_tradingphasecode(const ::std::string& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  ::std::string* mutable_tradingphasecode();
  ::std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(::std::string* tradingphasecode);

  // optional string securityIDSource = 5;
  bool has_securityidsource() const;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 5;
  const ::std::string& securityidsource() const;
  void set_securityidsource(const ::std::string& value);
  void set_securityidsource(const char* value);
  void set_securityidsource(const char* value, size_t size);
  ::std::string* mutable_securityidsource();
  ::std::string* release_securityidsource();
  void set_allocated_securityidsource(::std::string* securityidsource);

  // optional string securityType = 6;
  bool has_securitytype() const;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 6;
  const ::std::string& securitytype() const;
  void set_securitytype(const ::std::string& value);
  void set_securitytype(const char* value);
  void set_securitytype(const char* value, size_t size);
  ::std::string* mutable_securitytype();
  ::std::string* release_securitytype();
  void set_allocated_securitytype(::std::string* securitytype);

  // optional int64 MaxPx = 7;
  bool has_maxpx() const;
  void clear_maxpx();
  static const int kMaxPxFieldNumber = 7;
  ::google::protobuf::int64 maxpx() const;
  void set_maxpx(::google::protobuf::int64 value);

  // optional int64 MinPx = 8;
  bool has_minpx() const;
  void clear_minpx();
  static const int kMinPxFieldNumber = 8;
  ::google::protobuf::int64 minpx() const;
  void set_minpx(::google::protobuf::int64 value);

  // optional int64 PreClosePx = 9;
  bool has_preclosepx() const;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 9;
  ::google::protobuf::int64 preclosepx() const;
  void set_preclosepx(::google::protobuf::int64 value);

  // optional int64 NumTrades = 10;
  bool has_numtrades() const;
  void clear_numtrades();
  static const int kNumTradesFieldNumber = 10;
  ::google::protobuf::int64 numtrades() const;
  void set_numtrades(::google::protobuf::int64 value);

  // optional int64 TotalVolumeTrade = 11;
  bool has_totalvolumetrade() const;
  void clear_totalvolumetrade();
  static const int kTotalVolumeTradeFieldNumber = 11;
  ::google::protobuf::int64 totalvolumetrade() const;
  void set_totalvolumetrade(::google::protobuf::int64 value);

  // optional int64 TotalValueTrade = 12;
  bool has_totalvaluetrade() const;
  void clear_totalvaluetrade();
  static const int kTotalValueTradeFieldNumber = 12;
  ::google::protobuf::int64 totalvaluetrade() const;
  void set_totalvaluetrade(::google::protobuf::int64 value);

  // optional int64 LastPx = 13;
  bool has_lastpx() const;
  void clear_lastpx();
  static const int kLastPxFieldNumber = 13;
  ::google::protobuf::int64 lastpx() const;
  void set_lastpx(::google::protobuf::int64 value);

  // optional int64 OpenPx = 14;
  bool has_openpx() const;
  void clear_openpx();
  static const int kOpenPxFieldNumber = 14;
  ::google::protobuf::int64 openpx() const;
  void set_openpx(::google::protobuf::int64 value);

  // optional int64 ClosePx = 15;
  bool has_closepx() const;
  void clear_closepx();
  static const int kClosePxFieldNumber = 15;
  ::google::protobuf::int64 closepx() const;
  void set_closepx(::google::protobuf::int64 value);

  // optional int64 HighPx = 16;
  bool has_highpx() const;
  void clear_highpx();
  static const int kHighPxFieldNumber = 16;
  ::google::protobuf::int64 highpx() const;
  void set_highpx(::google::protobuf::int64 value);

  // optional int64 LowPx = 17;
  bool has_lowpx() const;
  void clear_lowpx();
  static const int kLowPxFieldNumber = 17;
  ::google::protobuf::int64 lowpx() const;
  void set_lowpx(::google::protobuf::int64 value);

  // optional int64 DiffPx1 = 18;
  bool has_diffpx1() const;
  void clear_diffpx1();
  static const int kDiffPx1FieldNumber = 18;
  ::google::protobuf::int64 diffpx1() const;
  void set_diffpx1(::google::protobuf::int64 value);

  // optional int64 DiffPx2 = 19;
  bool has_diffpx2() const;
  void clear_diffpx2();
  static const int kDiffPx2FieldNumber = 19;
  ::google::protobuf::int64 diffpx2() const;
  void set_diffpx2(::google::protobuf::int64 value);

  // optional int64 TotalBuyQty = 20;
  bool has_totalbuyqty() const;
  void clear_totalbuyqty();
  static const int kTotalBuyQtyFieldNumber = 20;
  ::google::protobuf::int64 totalbuyqty() const;
  void set_totalbuyqty(::google::protobuf::int64 value);

  // optional int64 TotalSellQty = 21;
  bool has_totalsellqty() const;
  void clear_totalsellqty();
  static const int kTotalSellQtyFieldNumber = 21;
  ::google::protobuf::int64 totalsellqty() const;
  void set_totalsellqty(::google::protobuf::int64 value);

  // optional int64 WeightedAvgBuyPx = 22;
  bool has_weightedavgbuypx() const;
  void clear_weightedavgbuypx();
  static const int kWeightedAvgBuyPxFieldNumber = 22;
  ::google::protobuf::int64 weightedavgbuypx() const;
  void set_weightedavgbuypx(::google::protobuf::int64 value);

  // optional int64 WeightedAvgSellPx = 23;
  bool has_weightedavgsellpx() const;
  void clear_weightedavgsellpx();
  static const int kWeightedAvgSellPxFieldNumber = 23;
  ::google::protobuf::int64 weightedavgsellpx() const;
  void set_weightedavgsellpx(::google::protobuf::int64 value);

  // optional int64 WithdrawBuyNumber = 24;
  bool has_withdrawbuynumber() const;
  void clear_withdrawbuynumber();
  static const int kWithdrawBuyNumberFieldNumber = 24;
  ::google::protobuf::int64 withdrawbuynumber() const;
  void set_withdrawbuynumber(::google::protobuf::int64 value);

  // optional int64 WithdrawBuyAmount = 25;
  bool has_withdrawbuyamount() const;
  void clear_withdrawbuyamount();
  static const int kWithdrawBuyAmountFieldNumber = 25;
  ::google::protobuf::int64 withdrawbuyamount() const;
  void set_withdrawbuyamount(::google::protobuf::int64 value);

  // optional int64 WithdrawBuyMoney = 26;
  bool has_withdrawbuymoney() const;
  void clear_withdrawbuymoney();
  static const int kWithdrawBuyMoneyFieldNumber = 26;
  ::google::protobuf::int64 withdrawbuymoney() const;
  void set_withdrawbuymoney(::google::protobuf::int64 value);

  // optional int64 WithdrawSellNumber = 27;
  bool has_withdrawsellnumber() const;
  void clear_withdrawsellnumber();
  static const int kWithdrawSellNumberFieldNumber = 27;
  ::google::protobuf::int64 withdrawsellnumber() const;
  void set_withdrawsellnumber(::google::protobuf::int64 value);

  // optional int64 WithdrawSellAmount = 28;
  bool has_withdrawsellamount() const;
  void clear_withdrawsellamount();
  static const int kWithdrawSellAmountFieldNumber = 28;
  ::google::protobuf::int64 withdrawsellamount() const;
  void set_withdrawsellamount(::google::protobuf::int64 value);

  // optional int64 WithdrawSellMoney = 29;
  bool has_withdrawsellmoney() const;
  void clear_withdrawsellmoney();
  static const int kWithdrawSellMoneyFieldNumber = 29;
  ::google::protobuf::int64 withdrawsellmoney() const;
  void set_withdrawsellmoney(::google::protobuf::int64 value);

  // optional int64 TotalBuyNumber = 30;
  bool has_totalbuynumber() const;
  void clear_totalbuynumber();
  static const int kTotalBuyNumberFieldNumber = 30;
  ::google::protobuf::int64 totalbuynumber() const;
  void set_totalbuynumber(::google::protobuf::int64 value);

  // optional int64 TotalSellNumber = 31;
  bool has_totalsellnumber() const;
  void clear_totalsellnumber();
  static const int kTotalSellNumberFieldNumber = 31;
  ::google::protobuf::int64 totalsellnumber() const;
  void set_totalsellnumber(::google::protobuf::int64 value);

  // optional int64 BuyTradeMaxDuration = 32;
  bool has_buytrademaxduration() const;
  void clear_buytrademaxduration();
  static const int kBuyTradeMaxDurationFieldNumber = 32;
  ::google::protobuf::int64 buytrademaxduration() const;
  void set_buytrademaxduration(::google::protobuf::int64 value);

  // optional int64 SellTradeMaxDuration = 33;
  bool has_selltrademaxduration() const;
  void clear_selltrademaxduration();
  static const int kSellTradeMaxDurationFieldNumber = 33;
  ::google::protobuf::int64 selltrademaxduration() const;
  void set_selltrademaxduration(::google::protobuf::int64 value);

  // optional int32 NumBuyOrders = 34;
  bool has_numbuyorders() const;
  void clear_numbuyorders();
  static const int kNumBuyOrdersFieldNumber = 34;
  ::google::protobuf::int32 numbuyorders() const;
  void set_numbuyorders(::google::protobuf::int32 value);

  // optional int32 NumSellOrders = 35;
  bool has_numsellorders() const;
  void clear_numsellorders();
  static const int kNumSellOrdersFieldNumber = 35;
  ::google::protobuf::int32 numsellorders() const;
  void set_numsellorders(::google::protobuf::int32 value);

  // optional int64 NorminalPx = 36;
  bool has_norminalpx() const;
  void clear_norminalpx();
  static const int kNorminalPxFieldNumber = 36;
  ::google::protobuf::int64 norminalpx() const;
  void set_norminalpx(::google::protobuf::int64 value);

  // optional int64 ShortSellSharesTraded = 37;
  bool has_shortsellsharestraded() const;
  void clear_shortsellsharestraded();
  static const int kShortSellSharesTradedFieldNumber = 37;
  ::google::protobuf::int64 shortsellsharestraded() const;
  void set_shortsellsharestraded(::google::protobuf::int64 value);

  // optional int64 ShortSellTurnover = 38;
  bool has_shortsellturnover() const;
  void clear_shortsellturnover();
  static const int kShortSellTurnoverFieldNumber = 38;
  ::google::protobuf::int64 shortsellturnover() const;
  void set_shortsellturnover(::google::protobuf::int64 value);

  // optional int64 ReferencePx = 39;
  bool has_referencepx() const;
  void clear_referencepx();
  static const int kReferencePxFieldNumber = 39;
  ::google::protobuf::int64 referencepx() const;
  void set_referencepx(::google::protobuf::int64 value);

  // optional int64 ComplexEventStartTime = 40;
  bool has_complexeventstarttime() const;
  void clear_complexeventstarttime();
  static const int kComplexEventStartTimeFieldNumber = 40;
  ::google::protobuf::int64 complexeventstarttime() const;
  void set_complexeventstarttime(::google::protobuf::int64 value);

  // optional int64 ComplexEventEndTime = 41;
  bool has_complexeventendtime() const;
  void clear_complexeventendtime();
  static const int kComplexEventEndTimeFieldNumber = 41;
  ::google::protobuf::int64 complexeventendtime() const;
  void set_complexeventendtime(::google::protobuf::int64 value);

  // optional int32 ExchangeDate = 42;
  bool has_exchangedate() const;
  void clear_exchangedate();
  static const int kExchangeDateFieldNumber = 42;
  ::google::protobuf::int32 exchangedate() const;
  void set_exchangedate(::google::protobuf::int32 value);

  // optional int32 ExchangeTime = 43;
  bool has_exchangetime() const;
  void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 43;
  ::google::protobuf::int32 exchangetime() const;
  void set_exchangetime(::google::protobuf::int32 value);

  // optional int64 AfterHoursNumTrades = 44;
  bool has_afterhoursnumtrades() const;
  void clear_afterhoursnumtrades();
  static const int kAfterHoursNumTradesFieldNumber = 44;
  ::google::protobuf::int64 afterhoursnumtrades() const;
  void set_afterhoursnumtrades(::google::protobuf::int64 value);

  // optional int64 AfterHoursTotalVolumeTrade = 45;
  bool has_afterhourstotalvolumetrade() const;
  void clear_afterhourstotalvolumetrade();
  static const int kAfterHoursTotalVolumeTradeFieldNumber = 45;
  ::google::protobuf::int64 afterhourstotalvolumetrade() const;
  void set_afterhourstotalvolumetrade(::google::protobuf::int64 value);

  // optional int64 AfterHoursTotalValueTrade = 46;
  bool has_afterhourstotalvaluetrade() const;
  void clear_afterhourstotalvaluetrade();
  static const int kAfterHoursTotalValueTradeFieldNumber = 46;
  ::google::protobuf::int64 afterhourstotalvaluetrade() const;
  void set_afterhourstotalvaluetrade(::google::protobuf::int64 value);

  // optional int32 ChannelNo = 47;
  bool has_channelno() const;
  void clear_channelno();
  static const int kChannelNoFieldNumber = 47;
  ::google::protobuf::int32 channelno() const;
  void set_channelno(::google::protobuf::int32 value);

  // repeated int64 BuyPriceQueue = 48;
  int buypricequeue_size() const;
  void clear_buypricequeue();
  static const int kBuyPriceQueueFieldNumber = 48;
  ::google::protobuf::int64 buypricequeue(int index) const;
  void set_buypricequeue(int index, ::google::protobuf::int64 value);
  void add_buypricequeue(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      buypricequeue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_buypricequeue();

  // repeated int64 BuyOrderQtyQueue = 49;
  int buyorderqtyqueue_size() const;
  void clear_buyorderqtyqueue();
  static const int kBuyOrderQtyQueueFieldNumber = 49;
  ::google::protobuf::int64 buyorderqtyqueue(int index) const;
  void set_buyorderqtyqueue(int index, ::google::protobuf::int64 value);
  void add_buyorderqtyqueue(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      buyorderqtyqueue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_buyorderqtyqueue();

  // repeated int64 SellPriceQueue = 50;
  int sellpricequeue_size() const;
  void clear_sellpricequeue();
  static const int kSellPriceQueueFieldNumber = 50;
  ::google::protobuf::int64 sellpricequeue(int index) const;
  void set_sellpricequeue(int index, ::google::protobuf::int64 value);
  void add_sellpricequeue(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sellpricequeue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sellpricequeue();

  // repeated int64 SellOrderQtyQueue = 51;
  int sellorderqtyqueue_size() const;
  void clear_sellorderqtyqueue();
  static const int kSellOrderQtyQueueFieldNumber = 51;
  ::google::protobuf::int64 sellorderqtyqueue(int index) const;
  void set_sellorderqtyqueue(int index, ::google::protobuf::int64 value);
  void add_sellorderqtyqueue(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sellorderqtyqueue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sellorderqtyqueue();

  // repeated int64 BuyOrderQueue = 52;
  int buyorderqueue_size() const;
  void clear_buyorderqueue();
  static const int kBuyOrderQueueFieldNumber = 52;
  ::google::protobuf::int64 buyorderqueue(int index) const;
  void set_buyorderqueue(int index, ::google::protobuf::int64 value);
  void add_buyorderqueue(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      buyorderqueue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_buyorderqueue();

  // repeated int64 SellOrderQueue = 53;
  int sellorderqueue_size() const;
  void clear_sellorderqueue();
  static const int kSellOrderQueueFieldNumber = 53;
  ::google::protobuf::int64 sellorderqueue(int index) const;
  void set_sellorderqueue(int index, ::google::protobuf::int64 value);
  void add_sellorderqueue(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sellorderqueue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sellorderqueue();

  // repeated int64 BuyNumOrdersQueue = 54;
  int buynumordersqueue_size() const;
  void clear_buynumordersqueue();
  static const int kBuyNumOrdersQueueFieldNumber = 54;
  ::google::protobuf::int64 buynumordersqueue(int index) const;
  void set_buynumordersqueue(int index, ::google::protobuf::int64 value);
  void add_buynumordersqueue(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      buynumordersqueue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_buynumordersqueue();

  // repeated int64 SellNumOrdersQueue = 55;
  int sellnumordersqueue_size() const;
  void clear_sellnumordersqueue();
  static const int kSellNumOrdersQueueFieldNumber = 55;
  ::google::protobuf::int64 sellnumordersqueue(int index) const;
  void set_sellnumordersqueue(int index, ::google::protobuf::int64 value);
  void add_sellnumordersqueue(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sellnumordersqueue() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sellnumordersqueue();

  // @@protoc_insertion_point(class_scope:comm.MarketData)
 private:
  inline void set_has_htscsecurityid();
  inline void clear_has_htscsecurityid();
  inline void set_has_mddate();
  inline void clear_has_mddate();
  inline void set_has_mdtime();
  inline void clear_has_mdtime();
  inline void set_has_tradingphasecode();
  inline void clear_has_tradingphasecode();
  inline void set_has_securityidsource();
  inline void clear_has_securityidsource();
  inline void set_has_securitytype();
  inline void clear_has_securitytype();
  inline void set_has_maxpx();
  inline void clear_has_maxpx();
  inline void set_has_minpx();
  inline void clear_has_minpx();
  inline void set_has_preclosepx();
  inline void clear_has_preclosepx();
  inline void set_has_numtrades();
  inline void clear_has_numtrades();
  inline void set_has_totalvolumetrade();
  inline void clear_has_totalvolumetrade();
  inline void set_has_totalvaluetrade();
  inline void clear_has_totalvaluetrade();
  inline void set_has_lastpx();
  inline void clear_has_lastpx();
  inline void set_has_openpx();
  inline void clear_has_openpx();
  inline void set_has_closepx();
  inline void clear_has_closepx();
  inline void set_has_highpx();
  inline void clear_has_highpx();
  inline void set_has_lowpx();
  inline void clear_has_lowpx();
  inline void set_has_diffpx1();
  inline void clear_has_diffpx1();
  inline void set_has_diffpx2();
  inline void clear_has_diffpx2();
  inline void set_has_totalbuyqty();
  inline void clear_has_totalbuyqty();
  inline void set_has_totalsellqty();
  inline void clear_has_totalsellqty();
  inline void set_has_weightedavgbuypx();
  inline void clear_has_weightedavgbuypx();
  inline void set_has_weightedavgsellpx();
  inline void clear_has_weightedavgsellpx();
  inline void set_has_withdrawbuynumber();
  inline void clear_has_withdrawbuynumber();
  inline void set_has_withdrawbuyamount();
  inline void clear_has_withdrawbuyamount();
  inline void set_has_withdrawbuymoney();
  inline void clear_has_withdrawbuymoney();
  inline void set_has_withdrawsellnumber();
  inline void clear_has_withdrawsellnumber();
  inline void set_has_withdrawsellamount();
  inline void clear_has_withdrawsellamount();
  inline void set_has_withdrawsellmoney();
  inline void clear_has_withdrawsellmoney();
  inline void set_has_totalbuynumber();
  inline void clear_has_totalbuynumber();
  inline void set_has_totalsellnumber();
  inline void clear_has_totalsellnumber();
  inline void set_has_buytrademaxduration();
  inline void clear_has_buytrademaxduration();
  inline void set_has_selltrademaxduration();
  inline void clear_has_selltrademaxduration();
  inline void set_has_numbuyorders();
  inline void clear_has_numbuyorders();
  inline void set_has_numsellorders();
  inline void clear_has_numsellorders();
  inline void set_has_norminalpx();
  inline void clear_has_norminalpx();
  inline void set_has_shortsellsharestraded();
  inline void clear_has_shortsellsharestraded();
  inline void set_has_shortsellturnover();
  inline void clear_has_shortsellturnover();
  inline void set_has_referencepx();
  inline void clear_has_referencepx();
  inline void set_has_complexeventstarttime();
  inline void clear_has_complexeventstarttime();
  inline void set_has_complexeventendtime();
  inline void clear_has_complexeventendtime();
  inline void set_has_exchangedate();
  inline void clear_has_exchangedate();
  inline void set_has_exchangetime();
  inline void clear_has_exchangetime();
  inline void set_has_afterhoursnumtrades();
  inline void clear_has_afterhoursnumtrades();
  inline void set_has_afterhourstotalvolumetrade();
  inline void clear_has_afterhourstotalvolumetrade();
  inline void set_has_afterhourstotalvaluetrade();
  inline void clear_has_afterhourstotalvaluetrade();
  inline void set_has_channelno();
  inline void clear_has_channelno();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > buypricequeue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > buyorderqtyqueue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sellpricequeue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sellorderqtyqueue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > buyorderqueue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sellorderqueue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > buynumordersqueue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sellnumordersqueue_;
  ::google::protobuf::internal::ArenaStringPtr htscsecurityid_;
  ::google::protobuf::internal::ArenaStringPtr tradingphasecode_;
  ::google::protobuf::internal::ArenaStringPtr securityidsource_;
  ::google::protobuf::internal::ArenaStringPtr securitytype_;
  ::google::protobuf::int32 mddate_;
  ::google::protobuf::int32 mdtime_;
  ::google::protobuf::int64 maxpx_;
  ::google::protobuf::int64 minpx_;
  ::google::protobuf::int64 preclosepx_;
  ::google::protobuf::int64 numtrades_;
  ::google::protobuf::int64 totalvolumetrade_;
  ::google::protobuf::int64 totalvaluetrade_;
  ::google::protobuf::int64 lastpx_;
  ::google::protobuf::int64 openpx_;
  ::google::protobuf::int64 closepx_;
  ::google::protobuf::int64 highpx_;
  ::google::protobuf::int64 lowpx_;
  ::google::protobuf::int64 diffpx1_;
  ::google::protobuf::int64 diffpx2_;
  ::google::protobuf::int64 totalbuyqty_;
  ::google::protobuf::int64 totalsellqty_;
  ::google::protobuf::int64 weightedavgbuypx_;
  ::google::protobuf::int64 weightedavgsellpx_;
  ::google::protobuf::int64 withdrawbuynumber_;
  ::google::protobuf::int64 withdrawbuyamount_;
  ::google::protobuf::int64 withdrawbuymoney_;
  ::google::protobuf::int64 withdrawsellnumber_;
  ::google::protobuf::int64 withdrawsellamount_;
  ::google::protobuf::int64 withdrawsellmoney_;
  ::google::protobuf::int64 totalbuynumber_;
  ::google::protobuf::int64 totalsellnumber_;
  ::google::protobuf::int64 buytrademaxduration_;
  ::google::protobuf::int64 selltrademaxduration_;
  ::google::protobuf::int32 numbuyorders_;
  ::google::protobuf::int32 numsellorders_;
  ::google::protobuf::int64 norminalpx_;
  ::google::protobuf::int64 shortsellsharestraded_;
  ::google::protobuf::int64 shortsellturnover_;
  ::google::protobuf::int64 referencepx_;
  ::google::protobuf::int64 complexeventstarttime_;
  ::google::protobuf::int64 complexeventendtime_;
  ::google::protobuf::int32 exchangedate_;
  ::google::protobuf::int32 exchangetime_;
  ::google::protobuf::int64 afterhoursnumtrades_;
  ::google::protobuf::int64 afterhourstotalvolumetrade_;
  ::google::protobuf::int64 afterhourstotalvaluetrade_;
  ::google::protobuf::int32 channelno_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_marketData_2eproto_impl();
  friend void  protobuf_AddDesc_marketData_2eproto_impl();
  friend void protobuf_AssignDesc_marketData_2eproto();
  friend void protobuf_ShutdownFile_marketData_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MarketData> MarketData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketData

// required string HTSCSecurityID = 1;
inline bool MarketData::has_htscsecurityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketData::set_has_htscsecurityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketData::clear_has_htscsecurityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketData::clear_htscsecurityid() {
  htscsecurityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_htscsecurityid();
}
inline const ::std::string& MarketData::htscsecurityid() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.HTSCSecurityID)
  return htscsecurityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_htscsecurityid(const ::std::string& value) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.HTSCSecurityID)
}
inline void MarketData::set_htscsecurityid(const char* value) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.HTSCSecurityID)
}
inline void MarketData::set_htscsecurityid(const char* value, size_t size) {
  set_has_htscsecurityid();
  htscsecurityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.HTSCSecurityID)
}
inline ::std::string* MarketData::mutable_htscsecurityid() {
  set_has_htscsecurityid();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.HTSCSecurityID)
  return htscsecurityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData::release_htscsecurityid() {
  // @@protoc_insertion_point(field_release:comm.MarketData.HTSCSecurityID)
  clear_has_htscsecurityid();
  return htscsecurityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_allocated_htscsecurityid(::std::string* htscsecurityid) {
  if (htscsecurityid != NULL) {
    set_has_htscsecurityid();
  } else {
    clear_has_htscsecurityid();
  }
  htscsecurityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htscsecurityid);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.HTSCSecurityID)
}

// required int32 MDDate = 2;
inline bool MarketData::has_mddate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarketData::set_has_mddate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarketData::clear_has_mddate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarketData::clear_mddate() {
  mddate_ = 0;
  clear_has_mddate();
}
inline ::google::protobuf::int32 MarketData::mddate() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.MDDate)
  return mddate_;
}
inline void MarketData::set_mddate(::google::protobuf::int32 value) {
  set_has_mddate();
  mddate_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.MDDate)
}

// required int32 MDTime = 3;
inline bool MarketData::has_mdtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarketData::set_has_mdtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarketData::clear_has_mdtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarketData::clear_mdtime() {
  mdtime_ = 0;
  clear_has_mdtime();
}
inline ::google::protobuf::int32 MarketData::mdtime() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.MDTime)
  return mdtime_;
}
inline void MarketData::set_mdtime(::google::protobuf::int32 value) {
  set_has_mdtime();
  mdtime_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.MDTime)
}

// optional string TradingPhaseCode = 4;
inline bool MarketData::has_tradingphasecode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarketData::set_has_tradingphasecode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarketData::clear_has_tradingphasecode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarketData::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradingphasecode();
}
inline const ::std::string& MarketData::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TradingPhaseCode)
  return tradingphasecode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_tradingphasecode(const ::std::string& value) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.TradingPhaseCode)
}
inline void MarketData::set_tradingphasecode(const char* value) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.TradingPhaseCode)
}
inline void MarketData::set_tradingphasecode(const char* value, size_t size) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.TradingPhaseCode)
}
inline ::std::string* MarketData::mutable_tradingphasecode() {
  set_has_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:comm.MarketData.TradingPhaseCode)
  clear_has_tradingphasecode();
  return tradingphasecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_allocated_tradingphasecode(::std::string* tradingphasecode) {
  if (tradingphasecode != NULL) {
    set_has_tradingphasecode();
  } else {
    clear_has_tradingphasecode();
  }
  tradingphasecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.TradingPhaseCode)
}

// optional string securityIDSource = 5;
inline bool MarketData::has_securityidsource() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarketData::set_has_securityidsource() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarketData::clear_has_securityidsource() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarketData::clear_securityidsource() {
  securityidsource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securityidsource();
}
inline const ::std::string& MarketData::securityidsource() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.securityIDSource)
  return securityidsource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_securityidsource(const ::std::string& value) {
  set_has_securityidsource();
  securityidsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.securityIDSource)
}
inline void MarketData::set_securityidsource(const char* value) {
  set_has_securityidsource();
  securityidsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.securityIDSource)
}
inline void MarketData::set_securityidsource(const char* value, size_t size) {
  set_has_securityidsource();
  securityidsource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.securityIDSource)
}
inline ::std::string* MarketData::mutable_securityidsource() {
  set_has_securityidsource();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.securityIDSource)
  return securityidsource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData::release_securityidsource() {
  // @@protoc_insertion_point(field_release:comm.MarketData.securityIDSource)
  clear_has_securityidsource();
  return securityidsource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_allocated_securityidsource(::std::string* securityidsource) {
  if (securityidsource != NULL) {
    set_has_securityidsource();
  } else {
    clear_has_securityidsource();
  }
  securityidsource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securityidsource);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.securityIDSource)
}

// optional string securityType = 6;
inline bool MarketData::has_securitytype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarketData::set_has_securitytype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarketData::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarketData::clear_securitytype() {
  securitytype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securitytype();
}
inline const ::std::string& MarketData::securitytype() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.securityType)
  return securitytype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_securitytype(const ::std::string& value) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.securityType)
}
inline void MarketData::set_securitytype(const char* value) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.securityType)
}
inline void MarketData::set_securitytype(const char* value, size_t size) {
  set_has_securitytype();
  securitytype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.securityType)
}
inline ::std::string* MarketData::mutable_securitytype() {
  set_has_securitytype();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.securityType)
  return securitytype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketData::release_securitytype() {
  // @@protoc_insertion_point(field_release:comm.MarketData.securityType)
  clear_has_securitytype();
  return securitytype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketData::set_allocated_securitytype(::std::string* securitytype) {
  if (securitytype != NULL) {
    set_has_securitytype();
  } else {
    clear_has_securitytype();
  }
  securitytype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitytype);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.securityType)
}

// optional int64 MaxPx = 7;
inline bool MarketData::has_maxpx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarketData::set_has_maxpx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarketData::clear_has_maxpx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarketData::clear_maxpx() {
  maxpx_ = GOOGLE_LONGLONG(0);
  clear_has_maxpx();
}
inline ::google::protobuf::int64 MarketData::maxpx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.MaxPx)
  return maxpx_;
}
inline void MarketData::set_maxpx(::google::protobuf::int64 value) {
  set_has_maxpx();
  maxpx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.MaxPx)
}

// optional int64 MinPx = 8;
inline bool MarketData::has_minpx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarketData::set_has_minpx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarketData::clear_has_minpx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarketData::clear_minpx() {
  minpx_ = GOOGLE_LONGLONG(0);
  clear_has_minpx();
}
inline ::google::protobuf::int64 MarketData::minpx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.MinPx)
  return minpx_;
}
inline void MarketData::set_minpx(::google::protobuf::int64 value) {
  set_has_minpx();
  minpx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.MinPx)
}

// optional int64 PreClosePx = 9;
inline bool MarketData::has_preclosepx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MarketData::set_has_preclosepx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MarketData::clear_has_preclosepx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MarketData::clear_preclosepx() {
  preclosepx_ = GOOGLE_LONGLONG(0);
  clear_has_preclosepx();
}
inline ::google::protobuf::int64 MarketData::preclosepx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.PreClosePx)
  return preclosepx_;
}
inline void MarketData::set_preclosepx(::google::protobuf::int64 value) {
  set_has_preclosepx();
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.PreClosePx)
}

// optional int64 NumTrades = 10;
inline bool MarketData::has_numtrades() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MarketData::set_has_numtrades() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MarketData::clear_has_numtrades() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MarketData::clear_numtrades() {
  numtrades_ = GOOGLE_LONGLONG(0);
  clear_has_numtrades();
}
inline ::google::protobuf::int64 MarketData::numtrades() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.NumTrades)
  return numtrades_;
}
inline void MarketData::set_numtrades(::google::protobuf::int64 value) {
  set_has_numtrades();
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.NumTrades)
}

// optional int64 TotalVolumeTrade = 11;
inline bool MarketData::has_totalvolumetrade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MarketData::set_has_totalvolumetrade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MarketData::clear_has_totalvolumetrade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MarketData::clear_totalvolumetrade() {
  totalvolumetrade_ = GOOGLE_LONGLONG(0);
  clear_has_totalvolumetrade();
}
inline ::google::protobuf::int64 MarketData::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalVolumeTrade)
  return totalvolumetrade_;
}
inline void MarketData::set_totalvolumetrade(::google::protobuf::int64 value) {
  set_has_totalvolumetrade();
  totalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalVolumeTrade)
}

// optional int64 TotalValueTrade = 12;
inline bool MarketData::has_totalvaluetrade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MarketData::set_has_totalvaluetrade() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MarketData::clear_has_totalvaluetrade() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MarketData::clear_totalvaluetrade() {
  totalvaluetrade_ = GOOGLE_LONGLONG(0);
  clear_has_totalvaluetrade();
}
inline ::google::protobuf::int64 MarketData::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalValueTrade)
  return totalvaluetrade_;
}
inline void MarketData::set_totalvaluetrade(::google::protobuf::int64 value) {
  set_has_totalvaluetrade();
  totalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalValueTrade)
}

// optional int64 LastPx = 13;
inline bool MarketData::has_lastpx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MarketData::set_has_lastpx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MarketData::clear_has_lastpx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MarketData::clear_lastpx() {
  lastpx_ = GOOGLE_LONGLONG(0);
  clear_has_lastpx();
}
inline ::google::protobuf::int64 MarketData::lastpx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.LastPx)
  return lastpx_;
}
inline void MarketData::set_lastpx(::google::protobuf::int64 value) {
  set_has_lastpx();
  lastpx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.LastPx)
}

// optional int64 OpenPx = 14;
inline bool MarketData::has_openpx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MarketData::set_has_openpx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MarketData::clear_has_openpx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MarketData::clear_openpx() {
  openpx_ = GOOGLE_LONGLONG(0);
  clear_has_openpx();
}
inline ::google::protobuf::int64 MarketData::openpx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.OpenPx)
  return openpx_;
}
inline void MarketData::set_openpx(::google::protobuf::int64 value) {
  set_has_openpx();
  openpx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.OpenPx)
}

// optional int64 ClosePx = 15;
inline bool MarketData::has_closepx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MarketData::set_has_closepx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MarketData::clear_has_closepx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MarketData::clear_closepx() {
  closepx_ = GOOGLE_LONGLONG(0);
  clear_has_closepx();
}
inline ::google::protobuf::int64 MarketData::closepx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ClosePx)
  return closepx_;
}
inline void MarketData::set_closepx(::google::protobuf::int64 value) {
  set_has_closepx();
  closepx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ClosePx)
}

// optional int64 HighPx = 16;
inline bool MarketData::has_highpx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MarketData::set_has_highpx() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MarketData::clear_has_highpx() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MarketData::clear_highpx() {
  highpx_ = GOOGLE_LONGLONG(0);
  clear_has_highpx();
}
inline ::google::protobuf::int64 MarketData::highpx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.HighPx)
  return highpx_;
}
inline void MarketData::set_highpx(::google::protobuf::int64 value) {
  set_has_highpx();
  highpx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.HighPx)
}

// optional int64 LowPx = 17;
inline bool MarketData::has_lowpx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MarketData::set_has_lowpx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MarketData::clear_has_lowpx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MarketData::clear_lowpx() {
  lowpx_ = GOOGLE_LONGLONG(0);
  clear_has_lowpx();
}
inline ::google::protobuf::int64 MarketData::lowpx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.LowPx)
  return lowpx_;
}
inline void MarketData::set_lowpx(::google::protobuf::int64 value) {
  set_has_lowpx();
  lowpx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.LowPx)
}

// optional int64 DiffPx1 = 18;
inline bool MarketData::has_diffpx1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MarketData::set_has_diffpx1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MarketData::clear_has_diffpx1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MarketData::clear_diffpx1() {
  diffpx1_ = GOOGLE_LONGLONG(0);
  clear_has_diffpx1();
}
inline ::google::protobuf::int64 MarketData::diffpx1() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.DiffPx1)
  return diffpx1_;
}
inline void MarketData::set_diffpx1(::google::protobuf::int64 value) {
  set_has_diffpx1();
  diffpx1_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.DiffPx1)
}

// optional int64 DiffPx2 = 19;
inline bool MarketData::has_diffpx2() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MarketData::set_has_diffpx2() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MarketData::clear_has_diffpx2() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MarketData::clear_diffpx2() {
  diffpx2_ = GOOGLE_LONGLONG(0);
  clear_has_diffpx2();
}
inline ::google::protobuf::int64 MarketData::diffpx2() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.DiffPx2)
  return diffpx2_;
}
inline void MarketData::set_diffpx2(::google::protobuf::int64 value) {
  set_has_diffpx2();
  diffpx2_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.DiffPx2)
}

// optional int64 TotalBuyQty = 20;
inline bool MarketData::has_totalbuyqty() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MarketData::set_has_totalbuyqty() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MarketData::clear_has_totalbuyqty() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MarketData::clear_totalbuyqty() {
  totalbuyqty_ = GOOGLE_LONGLONG(0);
  clear_has_totalbuyqty();
}
inline ::google::protobuf::int64 MarketData::totalbuyqty() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalBuyQty)
  return totalbuyqty_;
}
inline void MarketData::set_totalbuyqty(::google::protobuf::int64 value) {
  set_has_totalbuyqty();
  totalbuyqty_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalBuyQty)
}

// optional int64 TotalSellQty = 21;
inline bool MarketData::has_totalsellqty() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MarketData::set_has_totalsellqty() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MarketData::clear_has_totalsellqty() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MarketData::clear_totalsellqty() {
  totalsellqty_ = GOOGLE_LONGLONG(0);
  clear_has_totalsellqty();
}
inline ::google::protobuf::int64 MarketData::totalsellqty() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalSellQty)
  return totalsellqty_;
}
inline void MarketData::set_totalsellqty(::google::protobuf::int64 value) {
  set_has_totalsellqty();
  totalsellqty_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalSellQty)
}

// optional int64 WeightedAvgBuyPx = 22;
inline bool MarketData::has_weightedavgbuypx() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MarketData::set_has_weightedavgbuypx() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MarketData::clear_has_weightedavgbuypx() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MarketData::clear_weightedavgbuypx() {
  weightedavgbuypx_ = GOOGLE_LONGLONG(0);
  clear_has_weightedavgbuypx();
}
inline ::google::protobuf::int64 MarketData::weightedavgbuypx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WeightedAvgBuyPx)
  return weightedavgbuypx_;
}
inline void MarketData::set_weightedavgbuypx(::google::protobuf::int64 value) {
  set_has_weightedavgbuypx();
  weightedavgbuypx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WeightedAvgBuyPx)
}

// optional int64 WeightedAvgSellPx = 23;
inline bool MarketData::has_weightedavgsellpx() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MarketData::set_has_weightedavgsellpx() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MarketData::clear_has_weightedavgsellpx() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MarketData::clear_weightedavgsellpx() {
  weightedavgsellpx_ = GOOGLE_LONGLONG(0);
  clear_has_weightedavgsellpx();
}
inline ::google::protobuf::int64 MarketData::weightedavgsellpx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WeightedAvgSellPx)
  return weightedavgsellpx_;
}
inline void MarketData::set_weightedavgsellpx(::google::protobuf::int64 value) {
  set_has_weightedavgsellpx();
  weightedavgsellpx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WeightedAvgSellPx)
}

// optional int64 WithdrawBuyNumber = 24;
inline bool MarketData::has_withdrawbuynumber() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MarketData::set_has_withdrawbuynumber() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MarketData::clear_has_withdrawbuynumber() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MarketData::clear_withdrawbuynumber() {
  withdrawbuynumber_ = GOOGLE_LONGLONG(0);
  clear_has_withdrawbuynumber();
}
inline ::google::protobuf::int64 MarketData::withdrawbuynumber() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WithdrawBuyNumber)
  return withdrawbuynumber_;
}
inline void MarketData::set_withdrawbuynumber(::google::protobuf::int64 value) {
  set_has_withdrawbuynumber();
  withdrawbuynumber_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WithdrawBuyNumber)
}

// optional int64 WithdrawBuyAmount = 25;
inline bool MarketData::has_withdrawbuyamount() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MarketData::set_has_withdrawbuyamount() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MarketData::clear_has_withdrawbuyamount() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MarketData::clear_withdrawbuyamount() {
  withdrawbuyamount_ = GOOGLE_LONGLONG(0);
  clear_has_withdrawbuyamount();
}
inline ::google::protobuf::int64 MarketData::withdrawbuyamount() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WithdrawBuyAmount)
  return withdrawbuyamount_;
}
inline void MarketData::set_withdrawbuyamount(::google::protobuf::int64 value) {
  set_has_withdrawbuyamount();
  withdrawbuyamount_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WithdrawBuyAmount)
}

// optional int64 WithdrawBuyMoney = 26;
inline bool MarketData::has_withdrawbuymoney() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MarketData::set_has_withdrawbuymoney() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MarketData::clear_has_withdrawbuymoney() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MarketData::clear_withdrawbuymoney() {
  withdrawbuymoney_ = GOOGLE_LONGLONG(0);
  clear_has_withdrawbuymoney();
}
inline ::google::protobuf::int64 MarketData::withdrawbuymoney() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WithdrawBuyMoney)
  return withdrawbuymoney_;
}
inline void MarketData::set_withdrawbuymoney(::google::protobuf::int64 value) {
  set_has_withdrawbuymoney();
  withdrawbuymoney_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WithdrawBuyMoney)
}

// optional int64 WithdrawSellNumber = 27;
inline bool MarketData::has_withdrawsellnumber() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MarketData::set_has_withdrawsellnumber() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MarketData::clear_has_withdrawsellnumber() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MarketData::clear_withdrawsellnumber() {
  withdrawsellnumber_ = GOOGLE_LONGLONG(0);
  clear_has_withdrawsellnumber();
}
inline ::google::protobuf::int64 MarketData::withdrawsellnumber() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WithdrawSellNumber)
  return withdrawsellnumber_;
}
inline void MarketData::set_withdrawsellnumber(::google::protobuf::int64 value) {
  set_has_withdrawsellnumber();
  withdrawsellnumber_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WithdrawSellNumber)
}

// optional int64 WithdrawSellAmount = 28;
inline bool MarketData::has_withdrawsellamount() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MarketData::set_has_withdrawsellamount() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MarketData::clear_has_withdrawsellamount() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MarketData::clear_withdrawsellamount() {
  withdrawsellamount_ = GOOGLE_LONGLONG(0);
  clear_has_withdrawsellamount();
}
inline ::google::protobuf::int64 MarketData::withdrawsellamount() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WithdrawSellAmount)
  return withdrawsellamount_;
}
inline void MarketData::set_withdrawsellamount(::google::protobuf::int64 value) {
  set_has_withdrawsellamount();
  withdrawsellamount_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WithdrawSellAmount)
}

// optional int64 WithdrawSellMoney = 29;
inline bool MarketData::has_withdrawsellmoney() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MarketData::set_has_withdrawsellmoney() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MarketData::clear_has_withdrawsellmoney() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MarketData::clear_withdrawsellmoney() {
  withdrawsellmoney_ = GOOGLE_LONGLONG(0);
  clear_has_withdrawsellmoney();
}
inline ::google::protobuf::int64 MarketData::withdrawsellmoney() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WithdrawSellMoney)
  return withdrawsellmoney_;
}
inline void MarketData::set_withdrawsellmoney(::google::protobuf::int64 value) {
  set_has_withdrawsellmoney();
  withdrawsellmoney_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WithdrawSellMoney)
}

// optional int64 TotalBuyNumber = 30;
inline bool MarketData::has_totalbuynumber() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MarketData::set_has_totalbuynumber() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MarketData::clear_has_totalbuynumber() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MarketData::clear_totalbuynumber() {
  totalbuynumber_ = GOOGLE_LONGLONG(0);
  clear_has_totalbuynumber();
}
inline ::google::protobuf::int64 MarketData::totalbuynumber() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalBuyNumber)
  return totalbuynumber_;
}
inline void MarketData::set_totalbuynumber(::google::protobuf::int64 value) {
  set_has_totalbuynumber();
  totalbuynumber_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalBuyNumber)
}

// optional int64 TotalSellNumber = 31;
inline bool MarketData::has_totalsellnumber() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MarketData::set_has_totalsellnumber() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MarketData::clear_has_totalsellnumber() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MarketData::clear_totalsellnumber() {
  totalsellnumber_ = GOOGLE_LONGLONG(0);
  clear_has_totalsellnumber();
}
inline ::google::protobuf::int64 MarketData::totalsellnumber() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalSellNumber)
  return totalsellnumber_;
}
inline void MarketData::set_totalsellnumber(::google::protobuf::int64 value) {
  set_has_totalsellnumber();
  totalsellnumber_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalSellNumber)
}

// optional int64 BuyTradeMaxDuration = 32;
inline bool MarketData::has_buytrademaxduration() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void MarketData::set_has_buytrademaxduration() {
  _has_bits_[0] |= 0x80000000u;
}
inline void MarketData::clear_has_buytrademaxduration() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void MarketData::clear_buytrademaxduration() {
  buytrademaxduration_ = GOOGLE_LONGLONG(0);
  clear_has_buytrademaxduration();
}
inline ::google::protobuf::int64 MarketData::buytrademaxduration() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BuyTradeMaxDuration)
  return buytrademaxduration_;
}
inline void MarketData::set_buytrademaxduration(::google::protobuf::int64 value) {
  set_has_buytrademaxduration();
  buytrademaxduration_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.BuyTradeMaxDuration)
}

// optional int64 SellTradeMaxDuration = 33;
inline bool MarketData::has_selltrademaxduration() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void MarketData::set_has_selltrademaxduration() {
  _has_bits_[1] |= 0x00000001u;
}
inline void MarketData::clear_has_selltrademaxduration() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void MarketData::clear_selltrademaxduration() {
  selltrademaxduration_ = GOOGLE_LONGLONG(0);
  clear_has_selltrademaxduration();
}
inline ::google::protobuf::int64 MarketData::selltrademaxduration() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.SellTradeMaxDuration)
  return selltrademaxduration_;
}
inline void MarketData::set_selltrademaxduration(::google::protobuf::int64 value) {
  set_has_selltrademaxduration();
  selltrademaxduration_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.SellTradeMaxDuration)
}

// optional int32 NumBuyOrders = 34;
inline bool MarketData::has_numbuyorders() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void MarketData::set_has_numbuyorders() {
  _has_bits_[1] |= 0x00000002u;
}
inline void MarketData::clear_has_numbuyorders() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void MarketData::clear_numbuyorders() {
  numbuyorders_ = 0;
  clear_has_numbuyorders();
}
inline ::google::protobuf::int32 MarketData::numbuyorders() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.NumBuyOrders)
  return numbuyorders_;
}
inline void MarketData::set_numbuyorders(::google::protobuf::int32 value) {
  set_has_numbuyorders();
  numbuyorders_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.NumBuyOrders)
}

// optional int32 NumSellOrders = 35;
inline bool MarketData::has_numsellorders() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void MarketData::set_has_numsellorders() {
  _has_bits_[1] |= 0x00000004u;
}
inline void MarketData::clear_has_numsellorders() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void MarketData::clear_numsellorders() {
  numsellorders_ = 0;
  clear_has_numsellorders();
}
inline ::google::protobuf::int32 MarketData::numsellorders() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.NumSellOrders)
  return numsellorders_;
}
inline void MarketData::set_numsellorders(::google::protobuf::int32 value) {
  set_has_numsellorders();
  numsellorders_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.NumSellOrders)
}

// optional int64 NorminalPx = 36;
inline bool MarketData::has_norminalpx() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void MarketData::set_has_norminalpx() {
  _has_bits_[1] |= 0x00000008u;
}
inline void MarketData::clear_has_norminalpx() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void MarketData::clear_norminalpx() {
  norminalpx_ = GOOGLE_LONGLONG(0);
  clear_has_norminalpx();
}
inline ::google::protobuf::int64 MarketData::norminalpx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.NorminalPx)
  return norminalpx_;
}
inline void MarketData::set_norminalpx(::google::protobuf::int64 value) {
  set_has_norminalpx();
  norminalpx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.NorminalPx)
}

// optional int64 ShortSellSharesTraded = 37;
inline bool MarketData::has_shortsellsharestraded() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void MarketData::set_has_shortsellsharestraded() {
  _has_bits_[1] |= 0x00000010u;
}
inline void MarketData::clear_has_shortsellsharestraded() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void MarketData::clear_shortsellsharestraded() {
  shortsellsharestraded_ = GOOGLE_LONGLONG(0);
  clear_has_shortsellsharestraded();
}
inline ::google::protobuf::int64 MarketData::shortsellsharestraded() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ShortSellSharesTraded)
  return shortsellsharestraded_;
}
inline void MarketData::set_shortsellsharestraded(::google::protobuf::int64 value) {
  set_has_shortsellsharestraded();
  shortsellsharestraded_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ShortSellSharesTraded)
}

// optional int64 ShortSellTurnover = 38;
inline bool MarketData::has_shortsellturnover() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void MarketData::set_has_shortsellturnover() {
  _has_bits_[1] |= 0x00000020u;
}
inline void MarketData::clear_has_shortsellturnover() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void MarketData::clear_shortsellturnover() {
  shortsellturnover_ = GOOGLE_LONGLONG(0);
  clear_has_shortsellturnover();
}
inline ::google::protobuf::int64 MarketData::shortsellturnover() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ShortSellTurnover)
  return shortsellturnover_;
}
inline void MarketData::set_shortsellturnover(::google::protobuf::int64 value) {
  set_has_shortsellturnover();
  shortsellturnover_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ShortSellTurnover)
}

// optional int64 ReferencePx = 39;
inline bool MarketData::has_referencepx() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void MarketData::set_has_referencepx() {
  _has_bits_[1] |= 0x00000040u;
}
inline void MarketData::clear_has_referencepx() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void MarketData::clear_referencepx() {
  referencepx_ = GOOGLE_LONGLONG(0);
  clear_has_referencepx();
}
inline ::google::protobuf::int64 MarketData::referencepx() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ReferencePx)
  return referencepx_;
}
inline void MarketData::set_referencepx(::google::protobuf::int64 value) {
  set_has_referencepx();
  referencepx_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ReferencePx)
}

// optional int64 ComplexEventStartTime = 40;
inline bool MarketData::has_complexeventstarttime() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void MarketData::set_has_complexeventstarttime() {
  _has_bits_[1] |= 0x00000080u;
}
inline void MarketData::clear_has_complexeventstarttime() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void MarketData::clear_complexeventstarttime() {
  complexeventstarttime_ = GOOGLE_LONGLONG(0);
  clear_has_complexeventstarttime();
}
inline ::google::protobuf::int64 MarketData::complexeventstarttime() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ComplexEventStartTime)
  return complexeventstarttime_;
}
inline void MarketData::set_complexeventstarttime(::google::protobuf::int64 value) {
  set_has_complexeventstarttime();
  complexeventstarttime_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ComplexEventStartTime)
}

// optional int64 ComplexEventEndTime = 41;
inline bool MarketData::has_complexeventendtime() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void MarketData::set_has_complexeventendtime() {
  _has_bits_[1] |= 0x00000100u;
}
inline void MarketData::clear_has_complexeventendtime() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void MarketData::clear_complexeventendtime() {
  complexeventendtime_ = GOOGLE_LONGLONG(0);
  clear_has_complexeventendtime();
}
inline ::google::protobuf::int64 MarketData::complexeventendtime() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ComplexEventEndTime)
  return complexeventendtime_;
}
inline void MarketData::set_complexeventendtime(::google::protobuf::int64 value) {
  set_has_complexeventendtime();
  complexeventendtime_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ComplexEventEndTime)
}

// optional int32 ExchangeDate = 42;
inline bool MarketData::has_exchangedate() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void MarketData::set_has_exchangedate() {
  _has_bits_[1] |= 0x00000200u;
}
inline void MarketData::clear_has_exchangedate() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void MarketData::clear_exchangedate() {
  exchangedate_ = 0;
  clear_has_exchangedate();
}
inline ::google::protobuf::int32 MarketData::exchangedate() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ExchangeDate)
  return exchangedate_;
}
inline void MarketData::set_exchangedate(::google::protobuf::int32 value) {
  set_has_exchangedate();
  exchangedate_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ExchangeDate)
}

// optional int32 ExchangeTime = 43;
inline bool MarketData::has_exchangetime() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void MarketData::set_has_exchangetime() {
  _has_bits_[1] |= 0x00000400u;
}
inline void MarketData::clear_has_exchangetime() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void MarketData::clear_exchangetime() {
  exchangetime_ = 0;
  clear_has_exchangetime();
}
inline ::google::protobuf::int32 MarketData::exchangetime() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ExchangeTime)
  return exchangetime_;
}
inline void MarketData::set_exchangetime(::google::protobuf::int32 value) {
  set_has_exchangetime();
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ExchangeTime)
}

// optional int64 AfterHoursNumTrades = 44;
inline bool MarketData::has_afterhoursnumtrades() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void MarketData::set_has_afterhoursnumtrades() {
  _has_bits_[1] |= 0x00000800u;
}
inline void MarketData::clear_has_afterhoursnumtrades() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void MarketData::clear_afterhoursnumtrades() {
  afterhoursnumtrades_ = GOOGLE_LONGLONG(0);
  clear_has_afterhoursnumtrades();
}
inline ::google::protobuf::int64 MarketData::afterhoursnumtrades() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.AfterHoursNumTrades)
  return afterhoursnumtrades_;
}
inline void MarketData::set_afterhoursnumtrades(::google::protobuf::int64 value) {
  set_has_afterhoursnumtrades();
  afterhoursnumtrades_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.AfterHoursNumTrades)
}

// optional int64 AfterHoursTotalVolumeTrade = 45;
inline bool MarketData::has_afterhourstotalvolumetrade() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void MarketData::set_has_afterhourstotalvolumetrade() {
  _has_bits_[1] |= 0x00001000u;
}
inline void MarketData::clear_has_afterhourstotalvolumetrade() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void MarketData::clear_afterhourstotalvolumetrade() {
  afterhourstotalvolumetrade_ = GOOGLE_LONGLONG(0);
  clear_has_afterhourstotalvolumetrade();
}
inline ::google::protobuf::int64 MarketData::afterhourstotalvolumetrade() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.AfterHoursTotalVolumeTrade)
  return afterhourstotalvolumetrade_;
}
inline void MarketData::set_afterhourstotalvolumetrade(::google::protobuf::int64 value) {
  set_has_afterhourstotalvolumetrade();
  afterhourstotalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.AfterHoursTotalVolumeTrade)
}

// optional int64 AfterHoursTotalValueTrade = 46;
inline bool MarketData::has_afterhourstotalvaluetrade() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void MarketData::set_has_afterhourstotalvaluetrade() {
  _has_bits_[1] |= 0x00002000u;
}
inline void MarketData::clear_has_afterhourstotalvaluetrade() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void MarketData::clear_afterhourstotalvaluetrade() {
  afterhourstotalvaluetrade_ = GOOGLE_LONGLONG(0);
  clear_has_afterhourstotalvaluetrade();
}
inline ::google::protobuf::int64 MarketData::afterhourstotalvaluetrade() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.AfterHoursTotalValueTrade)
  return afterhourstotalvaluetrade_;
}
inline void MarketData::set_afterhourstotalvaluetrade(::google::protobuf::int64 value) {
  set_has_afterhourstotalvaluetrade();
  afterhourstotalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.AfterHoursTotalValueTrade)
}

// optional int32 ChannelNo = 47;
inline bool MarketData::has_channelno() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void MarketData::set_has_channelno() {
  _has_bits_[1] |= 0x00004000u;
}
inline void MarketData::clear_has_channelno() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void MarketData::clear_channelno() {
  channelno_ = 0;
  clear_has_channelno();
}
inline ::google::protobuf::int32 MarketData::channelno() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ChannelNo)
  return channelno_;
}
inline void MarketData::set_channelno(::google::protobuf::int32 value) {
  set_has_channelno();
  channelno_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ChannelNo)
}

// repeated int64 BuyPriceQueue = 48;
inline int MarketData::buypricequeue_size() const {
  return buypricequeue_.size();
}
inline void MarketData::clear_buypricequeue() {
  buypricequeue_.Clear();
}
inline ::google::protobuf::int64 MarketData::buypricequeue(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BuyPriceQueue)
  return buypricequeue_.Get(index);
}
inline void MarketData::set_buypricequeue(int index, ::google::protobuf::int64 value) {
  buypricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.BuyPriceQueue)
}
inline void MarketData::add_buypricequeue(::google::protobuf::int64 value) {
  buypricequeue_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.BuyPriceQueue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarketData::buypricequeue() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.BuyPriceQueue)
  return buypricequeue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarketData::mutable_buypricequeue() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.BuyPriceQueue)
  return &buypricequeue_;
}

// repeated int64 BuyOrderQtyQueue = 49;
inline int MarketData::buyorderqtyqueue_size() const {
  return buyorderqtyqueue_.size();
}
inline void MarketData::clear_buyorderqtyqueue() {
  buyorderqtyqueue_.Clear();
}
inline ::google::protobuf::int64 MarketData::buyorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BuyOrderQtyQueue)
  return buyorderqtyqueue_.Get(index);
}
inline void MarketData::set_buyorderqtyqueue(int index, ::google::protobuf::int64 value) {
  buyorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.BuyOrderQtyQueue)
}
inline void MarketData::add_buyorderqtyqueue(::google::protobuf::int64 value) {
  buyorderqtyqueue_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.BuyOrderQtyQueue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarketData::buyorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.BuyOrderQtyQueue)
  return buyorderqtyqueue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarketData::mutable_buyorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.BuyOrderQtyQueue)
  return &buyorderqtyqueue_;
}

// repeated int64 SellPriceQueue = 50;
inline int MarketData::sellpricequeue_size() const {
  return sellpricequeue_.size();
}
inline void MarketData::clear_sellpricequeue() {
  sellpricequeue_.Clear();
}
inline ::google::protobuf::int64 MarketData::sellpricequeue(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.SellPriceQueue)
  return sellpricequeue_.Get(index);
}
inline void MarketData::set_sellpricequeue(int index, ::google::protobuf::int64 value) {
  sellpricequeue_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.SellPriceQueue)
}
inline void MarketData::add_sellpricequeue(::google::protobuf::int64 value) {
  sellpricequeue_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.SellPriceQueue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarketData::sellpricequeue() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.SellPriceQueue)
  return sellpricequeue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarketData::mutable_sellpricequeue() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.SellPriceQueue)
  return &sellpricequeue_;
}

// repeated int64 SellOrderQtyQueue = 51;
inline int MarketData::sellorderqtyqueue_size() const {
  return sellorderqtyqueue_.size();
}
inline void MarketData::clear_sellorderqtyqueue() {
  sellorderqtyqueue_.Clear();
}
inline ::google::protobuf::int64 MarketData::sellorderqtyqueue(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.SellOrderQtyQueue)
  return sellorderqtyqueue_.Get(index);
}
inline void MarketData::set_sellorderqtyqueue(int index, ::google::protobuf::int64 value) {
  sellorderqtyqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.SellOrderQtyQueue)
}
inline void MarketData::add_sellorderqtyqueue(::google::protobuf::int64 value) {
  sellorderqtyqueue_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.SellOrderQtyQueue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarketData::sellorderqtyqueue() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.SellOrderQtyQueue)
  return sellorderqtyqueue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarketData::mutable_sellorderqtyqueue() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.SellOrderQtyQueue)
  return &sellorderqtyqueue_;
}

// repeated int64 BuyOrderQueue = 52;
inline int MarketData::buyorderqueue_size() const {
  return buyorderqueue_.size();
}
inline void MarketData::clear_buyorderqueue() {
  buyorderqueue_.Clear();
}
inline ::google::protobuf::int64 MarketData::buyorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BuyOrderQueue)
  return buyorderqueue_.Get(index);
}
inline void MarketData::set_buyorderqueue(int index, ::google::protobuf::int64 value) {
  buyorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.BuyOrderQueue)
}
inline void MarketData::add_buyorderqueue(::google::protobuf::int64 value) {
  buyorderqueue_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.BuyOrderQueue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarketData::buyorderqueue() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.BuyOrderQueue)
  return buyorderqueue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarketData::mutable_buyorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.BuyOrderQueue)
  return &buyorderqueue_;
}

// repeated int64 SellOrderQueue = 53;
inline int MarketData::sellorderqueue_size() const {
  return sellorderqueue_.size();
}
inline void MarketData::clear_sellorderqueue() {
  sellorderqueue_.Clear();
}
inline ::google::protobuf::int64 MarketData::sellorderqueue(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.SellOrderQueue)
  return sellorderqueue_.Get(index);
}
inline void MarketData::set_sellorderqueue(int index, ::google::protobuf::int64 value) {
  sellorderqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.SellOrderQueue)
}
inline void MarketData::add_sellorderqueue(::google::protobuf::int64 value) {
  sellorderqueue_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.SellOrderQueue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarketData::sellorderqueue() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.SellOrderQueue)
  return sellorderqueue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarketData::mutable_sellorderqueue() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.SellOrderQueue)
  return &sellorderqueue_;
}

// repeated int64 BuyNumOrdersQueue = 54;
inline int MarketData::buynumordersqueue_size() const {
  return buynumordersqueue_.size();
}
inline void MarketData::clear_buynumordersqueue() {
  buynumordersqueue_.Clear();
}
inline ::google::protobuf::int64 MarketData::buynumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BuyNumOrdersQueue)
  return buynumordersqueue_.Get(index);
}
inline void MarketData::set_buynumordersqueue(int index, ::google::protobuf::int64 value) {
  buynumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.BuyNumOrdersQueue)
}
inline void MarketData::add_buynumordersqueue(::google::protobuf::int64 value) {
  buynumordersqueue_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.BuyNumOrdersQueue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarketData::buynumordersqueue() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.BuyNumOrdersQueue)
  return buynumordersqueue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarketData::mutable_buynumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.BuyNumOrdersQueue)
  return &buynumordersqueue_;
}

// repeated int64 SellNumOrdersQueue = 55;
inline int MarketData::sellnumordersqueue_size() const {
  return sellnumordersqueue_.size();
}
inline void MarketData::clear_sellnumordersqueue() {
  sellnumordersqueue_.Clear();
}
inline ::google::protobuf::int64 MarketData::sellnumordersqueue(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.SellNumOrdersQueue)
  return sellnumordersqueue_.Get(index);
}
inline void MarketData::set_sellnumordersqueue(int index, ::google::protobuf::int64 value) {
  sellnumordersqueue_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.SellNumOrdersQueue)
}
inline void MarketData::add_sellnumordersqueue(::google::protobuf::int64 value) {
  sellnumordersqueue_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.SellNumOrdersQueue)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarketData::sellnumordersqueue() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.SellNumOrdersQueue)
  return sellnumordersqueue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarketData::mutable_sellnumordersqueue() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.SellNumOrdersQueue)
  return &sellnumordersqueue_;
}

inline const MarketData* MarketData::internal_default_instance() {
  return &MarketData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_marketData_2eproto__INCLUDED
