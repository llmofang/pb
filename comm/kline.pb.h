// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kline.proto

#ifndef PROTOBUF_kline_2eproto__INCLUDED
#define PROTOBUF_kline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_kline_2eproto();
void protobuf_InitDefaults_kline_2eproto();
void protobuf_AssignDesc_kline_2eproto();
void protobuf_ShutdownFile_kline_2eproto();

class KLineData;

// ===================================================================

class KLineData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comm.KLineData) */ {
 public:
  KLineData();
  virtual ~KLineData();

  KLineData(const KLineData& from);

  inline KLineData& operator=(const KLineData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KLineData& default_instance();

  static const KLineData* internal_default_instance();

  void Swap(KLineData* other);

  // implements Message ----------------------------------------------

  inline KLineData* New() const { return New(NULL); }

  KLineData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KLineData& from);
  void MergeFrom(const KLineData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KLineData* other);
  void UnsafeMergeFrom(const KLineData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 Date = 2;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 2;
  ::google::protobuf::int32 date() const;
  void set_date(::google::protobuf::int32 value);

  // required int32 Time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // required int64 Timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional int32 Period = 5;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 5;
  ::google::protobuf::int32 period() const;
  void set_period(::google::protobuf::int32 value);

  // required int64 Open = 6;
  bool has_open() const;
  void clear_open();
  static const int kOpenFieldNumber = 6;
  ::google::protobuf::int64 open() const;
  void set_open(::google::protobuf::int64 value);

  // required int64 Close = 7;
  bool has_close() const;
  void clear_close();
  static const int kCloseFieldNumber = 7;
  ::google::protobuf::int64 close() const;
  void set_close(::google::protobuf::int64 value);

  // required int64 High = 8;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 8;
  ::google::protobuf::int64 high() const;
  void set_high(::google::protobuf::int64 value);

  // required int64 Low = 9;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 9;
  ::google::protobuf::int64 low() const;
  void set_low(::google::protobuf::int64 value);

  // required int64 NumTrades = 10;
  bool has_numtrades() const;
  void clear_numtrades();
  static const int kNumTradesFieldNumber = 10;
  ::google::protobuf::int64 numtrades() const;
  void set_numtrades(::google::protobuf::int64 value);

  // required int64 TotalVolumeTrade = 11;
  bool has_totalvolumetrade() const;
  void clear_totalvolumetrade();
  static const int kTotalVolumeTradeFieldNumber = 11;
  ::google::protobuf::int64 totalvolumetrade() const;
  void set_totalvolumetrade(::google::protobuf::int64 value);

  // required int64 TotalValueTrade = 12;
  bool has_totalvaluetrade() const;
  void clear_totalvaluetrade();
  static const int kTotalValueTradeFieldNumber = 12;
  ::google::protobuf::int64 totalvaluetrade() const;
  void set_totalvaluetrade(::google::protobuf::int64 value);

  // optional int64 IOPV = 13;
  bool has_iopv() const;
  void clear_iopv();
  static const int kIOPVFieldNumber = 13;
  ::google::protobuf::int64 iopv() const;
  void set_iopv(::google::protobuf::int64 value);

  // optional int64 OpenInterest = 14;
  bool has_openinterest() const;
  void clear_openinterest();
  static const int kOpenInterestFieldNumber = 14;
  ::google::protobuf::int64 openinterest() const;
  void set_openinterest(::google::protobuf::int64 value);

  // optional int64 SettlePrice = 15;
  bool has_settleprice() const;
  void clear_settleprice();
  static const int kSettlePriceFieldNumber = 15;
  ::google::protobuf::int64 settleprice() const;
  void set_settleprice(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:comm.KLineData)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_period();
  inline void clear_has_period();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_numtrades();
  inline void clear_has_numtrades();
  inline void set_has_totalvolumetrade();
  inline void clear_has_totalvolumetrade();
  inline void set_has_totalvaluetrade();
  inline void clear_has_totalvaluetrade();
  inline void set_has_iopv();
  inline void clear_has_iopv();
  inline void set_has_openinterest();
  inline void clear_has_openinterest();
  inline void set_has_settleprice();
  inline void clear_has_settleprice();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 open_;
  ::google::protobuf::int64 close_;
  ::google::protobuf::int64 high_;
  ::google::protobuf::int64 low_;
  ::google::protobuf::int64 numtrades_;
  ::google::protobuf::int64 totalvolumetrade_;
  ::google::protobuf::int64 totalvaluetrade_;
  ::google::protobuf::int64 iopv_;
  ::google::protobuf::int64 openinterest_;
  ::google::protobuf::int64 settleprice_;
  ::google::protobuf::int32 period_;
  friend void  protobuf_InitDefaults_kline_2eproto_impl();
  friend void  protobuf_AddDesc_kline_2eproto_impl();
  friend void protobuf_AssignDesc_kline_2eproto();
  friend void protobuf_ShutdownFile_kline_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<KLineData> KLineData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KLineData

// required string Code = 1;
inline bool KLineData::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KLineData::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KLineData::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KLineData::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& KLineData::code() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KLineData::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.KLineData.Code)
}
inline void KLineData::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.KLineData.Code)
}
inline void KLineData::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.KLineData.Code)
}
inline ::std::string* KLineData::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:comm.KLineData.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KLineData::release_code() {
  // @@protoc_insertion_point(field_release:comm.KLineData.Code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KLineData::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:comm.KLineData.Code)
}

// required int32 Date = 2;
inline bool KLineData::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KLineData::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KLineData::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KLineData::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 KLineData::date() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Date)
  return date_;
}
inline void KLineData::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Date)
}

// required int32 Time = 3;
inline bool KLineData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KLineData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KLineData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KLineData::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 KLineData::time() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Time)
  return time_;
}
inline void KLineData::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Time)
}

// required int64 Timestamp = 4;
inline bool KLineData::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KLineData::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KLineData::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KLineData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 KLineData::timestamp() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Timestamp)
  return timestamp_;
}
inline void KLineData::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Timestamp)
}

// optional int32 Period = 5;
inline bool KLineData::has_period() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KLineData::set_has_period() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KLineData::clear_has_period() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KLineData::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline ::google::protobuf::int32 KLineData::period() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Period)
  return period_;
}
inline void KLineData::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Period)
}

// required int64 Open = 6;
inline bool KLineData::has_open() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KLineData::set_has_open() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KLineData::clear_has_open() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KLineData::clear_open() {
  open_ = GOOGLE_LONGLONG(0);
  clear_has_open();
}
inline ::google::protobuf::int64 KLineData::open() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Open)
  return open_;
}
inline void KLineData::set_open(::google::protobuf::int64 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Open)
}

// required int64 Close = 7;
inline bool KLineData::has_close() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KLineData::set_has_close() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KLineData::clear_has_close() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KLineData::clear_close() {
  close_ = GOOGLE_LONGLONG(0);
  clear_has_close();
}
inline ::google::protobuf::int64 KLineData::close() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Close)
  return close_;
}
inline void KLineData::set_close(::google::protobuf::int64 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Close)
}

// required int64 High = 8;
inline bool KLineData::has_high() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KLineData::set_has_high() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KLineData::clear_has_high() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KLineData::clear_high() {
  high_ = GOOGLE_LONGLONG(0);
  clear_has_high();
}
inline ::google::protobuf::int64 KLineData::high() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.High)
  return high_;
}
inline void KLineData::set_high(::google::protobuf::int64 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.High)
}

// required int64 Low = 9;
inline bool KLineData::has_low() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KLineData::set_has_low() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KLineData::clear_has_low() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KLineData::clear_low() {
  low_ = GOOGLE_LONGLONG(0);
  clear_has_low();
}
inline ::google::protobuf::int64 KLineData::low() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.Low)
  return low_;
}
inline void KLineData::set_low(::google::protobuf::int64 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.Low)
}

// required int64 NumTrades = 10;
inline bool KLineData::has_numtrades() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KLineData::set_has_numtrades() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KLineData::clear_has_numtrades() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KLineData::clear_numtrades() {
  numtrades_ = GOOGLE_LONGLONG(0);
  clear_has_numtrades();
}
inline ::google::protobuf::int64 KLineData::numtrades() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.NumTrades)
  return numtrades_;
}
inline void KLineData::set_numtrades(::google::protobuf::int64 value) {
  set_has_numtrades();
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.NumTrades)
}

// required int64 TotalVolumeTrade = 11;
inline bool KLineData::has_totalvolumetrade() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void KLineData::set_has_totalvolumetrade() {
  _has_bits_[0] |= 0x00000400u;
}
inline void KLineData::clear_has_totalvolumetrade() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void KLineData::clear_totalvolumetrade() {
  totalvolumetrade_ = GOOGLE_LONGLONG(0);
  clear_has_totalvolumetrade();
}
inline ::google::protobuf::int64 KLineData::totalvolumetrade() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.TotalVolumeTrade)
  return totalvolumetrade_;
}
inline void KLineData::set_totalvolumetrade(::google::protobuf::int64 value) {
  set_has_totalvolumetrade();
  totalvolumetrade_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.TotalVolumeTrade)
}

// required int64 TotalValueTrade = 12;
inline bool KLineData::has_totalvaluetrade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void KLineData::set_has_totalvaluetrade() {
  _has_bits_[0] |= 0x00000800u;
}
inline void KLineData::clear_has_totalvaluetrade() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void KLineData::clear_totalvaluetrade() {
  totalvaluetrade_ = GOOGLE_LONGLONG(0);
  clear_has_totalvaluetrade();
}
inline ::google::protobuf::int64 KLineData::totalvaluetrade() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.TotalValueTrade)
  return totalvaluetrade_;
}
inline void KLineData::set_totalvaluetrade(::google::protobuf::int64 value) {
  set_has_totalvaluetrade();
  totalvaluetrade_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.TotalValueTrade)
}

// optional int64 IOPV = 13;
inline bool KLineData::has_iopv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void KLineData::set_has_iopv() {
  _has_bits_[0] |= 0x00001000u;
}
inline void KLineData::clear_has_iopv() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void KLineData::clear_iopv() {
  iopv_ = GOOGLE_LONGLONG(0);
  clear_has_iopv();
}
inline ::google::protobuf::int64 KLineData::iopv() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.IOPV)
  return iopv_;
}
inline void KLineData::set_iopv(::google::protobuf::int64 value) {
  set_has_iopv();
  iopv_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.IOPV)
}

// optional int64 OpenInterest = 14;
inline bool KLineData::has_openinterest() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void KLineData::set_has_openinterest() {
  _has_bits_[0] |= 0x00002000u;
}
inline void KLineData::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void KLineData::clear_openinterest() {
  openinterest_ = GOOGLE_LONGLONG(0);
  clear_has_openinterest();
}
inline ::google::protobuf::int64 KLineData::openinterest() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.OpenInterest)
  return openinterest_;
}
inline void KLineData::set_openinterest(::google::protobuf::int64 value) {
  set_has_openinterest();
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.OpenInterest)
}

// optional int64 SettlePrice = 15;
inline bool KLineData::has_settleprice() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void KLineData::set_has_settleprice() {
  _has_bits_[0] |= 0x00004000u;
}
inline void KLineData::clear_has_settleprice() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void KLineData::clear_settleprice() {
  settleprice_ = GOOGLE_LONGLONG(0);
  clear_has_settleprice();
}
inline ::google::protobuf::int64 KLineData::settleprice() const {
  // @@protoc_insertion_point(field_get:comm.KLineData.SettlePrice)
  return settleprice_;
}
inline void KLineData::set_settleprice(::google::protobuf::int64 value) {
  set_has_settleprice();
  settleprice_ = value;
  // @@protoc_insertion_point(field_set:comm.KLineData.SettlePrice)
}

inline const KLineData* KLineData::internal_default_instance() {
  return &KLineData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_kline_2eproto__INCLUDED
