// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "marketData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* MarketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_marketData_2eproto() {
  protobuf_AddDesc_marketData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "marketData.proto");
  GOOGLE_CHECK(file != NULL);
  MarketData_descriptor_ = file->message_type(0);
  static const int MarketData_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, windcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, actionday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, askvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, bidvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, numtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, totalbidvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, totalaskvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, weighteavgbidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, weighteavgaskprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, iopv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, yieldtomaturity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, highlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, lowlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, syl1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, syl2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, sd2_),
  };
  MarketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketData_descriptor_,
      MarketData::default_instance_,
      MarketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_marketData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketData_descriptor_, &MarketData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_marketData_2eproto() {
  delete MarketData::default_instance_;
  delete MarketData_reflection_;
}

void protobuf_AddDesc_marketData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020marketData.proto\022\004comm\"\237\004\n\nMarketData\022"
    "\020\n\010WindCode\030\001 \002(\t\022\014\n\004Code\030\002 \002(\t\022\021\n\tActio"
    "nDay\030\003 \002(\005\022\022\n\nTradingDay\030\004 \002(\005\022\014\n\004Time\030\005"
    " \002(\005\022\016\n\006Status\030\006 \002(\005\022\020\n\010PreClose\030\007 \002(\r\022\014"
    "\n\004Open\030\010 \002(\r\022\014\n\004High\030\t \002(\r\022\013\n\003Low\030\n \002(\r\022"
    "\r\n\005Match\030\013 \002(\r\022\020\n\010AskPrice\030\014 \003(\r\022\016\n\006AskV"
    "ol\030\r \003(\r\022\020\n\010BidPrice\030\016 \003(\r\022\016\n\006BidVol\030\017 \003"
    "(\r\022\021\n\tNumTrades\030\020 \002(\r\022\016\n\006Volume\030\021 \002(\003\022\020\n"
    "\010Turnover\030\022 \002(\003\022\023\n\013TotalBidVol\030\023 \002(\003\022\023\n\013"
    "TotalAskVol\030\024 \002(\003\022\032\n\022WeighteAvgBidPrice\030"
    "\025 \002(\r\022\032\n\022WeighteAvgAskPrice\030\026 \002(\r\022\014\n\004IOP"
    "V\030\027 \002(\005\022\027\n\017YieldToMaturity\030\030 \002(\005\022\023\n\013High"
    "Limited\030\031 \002(\r\022\022\n\nLowLimited\030\032 \002(\r\022\016\n\006Pre"
    "fix\030\033 \002(\t\022\014\n\004Syl1\030\034 \002(\005\022\014\n\004Syl2\030\035 \002(\005\022\013\n"
    "\003SD2\030\036 \002(\005", 570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marketData.proto", &protobuf_RegisterTypes);
  MarketData::default_instance_ = new MarketData();
  MarketData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marketData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_marketData_2eproto {
  StaticDescriptorInitializer_marketData_2eproto() {
    protobuf_AddDesc_marketData_2eproto();
  }
} static_descriptor_initializer_marketData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MarketData::kWindCodeFieldNumber;
const int MarketData::kCodeFieldNumber;
const int MarketData::kActionDayFieldNumber;
const int MarketData::kTradingDayFieldNumber;
const int MarketData::kTimeFieldNumber;
const int MarketData::kStatusFieldNumber;
const int MarketData::kPreCloseFieldNumber;
const int MarketData::kOpenFieldNumber;
const int MarketData::kHighFieldNumber;
const int MarketData::kLowFieldNumber;
const int MarketData::kMatchFieldNumber;
const int MarketData::kAskPriceFieldNumber;
const int MarketData::kAskVolFieldNumber;
const int MarketData::kBidPriceFieldNumber;
const int MarketData::kBidVolFieldNumber;
const int MarketData::kNumTradesFieldNumber;
const int MarketData::kVolumeFieldNumber;
const int MarketData::kTurnoverFieldNumber;
const int MarketData::kTotalBidVolFieldNumber;
const int MarketData::kTotalAskVolFieldNumber;
const int MarketData::kWeighteAvgBidPriceFieldNumber;
const int MarketData::kWeighteAvgAskPriceFieldNumber;
const int MarketData::kIOPVFieldNumber;
const int MarketData::kYieldToMaturityFieldNumber;
const int MarketData::kHighLimitedFieldNumber;
const int MarketData::kLowLimitedFieldNumber;
const int MarketData::kPrefixFieldNumber;
const int MarketData::kSyl1FieldNumber;
const int MarketData::kSyl2FieldNumber;
const int MarketData::kSD2FieldNumber;
#endif  // !_MSC_VER

MarketData::MarketData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.MarketData)
}

void MarketData::InitAsDefaultInstance() {
}

MarketData::MarketData(const MarketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.MarketData)
}

void MarketData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  windcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actionday_ = 0;
  tradingday_ = 0;
  time_ = 0;
  status_ = 0;
  preclose_ = 0u;
  open_ = 0u;
  high_ = 0u;
  low_ = 0u;
  match_ = 0u;
  numtrades_ = 0u;
  volume_ = GOOGLE_LONGLONG(0);
  turnover_ = GOOGLE_LONGLONG(0);
  totalbidvol_ = GOOGLE_LONGLONG(0);
  totalaskvol_ = GOOGLE_LONGLONG(0);
  weighteavgbidprice_ = 0u;
  weighteavgaskprice_ = 0u;
  iopv_ = 0;
  yieldtomaturity_ = 0;
  highlimited_ = 0u;
  lowlimited_ = 0u;
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  syl1_ = 0;
  syl2_ = 0;
  sd2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketData::~MarketData() {
  // @@protoc_insertion_point(destructor:comm.MarketData)
  SharedDtor();
}

void MarketData::SharedDtor() {
  if (windcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete windcode_;
  }
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefix_;
  }
  if (this != default_instance_) {
  }
}

void MarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketData_descriptor_;
}

const MarketData& MarketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marketData_2eproto();
  return *default_instance_;
}

MarketData* MarketData::default_instance_ = NULL;

MarketData* MarketData::New() const {
  return new MarketData;
}

void MarketData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarketData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(actionday_, open_);
    if (has_windcode()) {
      if (windcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        windcode_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        code_->clear();
      }
    }
  }
  ZR_(high_, low_);
  ZR_(match_, numtrades_);
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(volume_, yieldtomaturity_);
  }
  if (_has_bits_[24 / 32] & 1056964608) {
    ZR_(highlimited_, lowlimited_);
    ZR_(syl1_, sd2_);
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        prefix_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  askprice_.Clear();
  askvol_.Clear();
  bidprice_.Clear();
  bidvol_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.MarketData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string WindCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->windcode().data(), this->windcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "windcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (tag == 18) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ActionDay;
        break;
      }

      // required int32 ActionDay = 3;
      case 3: {
        if (tag == 24) {
         parse_ActionDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionday_)));
          set_has_actionday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TradingDay;
        break;
      }

      // required int32 TradingDay = 4;
      case 4: {
        if (tag == 32) {
         parse_TradingDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Time;
        break;
      }

      // required int32 Time = 5;
      case 5: {
        if (tag == 40) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Status;
        break;
      }

      // required int32 Status = 6;
      case 6: {
        if (tag == 48) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PreClose;
        break;
      }

      // required uint32 PreClose = 7;
      case 7: {
        if (tag == 56) {
         parse_PreClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preclose_)));
          set_has_preclose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Open;
        break;
      }

      // required uint32 Open = 8;
      case 8: {
        if (tag == 64) {
         parse_Open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_High;
        break;
      }

      // required uint32 High = 9;
      case 9: {
        if (tag == 72) {
         parse_High:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Low;
        break;
      }

      // required uint32 Low = 10;
      case 10: {
        if (tag == 80) {
         parse_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Match;
        break;
      }

      // required uint32 Match = 11;
      case 11: {
        if (tag == 88) {
         parse_Match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_)));
          set_has_match();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AskPrice;
        break;
      }

      // repeated uint32 AskPrice = 12;
      case 12: {
        if (tag == 96) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_askprice())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AskPrice;
        if (input->ExpectTag(104)) goto parse_AskVol;
        break;
      }

      // repeated uint32 AskVol = 13;
      case 13: {
        if (tag == 104) {
         parse_AskVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_askvol())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_AskVol;
        if (input->ExpectTag(112)) goto parse_BidPrice;
        break;
      }

      // repeated uint32 BidPrice = 14;
      case 14: {
        if (tag == 112) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_bidprice())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_BidPrice;
        if (input->ExpectTag(120)) goto parse_BidVol;
        break;
      }

      // repeated uint32 BidVol = 15;
      case 15: {
        if (tag == 120) {
         parse_BidVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_bidvol())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_BidVol;
        if (input->ExpectTag(128)) goto parse_NumTrades;
        break;
      }

      // required uint32 NumTrades = 16;
      case 16: {
        if (tag == 128) {
         parse_NumTrades:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtrades_)));
          set_has_numtrades();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Volume;
        break;
      }

      // required int64 Volume = 17;
      case 17: {
        if (tag == 136) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_Turnover;
        break;
      }

      // required int64 Turnover = 18;
      case 18: {
        if (tag == 144) {
         parse_Turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_TotalBidVol;
        break;
      }

      // required int64 TotalBidVol = 19;
      case 19: {
        if (tag == 152) {
         parse_TotalBidVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalbidvol_)));
          set_has_totalbidvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_TotalAskVol;
        break;
      }

      // required int64 TotalAskVol = 20;
      case 20: {
        if (tag == 160) {
         parse_TotalAskVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalaskvol_)));
          set_has_totalaskvol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_WeighteAvgBidPrice;
        break;
      }

      // required uint32 WeighteAvgBidPrice = 21;
      case 21: {
        if (tag == 168) {
         parse_WeighteAvgBidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weighteavgbidprice_)));
          set_has_weighteavgbidprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_WeighteAvgAskPrice;
        break;
      }

      // required uint32 WeighteAvgAskPrice = 22;
      case 22: {
        if (tag == 176) {
         parse_WeighteAvgAskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weighteavgaskprice_)));
          set_has_weighteavgaskprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_IOPV;
        break;
      }

      // required int32 IOPV = 23;
      case 23: {
        if (tag == 184) {
         parse_IOPV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iopv_)));
          set_has_iopv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_YieldToMaturity;
        break;
      }

      // required int32 YieldToMaturity = 24;
      case 24: {
        if (tag == 192) {
         parse_YieldToMaturity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yieldtomaturity_)));
          set_has_yieldtomaturity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_HighLimited;
        break;
      }

      // required uint32 HighLimited = 25;
      case 25: {
        if (tag == 200) {
         parse_HighLimited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlimited_)));
          set_has_highlimited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_LowLimited;
        break;
      }

      // required uint32 LowLimited = 26;
      case 26: {
        if (tag == 208) {
         parse_LowLimited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlimited_)));
          set_has_lowlimited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_Prefix;
        break;
      }

      // required string Prefix = 27;
      case 27: {
        if (tag == 218) {
         parse_Prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_Syl1;
        break;
      }

      // required int32 Syl1 = 28;
      case 28: {
        if (tag == 224) {
         parse_Syl1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &syl1_)));
          set_has_syl1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_Syl2;
        break;
      }

      // required int32 Syl2 = 29;
      case 29: {
        if (tag == 232) {
         parse_Syl2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &syl2_)));
          set_has_syl2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_SD2;
        break;
      }

      // required int32 SD2 = 30;
      case 30: {
        if (tag == 240) {
         parse_SD2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sd2_)));
          set_has_sd2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.MarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.MarketData)
  return false;
#undef DO_
}

void MarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.MarketData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "windcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->windcode(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionday(), output);
  }

  // required int32 TradingDay = 4;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tradingday(), output);
  }

  // required int32 Time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // required int32 Status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // required uint32 PreClose = 7;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->preclose(), output);
  }

  // required uint32 Open = 8;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->open(), output);
  }

  // required uint32 High = 9;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->high(), output);
  }

  // required uint32 Low = 10;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->low(), output);
  }

  // required uint32 Match = 11;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->match(), output);
  }

  // repeated uint32 AskPrice = 12;
  for (int i = 0; i < this->askprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->askprice(i), output);
  }

  // repeated uint32 AskVol = 13;
  for (int i = 0; i < this->askvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->askvol(i), output);
  }

  // repeated uint32 BidPrice = 14;
  for (int i = 0; i < this->bidprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->bidprice(i), output);
  }

  // repeated uint32 BidVol = 15;
  for (int i = 0; i < this->bidvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->bidvol(i), output);
  }

  // required uint32 NumTrades = 16;
  if (has_numtrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->numtrades(), output);
  }

  // required int64 Volume = 17;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->volume(), output);
  }

  // required int64 Turnover = 18;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->turnover(), output);
  }

  // required int64 TotalBidVol = 19;
  if (has_totalbidvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->totalbidvol(), output);
  }

  // required int64 TotalAskVol = 20;
  if (has_totalaskvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->totalaskvol(), output);
  }

  // required uint32 WeighteAvgBidPrice = 21;
  if (has_weighteavgbidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->weighteavgbidprice(), output);
  }

  // required uint32 WeighteAvgAskPrice = 22;
  if (has_weighteavgaskprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->weighteavgaskprice(), output);
  }

  // required int32 IOPV = 23;
  if (has_iopv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->iopv(), output);
  }

  // required int32 YieldToMaturity = 24;
  if (has_yieldtomaturity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->yieldtomaturity(), output);
  }

  // required uint32 HighLimited = 25;
  if (has_highlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->highlimited(), output);
  }

  // required uint32 LowLimited = 26;
  if (has_lowlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->lowlimited(), output);
  }

  // required string Prefix = 27;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->prefix(), output);
  }

  // required int32 Syl1 = 28;
  if (has_syl1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->syl1(), output);
  }

  // required int32 Syl2 = 29;
  if (has_syl2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->syl2(), output);
  }

  // required int32 SD2 = 30;
  if (has_sd2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->sd2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.MarketData)
}

::google::protobuf::uint8* MarketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:comm.MarketData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "windcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->windcode(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionday(), target);
  }

  // required int32 TradingDay = 4;
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tradingday(), target);
  }

  // required int32 Time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // required int32 Status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // required uint32 PreClose = 7;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->preclose(), target);
  }

  // required uint32 Open = 8;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->open(), target);
  }

  // required uint32 High = 9;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->high(), target);
  }

  // required uint32 Low = 10;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->low(), target);
  }

  // required uint32 Match = 11;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->match(), target);
  }

  // repeated uint32 AskPrice = 12;
  for (int i = 0; i < this->askprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->askprice(i), target);
  }

  // repeated uint32 AskVol = 13;
  for (int i = 0; i < this->askvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->askvol(i), target);
  }

  // repeated uint32 BidPrice = 14;
  for (int i = 0; i < this->bidprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->bidprice(i), target);
  }

  // repeated uint32 BidVol = 15;
  for (int i = 0; i < this->bidvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->bidvol(i), target);
  }

  // required uint32 NumTrades = 16;
  if (has_numtrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->numtrades(), target);
  }

  // required int64 Volume = 17;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->volume(), target);
  }

  // required int64 Turnover = 18;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->turnover(), target);
  }

  // required int64 TotalBidVol = 19;
  if (has_totalbidvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->totalbidvol(), target);
  }

  // required int64 TotalAskVol = 20;
  if (has_totalaskvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->totalaskvol(), target);
  }

  // required uint32 WeighteAvgBidPrice = 21;
  if (has_weighteavgbidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->weighteavgbidprice(), target);
  }

  // required uint32 WeighteAvgAskPrice = 22;
  if (has_weighteavgaskprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->weighteavgaskprice(), target);
  }

  // required int32 IOPV = 23;
  if (has_iopv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->iopv(), target);
  }

  // required int32 YieldToMaturity = 24;
  if (has_yieldtomaturity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->yieldtomaturity(), target);
  }

  // required uint32 HighLimited = 25;
  if (has_highlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->highlimited(), target);
  }

  // required uint32 LowLimited = 26;
  if (has_lowlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->lowlimited(), target);
  }

  // required string Prefix = 27;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->prefix(), target);
  }

  // required int32 Syl1 = 28;
  if (has_syl1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->syl1(), target);
  }

  // required int32 Syl2 = 29;
  if (has_syl2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->syl2(), target);
  }

  // required int32 SD2 = 30;
  if (has_sd2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->sd2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.MarketData)
  return target;
}

int MarketData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string WindCode = 1;
    if (has_windcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->windcode());
    }

    // required string Code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // required int32 ActionDay = 3;
    if (has_actionday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionday());
    }

    // required int32 TradingDay = 4;
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradingday());
    }

    // required int32 Time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required int32 Status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required uint32 PreClose = 7;
    if (has_preclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preclose());
    }

    // required uint32 Open = 8;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 High = 9;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high());
    }

    // required uint32 Low = 10;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low());
    }

    // required uint32 Match = 11;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match());
    }

    // required uint32 NumTrades = 16;
    if (has_numtrades()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numtrades());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int64 Volume = 17;
    if (has_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // required int64 Turnover = 18;
    if (has_turnover()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->turnover());
    }

    // required int64 TotalBidVol = 19;
    if (has_totalbidvol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalbidvol());
    }

    // required int64 TotalAskVol = 20;
    if (has_totalaskvol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalaskvol());
    }

    // required uint32 WeighteAvgBidPrice = 21;
    if (has_weighteavgbidprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weighteavgbidprice());
    }

    // required uint32 WeighteAvgAskPrice = 22;
    if (has_weighteavgaskprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weighteavgaskprice());
    }

    // required int32 IOPV = 23;
    if (has_iopv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iopv());
    }

    // required int32 YieldToMaturity = 24;
    if (has_yieldtomaturity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yieldtomaturity());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 HighLimited = 25;
    if (has_highlimited()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highlimited());
    }

    // required uint32 LowLimited = 26;
    if (has_lowlimited()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowlimited());
    }

    // required string Prefix = 27;
    if (has_prefix()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // required int32 Syl1 = 28;
    if (has_syl1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->syl1());
    }

    // required int32 Syl2 = 29;
    if (has_syl2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->syl2());
    }

    // required int32 SD2 = 30;
    if (has_sd2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sd2());
    }

  }
  // repeated uint32 AskPrice = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->askprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askprice(i));
    }
    total_size += 1 * this->askprice_size() + data_size;
  }

  // repeated uint32 AskVol = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->askvol_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askvol(i));
    }
    total_size += 1 * this->askvol_size() + data_size;
  }

  // repeated uint32 BidPrice = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->bidprice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidprice(i));
    }
    total_size += 1 * this->bidprice_size() + data_size;
  }

  // repeated uint32 BidVol = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->bidvol_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidvol(i));
    }
    total_size += 1 * this->bidvol_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketData::MergeFrom(const MarketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  askprice_.MergeFrom(from.askprice_);
  askvol_.MergeFrom(from.askvol_);
  bidprice_.MergeFrom(from.bidprice_);
  bidvol_.MergeFrom(from.bidvol_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_windcode()) {
      set_windcode(from.windcode());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_actionday()) {
      set_actionday(from.actionday());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_match()) {
      set_match(from.match());
    }
    if (from.has_numtrades()) {
      set_numtrades(from.numtrades());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_totalbidvol()) {
      set_totalbidvol(from.totalbidvol());
    }
    if (from.has_totalaskvol()) {
      set_totalaskvol(from.totalaskvol());
    }
    if (from.has_weighteavgbidprice()) {
      set_weighteavgbidprice(from.weighteavgbidprice());
    }
    if (from.has_weighteavgaskprice()) {
      set_weighteavgaskprice(from.weighteavgaskprice());
    }
    if (from.has_iopv()) {
      set_iopv(from.iopv());
    }
    if (from.has_yieldtomaturity()) {
      set_yieldtomaturity(from.yieldtomaturity());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_highlimited()) {
      set_highlimited(from.highlimited());
    }
    if (from.has_lowlimited()) {
      set_lowlimited(from.lowlimited());
    }
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_syl1()) {
      set_syl1(from.syl1());
    }
    if (from.has_syl2()) {
      set_syl2(from.syl2());
    }
    if (from.has_sd2()) {
      set_sd2(from.sd2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketData::CopyFrom(const MarketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketData::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fff87ff) != 0x3fff87ff) return false;

  return true;
}

void MarketData::Swap(MarketData* other) {
  if (other != this) {
    std::swap(windcode_, other->windcode_);
    std::swap(code_, other->code_);
    std::swap(actionday_, other->actionday_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(time_, other->time_);
    std::swap(status_, other->status_);
    std::swap(preclose_, other->preclose_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(match_, other->match_);
    askprice_.Swap(&other->askprice_);
    askvol_.Swap(&other->askvol_);
    bidprice_.Swap(&other->bidprice_);
    bidvol_.Swap(&other->bidvol_);
    std::swap(numtrades_, other->numtrades_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(totalbidvol_, other->totalbidvol_);
    std::swap(totalaskvol_, other->totalaskvol_);
    std::swap(weighteavgbidprice_, other->weighteavgbidprice_);
    std::swap(weighteavgaskprice_, other->weighteavgaskprice_);
    std::swap(iopv_, other->iopv_);
    std::swap(yieldtomaturity_, other->yieldtomaturity_);
    std::swap(highlimited_, other->highlimited_);
    std::swap(lowlimited_, other->lowlimited_);
    std::swap(prefix_, other->prefix_);
    std::swap(syl1_, other->syl1_);
    std::swap(syl2_, other->syl2_);
    std::swap(sd2_, other->sd2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketData_descriptor_;
  metadata.reflection = MarketData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
