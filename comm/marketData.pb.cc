// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marketData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "marketData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace comm {

namespace {

const ::google::protobuf::Descriptor* MarketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_marketData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_marketData_2eproto() {
  protobuf_AddDesc_marketData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "marketData.proto");
  GOOGLE_CHECK(file != NULL);
  MarketData_descriptor_ = file->message_type(0);
  static const int MarketData_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, windcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, actionday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, askvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, bidvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, numtrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, totalbidvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, totalaskvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, weighteavgbidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, weighteavgaskprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, iopv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, yieldtomaturity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, highlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, lowlimited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, syl1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, syl2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, sd2_),
  };
  MarketData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MarketData_descriptor_,
      MarketData::internal_default_instance(),
      MarketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, _has_bits_),
      -1,
      -1,
      sizeof(MarketData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketData, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_marketData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MarketData_descriptor_, MarketData::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_marketData_2eproto() {
  MarketData_default_instance_.Shutdown();
  delete MarketData_reflection_;
}

void protobuf_InitDefaults_marketData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  MarketData_default_instance_.DefaultConstruct();
  MarketData_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_marketData_2eproto_once_);
void protobuf_InitDefaults_marketData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_marketData_2eproto_once_,
                 &protobuf_InitDefaults_marketData_2eproto_impl);
}
void protobuf_AddDesc_marketData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_marketData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020marketData.proto\022\004comm\"\237\004\n\nMarketData\022"
    "\020\n\010WindCode\030\001 \002(\t\022\014\n\004Code\030\002 \002(\t\022\021\n\tActio"
    "nDay\030\003 \002(\005\022\022\n\nTradingDay\030\004 \002(\005\022\014\n\004Time\030\005"
    " \002(\005\022\016\n\006Status\030\006 \002(\005\022\020\n\010PreClose\030\007 \002(\r\022\014"
    "\n\004Open\030\010 \002(\r\022\014\n\004High\030\t \002(\r\022\013\n\003Low\030\n \002(\r\022"
    "\r\n\005Match\030\013 \002(\r\022\020\n\010AskPrice\030\014 \003(\r\022\016\n\006AskV"
    "ol\030\r \003(\r\022\020\n\010BidPrice\030\016 \003(\r\022\016\n\006BidVol\030\017 \003"
    "(\r\022\021\n\tNumTrades\030\020 \002(\r\022\016\n\006Volume\030\021 \002(\003\022\020\n"
    "\010Turnover\030\022 \002(\003\022\023\n\013TotalBidVol\030\023 \002(\003\022\023\n\013"
    "TotalAskVol\030\024 \002(\003\022\032\n\022WeighteAvgBidPrice\030"
    "\025 \002(\r\022\032\n\022WeighteAvgAskPrice\030\026 \002(\r\022\014\n\004IOP"
    "V\030\027 \002(\005\022\027\n\017YieldToMaturity\030\030 \002(\005\022\023\n\013High"
    "Limited\030\031 \002(\r\022\022\n\nLowLimited\030\032 \002(\r\022\016\n\006Pre"
    "fix\030\033 \002(\t\022\014\n\004Syl1\030\034 \002(\005\022\014\n\004Syl2\030\035 \002(\005\022\013\n"
    "\003SD2\030\036 \002(\005", 570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marketData.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marketData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_marketData_2eproto_once_);
void protobuf_AddDesc_marketData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_marketData_2eproto_once_,
                 &protobuf_AddDesc_marketData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_marketData_2eproto {
  StaticDescriptorInitializer_marketData_2eproto() {
    protobuf_AddDesc_marketData_2eproto();
  }
} static_descriptor_initializer_marketData_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketData::kWindCodeFieldNumber;
const int MarketData::kCodeFieldNumber;
const int MarketData::kActionDayFieldNumber;
const int MarketData::kTradingDayFieldNumber;
const int MarketData::kTimeFieldNumber;
const int MarketData::kStatusFieldNumber;
const int MarketData::kPreCloseFieldNumber;
const int MarketData::kOpenFieldNumber;
const int MarketData::kHighFieldNumber;
const int MarketData::kLowFieldNumber;
const int MarketData::kMatchFieldNumber;
const int MarketData::kAskPriceFieldNumber;
const int MarketData::kAskVolFieldNumber;
const int MarketData::kBidPriceFieldNumber;
const int MarketData::kBidVolFieldNumber;
const int MarketData::kNumTradesFieldNumber;
const int MarketData::kVolumeFieldNumber;
const int MarketData::kTurnoverFieldNumber;
const int MarketData::kTotalBidVolFieldNumber;
const int MarketData::kTotalAskVolFieldNumber;
const int MarketData::kWeighteAvgBidPriceFieldNumber;
const int MarketData::kWeighteAvgAskPriceFieldNumber;
const int MarketData::kIOPVFieldNumber;
const int MarketData::kYieldToMaturityFieldNumber;
const int MarketData::kHighLimitedFieldNumber;
const int MarketData::kLowLimitedFieldNumber;
const int MarketData::kPrefixFieldNumber;
const int MarketData::kSyl1FieldNumber;
const int MarketData::kSyl2FieldNumber;
const int MarketData::kSD2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketData::MarketData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_marketData_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:comm.MarketData)
}

void MarketData::InitAsDefaultInstance() {
}

MarketData::MarketData(const MarketData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:comm.MarketData)
}

void MarketData::SharedCtor() {
  _cached_size_ = 0;
  windcode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&actionday_, 0, reinterpret_cast<char*>(&sd2_) -
    reinterpret_cast<char*>(&actionday_) + sizeof(sd2_));
}

MarketData::~MarketData() {
  // @@protoc_insertion_point(destructor:comm.MarketData)
  SharedDtor();
}

void MarketData::SharedDtor() {
  windcode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketData_descriptor_;
}

const MarketData& MarketData::default_instance() {
  protobuf_InitDefaults_marketData_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MarketData> MarketData_default_instance_;

MarketData* MarketData::New(::google::protobuf::Arena* arena) const {
  MarketData* n = new MarketData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:comm.MarketData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MarketData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MarketData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(actionday_, open_);
    if (has_windcode()) {
      windcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_code()) {
      code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(high_, numtrades_);
  ZR_(volume_, yieldtomaturity_);
  if (_has_bits_[24 / 32] & 1056964608u) {
    ZR_(highlimited_, sd2_);
    if (has_prefix()) {
      prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  askprice_.Clear();
  askvol_.Clear();
  bidprice_.Clear();
  bidvol_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:comm.MarketData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string WindCode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->windcode().data(), this->windcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.MarketData.WindCode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Code;
        break;
      }

      // required string Code = 2;
      case 2: {
        if (tag == 18) {
         parse_Code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.MarketData.Code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ActionDay;
        break;
      }

      // required int32 ActionDay = 3;
      case 3: {
        if (tag == 24) {
         parse_ActionDay:
          set_has_actionday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionday_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TradingDay;
        break;
      }

      // required int32 TradingDay = 4;
      case 4: {
        if (tag == 32) {
         parse_TradingDay:
          set_has_tradingday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradingday_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Time;
        break;
      }

      // required int32 Time = 5;
      case 5: {
        if (tag == 40) {
         parse_Time:
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Status;
        break;
      }

      // required int32 Status = 6;
      case 6: {
        if (tag == 48) {
         parse_Status:
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PreClose;
        break;
      }

      // required uint32 PreClose = 7;
      case 7: {
        if (tag == 56) {
         parse_PreClose:
          set_has_preclose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preclose_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Open;
        break;
      }

      // required uint32 Open = 8;
      case 8: {
        if (tag == 64) {
         parse_Open:
          set_has_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_High;
        break;
      }

      // required uint32 High = 9;
      case 9: {
        if (tag == 72) {
         parse_High:
          set_has_high();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Low;
        break;
      }

      // required uint32 Low = 10;
      case 10: {
        if (tag == 80) {
         parse_Low:
          set_has_low();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Match;
        break;
      }

      // required uint32 Match = 11;
      case 11: {
        if (tag == 88) {
         parse_Match:
          set_has_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AskPrice;
        break;
      }

      // repeated uint32 AskPrice = 12;
      case 12: {
        if (tag == 96) {
         parse_AskPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_askprice())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AskPrice;
        if (input->ExpectTag(104)) goto parse_AskVol;
        break;
      }

      // repeated uint32 AskVol = 13;
      case 13: {
        if (tag == 104) {
         parse_AskVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104, input, this->mutable_askvol())));
        } else if (tag == 106) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_askvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_AskVol;
        if (input->ExpectTag(112)) goto parse_BidPrice;
        break;
      }

      // repeated uint32 BidPrice = 14;
      case 14: {
        if (tag == 112) {
         parse_BidPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_bidprice())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidprice())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_BidPrice;
        if (input->ExpectTag(120)) goto parse_BidVol;
        break;
      }

      // repeated uint32 BidVol = 15;
      case 15: {
        if (tag == 120) {
         parse_BidVol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120, input, this->mutable_bidvol())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bidvol())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_BidVol;
        if (input->ExpectTag(128)) goto parse_NumTrades;
        break;
      }

      // required uint32 NumTrades = 16;
      case 16: {
        if (tag == 128) {
         parse_NumTrades:
          set_has_numtrades();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numtrades_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_Volume;
        break;
      }

      // required int64 Volume = 17;
      case 17: {
        if (tag == 136) {
         parse_Volume:
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_Turnover;
        break;
      }

      // required int64 Turnover = 18;
      case 18: {
        if (tag == 144) {
         parse_Turnover:
          set_has_turnover();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnover_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_TotalBidVol;
        break;
      }

      // required int64 TotalBidVol = 19;
      case 19: {
        if (tag == 152) {
         parse_TotalBidVol:
          set_has_totalbidvol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalbidvol_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_TotalAskVol;
        break;
      }

      // required int64 TotalAskVol = 20;
      case 20: {
        if (tag == 160) {
         parse_TotalAskVol:
          set_has_totalaskvol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalaskvol_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_WeighteAvgBidPrice;
        break;
      }

      // required uint32 WeighteAvgBidPrice = 21;
      case 21: {
        if (tag == 168) {
         parse_WeighteAvgBidPrice:
          set_has_weighteavgbidprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weighteavgbidprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_WeighteAvgAskPrice;
        break;
      }

      // required uint32 WeighteAvgAskPrice = 22;
      case 22: {
        if (tag == 176) {
         parse_WeighteAvgAskPrice:
          set_has_weighteavgaskprice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weighteavgaskprice_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_IOPV;
        break;
      }

      // required int32 IOPV = 23;
      case 23: {
        if (tag == 184) {
         parse_IOPV:
          set_has_iopv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iopv_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_YieldToMaturity;
        break;
      }

      // required int32 YieldToMaturity = 24;
      case 24: {
        if (tag == 192) {
         parse_YieldToMaturity:
          set_has_yieldtomaturity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yieldtomaturity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_HighLimited;
        break;
      }

      // required uint32 HighLimited = 25;
      case 25: {
        if (tag == 200) {
         parse_HighLimited:
          set_has_highlimited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highlimited_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_LowLimited;
        break;
      }

      // required uint32 LowLimited = 26;
      case 26: {
        if (tag == 208) {
         parse_LowLimited:
          set_has_lowlimited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowlimited_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_Prefix;
        break;
      }

      // required string Prefix = 27;
      case 27: {
        if (tag == 218) {
         parse_Prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comm.MarketData.Prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_Syl1;
        break;
      }

      // required int32 Syl1 = 28;
      case 28: {
        if (tag == 224) {
         parse_Syl1:
          set_has_syl1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &syl1_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_Syl2;
        break;
      }

      // required int32 Syl2 = 29;
      case 29: {
        if (tag == 232) {
         parse_Syl2:
          set_has_syl2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &syl2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_SD2;
        break;
      }

      // required int32 SD2 = 30;
      case 30: {
        if (tag == 240) {
         parse_SD2:
          set_has_sd2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sd2_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:comm.MarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:comm.MarketData)
  return false;
#undef DO_
}

void MarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:comm.MarketData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.MarketData.WindCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->windcode(), output);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.MarketData.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->code(), output);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionday(), output);
  }

  // required int32 TradingDay = 4;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tradingday(), output);
  }

  // required int32 Time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // required int32 Status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // required uint32 PreClose = 7;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->preclose(), output);
  }

  // required uint32 Open = 8;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->open(), output);
  }

  // required uint32 High = 9;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->high(), output);
  }

  // required uint32 Low = 10;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->low(), output);
  }

  // required uint32 Match = 11;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->match(), output);
  }

  // repeated uint32 AskPrice = 12;
  for (int i = 0; i < this->askprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->askprice(i), output);
  }

  // repeated uint32 AskVol = 13;
  for (int i = 0; i < this->askvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->askvol(i), output);
  }

  // repeated uint32 BidPrice = 14;
  for (int i = 0; i < this->bidprice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->bidprice(i), output);
  }

  // repeated uint32 BidVol = 15;
  for (int i = 0; i < this->bidvol_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->bidvol(i), output);
  }

  // required uint32 NumTrades = 16;
  if (has_numtrades()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->numtrades(), output);
  }

  // required int64 Volume = 17;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->volume(), output);
  }

  // required int64 Turnover = 18;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->turnover(), output);
  }

  // required int64 TotalBidVol = 19;
  if (has_totalbidvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->totalbidvol(), output);
  }

  // required int64 TotalAskVol = 20;
  if (has_totalaskvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->totalaskvol(), output);
  }

  // required uint32 WeighteAvgBidPrice = 21;
  if (has_weighteavgbidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->weighteavgbidprice(), output);
  }

  // required uint32 WeighteAvgAskPrice = 22;
  if (has_weighteavgaskprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->weighteavgaskprice(), output);
  }

  // required int32 IOPV = 23;
  if (has_iopv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->iopv(), output);
  }

  // required int32 YieldToMaturity = 24;
  if (has_yieldtomaturity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->yieldtomaturity(), output);
  }

  // required uint32 HighLimited = 25;
  if (has_highlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->highlimited(), output);
  }

  // required uint32 LowLimited = 26;
  if (has_lowlimited()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->lowlimited(), output);
  }

  // required string Prefix = 27;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.MarketData.Prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->prefix(), output);
  }

  // required int32 Syl1 = 28;
  if (has_syl1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->syl1(), output);
  }

  // required int32 Syl2 = 29;
  if (has_syl2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->syl2(), output);
  }

  // required int32 SD2 = 30;
  if (has_sd2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->sd2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:comm.MarketData)
}

::google::protobuf::uint8* MarketData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:comm.MarketData)
  // required string WindCode = 1;
  if (has_windcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->windcode().data(), this->windcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.MarketData.WindCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->windcode(), target);
  }

  // required string Code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.MarketData.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }

  // required int32 ActionDay = 3;
  if (has_actionday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionday(), target);
  }

  // required int32 TradingDay = 4;
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tradingday(), target);
  }

  // required int32 Time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // required int32 Status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // required uint32 PreClose = 7;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->preclose(), target);
  }

  // required uint32 Open = 8;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->open(), target);
  }

  // required uint32 High = 9;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->high(), target);
  }

  // required uint32 Low = 10;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->low(), target);
  }

  // required uint32 Match = 11;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->match(), target);
  }

  // repeated uint32 AskPrice = 12;
  for (int i = 0; i < this->askprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->askprice(i), target);
  }

  // repeated uint32 AskVol = 13;
  for (int i = 0; i < this->askvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(13, this->askvol(i), target);
  }

  // repeated uint32 BidPrice = 14;
  for (int i = 0; i < this->bidprice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->bidprice(i), target);
  }

  // repeated uint32 BidVol = 15;
  for (int i = 0; i < this->bidvol_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(15, this->bidvol(i), target);
  }

  // required uint32 NumTrades = 16;
  if (has_numtrades()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->numtrades(), target);
  }

  // required int64 Volume = 17;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->volume(), target);
  }

  // required int64 Turnover = 18;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->turnover(), target);
  }

  // required int64 TotalBidVol = 19;
  if (has_totalbidvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->totalbidvol(), target);
  }

  // required int64 TotalAskVol = 20;
  if (has_totalaskvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->totalaskvol(), target);
  }

  // required uint32 WeighteAvgBidPrice = 21;
  if (has_weighteavgbidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->weighteavgbidprice(), target);
  }

  // required uint32 WeighteAvgAskPrice = 22;
  if (has_weighteavgaskprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->weighteavgaskprice(), target);
  }

  // required int32 IOPV = 23;
  if (has_iopv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->iopv(), target);
  }

  // required int32 YieldToMaturity = 24;
  if (has_yieldtomaturity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->yieldtomaturity(), target);
  }

  // required uint32 HighLimited = 25;
  if (has_highlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->highlimited(), target);
  }

  // required uint32 LowLimited = 26;
  if (has_lowlimited()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->lowlimited(), target);
  }

  // required string Prefix = 27;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comm.MarketData.Prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->prefix(), target);
  }

  // required int32 Syl1 = 28;
  if (has_syl1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->syl1(), target);
  }

  // required int32 Syl2 = 29;
  if (has_syl2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->syl2(), target);
  }

  // required int32 SD2 = 30;
  if (has_sd2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->sd2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comm.MarketData)
  return target;
}

size_t MarketData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:comm.MarketData)
  size_t total_size = 0;

  if (has_windcode()) {
    // required string WindCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->windcode());
  }

  if (has_code()) {
    // required string Code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  if (has_actionday()) {
    // required int32 ActionDay = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionday());
  }

  if (has_tradingday()) {
    // required int32 TradingDay = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tradingday());
  }

  if (has_time()) {
    // required int32 Time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());
  }

  if (has_status()) {
    // required int32 Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_preclose()) {
    // required uint32 PreClose = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preclose());
  }

  if (has_open()) {
    // required uint32 Open = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open());
  }

  if (has_high()) {
    // required uint32 High = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high());
  }

  if (has_low()) {
    // required uint32 Low = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());
  }

  if (has_match()) {
    // required uint32 Match = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match());
  }

  if (has_numtrades()) {
    // required uint32 NumTrades = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numtrades());
  }

  if (has_volume()) {
    // required int64 Volume = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());
  }

  if (has_turnover()) {
    // required int64 Turnover = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->turnover());
  }

  if (has_totalbidvol()) {
    // required int64 TotalBidVol = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalbidvol());
  }

  if (has_totalaskvol()) {
    // required int64 TotalAskVol = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalaskvol());
  }

  if (has_weighteavgbidprice()) {
    // required uint32 WeighteAvgBidPrice = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weighteavgbidprice());
  }

  if (has_weighteavgaskprice()) {
    // required uint32 WeighteAvgAskPrice = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weighteavgaskprice());
  }

  if (has_iopv()) {
    // required int32 IOPV = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iopv());
  }

  if (has_yieldtomaturity()) {
    // required int32 YieldToMaturity = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yieldtomaturity());
  }

  if (has_highlimited()) {
    // required uint32 HighLimited = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highlimited());
  }

  if (has_lowlimited()) {
    // required uint32 LowLimited = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lowlimited());
  }

  if (has_prefix()) {
    // required string Prefix = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());
  }

  if (has_syl1()) {
    // required int32 Syl1 = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->syl1());
  }

  if (has_syl2()) {
    // required int32 Syl2 = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->syl2());
  }

  if (has_sd2()) {
    // required int32 SD2 = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sd2());
  }

  return total_size;
}
size_t MarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comm.MarketData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x3fff87ff) ^ 0x3fff87ff) == 0) {  // All required fields are present.
    // required string WindCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->windcode());

    // required string Code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());

    // required int32 ActionDay = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actionday());

    // required int32 TradingDay = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tradingday());

    // required int32 Time = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time());

    // required int32 Status = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required uint32 PreClose = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->preclose());

    // required uint32 Open = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->open());

    // required uint32 High = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->high());

    // required uint32 Low = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->low());

    // required uint32 Match = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match());

    // required uint32 NumTrades = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->numtrades());

    // required int64 Volume = 17;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->volume());

    // required int64 Turnover = 18;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->turnover());

    // required int64 TotalBidVol = 19;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalbidvol());

    // required int64 TotalAskVol = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalaskvol());

    // required uint32 WeighteAvgBidPrice = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weighteavgbidprice());

    // required uint32 WeighteAvgAskPrice = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weighteavgaskprice());

    // required int32 IOPV = 23;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->iopv());

    // required int32 YieldToMaturity = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->yieldtomaturity());

    // required uint32 HighLimited = 25;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->highlimited());

    // required uint32 LowLimited = 26;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lowlimited());

    // required string Prefix = 27;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prefix());

    // required int32 Syl1 = 28;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->syl1());

    // required int32 Syl2 = 29;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->syl2());

    // required int32 SD2 = 30;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sd2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated uint32 AskPrice = 12;
  {
    size_t data_size = 0;
    unsigned int count = this->askprice_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askprice(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->askprice_size());
    total_size += data_size;
  }

  // repeated uint32 AskVol = 13;
  {
    size_t data_size = 0;
    unsigned int count = this->askvol_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->askvol(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->askvol_size());
    total_size += data_size;
  }

  // repeated uint32 BidPrice = 14;
  {
    size_t data_size = 0;
    unsigned int count = this->bidprice_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidprice(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bidprice_size());
    total_size += data_size;
  }

  // repeated uint32 BidVol = 15;
  {
    size_t data_size = 0;
    unsigned int count = this->bidvol_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bidvol(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->bidvol_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comm.MarketData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MarketData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comm.MarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comm.MarketData)
    UnsafeMergeFrom(*source);
  }
}

void MarketData::MergeFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comm.MarketData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MarketData::UnsafeMergeFrom(const MarketData& from) {
  GOOGLE_DCHECK(&from != this);
  askprice_.UnsafeMergeFrom(from.askprice_);
  askvol_.UnsafeMergeFrom(from.askvol_);
  bidprice_.UnsafeMergeFrom(from.bidprice_);
  bidvol_.UnsafeMergeFrom(from.bidvol_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_windcode()) {
      set_has_windcode();
      windcode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.windcode_);
    }
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (from.has_actionday()) {
      set_actionday(from.actionday());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_match()) {
      set_match(from.match());
    }
    if (from.has_numtrades()) {
      set_numtrades(from.numtrades());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_totalbidvol()) {
      set_totalbidvol(from.totalbidvol());
    }
    if (from.has_totalaskvol()) {
      set_totalaskvol(from.totalaskvol());
    }
    if (from.has_weighteavgbidprice()) {
      set_weighteavgbidprice(from.weighteavgbidprice());
    }
    if (from.has_weighteavgaskprice()) {
      set_weighteavgaskprice(from.weighteavgaskprice());
    }
    if (from.has_iopv()) {
      set_iopv(from.iopv());
    }
    if (from.has_yieldtomaturity()) {
      set_yieldtomaturity(from.yieldtomaturity());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_highlimited()) {
      set_highlimited(from.highlimited());
    }
    if (from.has_lowlimited()) {
      set_lowlimited(from.lowlimited());
    }
    if (from.has_prefix()) {
      set_has_prefix();
      prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prefix_);
    }
    if (from.has_syl1()) {
      set_syl1(from.syl1());
    }
    if (from.has_syl2()) {
      set_syl2(from.syl2());
    }
    if (from.has_sd2()) {
      set_sd2(from.sd2());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void MarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comm.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketData::CopyFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comm.MarketData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MarketData::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fff87ff) != 0x3fff87ff) return false;

  return true;
}

void MarketData::Swap(MarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketData::InternalSwap(MarketData* other) {
  windcode_.Swap(&other->windcode_);
  code_.Swap(&other->code_);
  std::swap(actionday_, other->actionday_);
  std::swap(tradingday_, other->tradingday_);
  std::swap(time_, other->time_);
  std::swap(status_, other->status_);
  std::swap(preclose_, other->preclose_);
  std::swap(open_, other->open_);
  std::swap(high_, other->high_);
  std::swap(low_, other->low_);
  std::swap(match_, other->match_);
  askprice_.UnsafeArenaSwap(&other->askprice_);
  askvol_.UnsafeArenaSwap(&other->askvol_);
  bidprice_.UnsafeArenaSwap(&other->bidprice_);
  bidvol_.UnsafeArenaSwap(&other->bidvol_);
  std::swap(numtrades_, other->numtrades_);
  std::swap(volume_, other->volume_);
  std::swap(turnover_, other->turnover_);
  std::swap(totalbidvol_, other->totalbidvol_);
  std::swap(totalaskvol_, other->totalaskvol_);
  std::swap(weighteavgbidprice_, other->weighteavgbidprice_);
  std::swap(weighteavgaskprice_, other->weighteavgaskprice_);
  std::swap(iopv_, other->iopv_);
  std::swap(yieldtomaturity_, other->yieldtomaturity_);
  std::swap(highlimited_, other->highlimited_);
  std::swap(lowlimited_, other->lowlimited_);
  prefix_.Swap(&other->prefix_);
  std::swap(syl1_, other->syl1_);
  std::swap(syl2_, other->syl2_);
  std::swap(sd2_, other->sd2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketData_descriptor_;
  metadata.reflection = MarketData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketData

// required string WindCode = 1;
bool MarketData::has_windcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MarketData::set_has_windcode() {
  _has_bits_[0] |= 0x00000001u;
}
void MarketData::clear_has_windcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void MarketData::clear_windcode() {
  windcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_windcode();
}
const ::std::string& MarketData::windcode() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WindCode)
  return windcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarketData::set_windcode(const ::std::string& value) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.WindCode)
}
void MarketData::set_windcode(const char* value) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.WindCode)
}
void MarketData::set_windcode(const char* value, size_t size) {
  set_has_windcode();
  windcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.WindCode)
}
::std::string* MarketData::mutable_windcode() {
  set_has_windcode();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.WindCode)
  return windcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarketData::release_windcode() {
  // @@protoc_insertion_point(field_release:comm.MarketData.WindCode)
  clear_has_windcode();
  return windcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarketData::set_allocated_windcode(::std::string* windcode) {
  if (windcode != NULL) {
    set_has_windcode();
  } else {
    clear_has_windcode();
  }
  windcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), windcode);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.WindCode)
}

// required string Code = 2;
bool MarketData::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MarketData::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void MarketData::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void MarketData::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
const ::std::string& MarketData::code() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarketData::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.Code)
}
void MarketData::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.Code)
}
void MarketData::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.Code)
}
::std::string* MarketData::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarketData::release_code() {
  // @@protoc_insertion_point(field_release:comm.MarketData.Code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarketData::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.Code)
}

// required int32 ActionDay = 3;
bool MarketData::has_actionday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MarketData::set_has_actionday() {
  _has_bits_[0] |= 0x00000004u;
}
void MarketData::clear_has_actionday() {
  _has_bits_[0] &= ~0x00000004u;
}
void MarketData::clear_actionday() {
  actionday_ = 0;
  clear_has_actionday();
}
::google::protobuf::int32 MarketData::actionday() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.ActionDay)
  return actionday_;
}
void MarketData::set_actionday(::google::protobuf::int32 value) {
  set_has_actionday();
  actionday_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.ActionDay)
}

// required int32 TradingDay = 4;
bool MarketData::has_tradingday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MarketData::set_has_tradingday() {
  _has_bits_[0] |= 0x00000008u;
}
void MarketData::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000008u;
}
void MarketData::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
::google::protobuf::int32 MarketData::tradingday() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TradingDay)
  return tradingday_;
}
void MarketData::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TradingDay)
}

// required int32 Time = 5;
bool MarketData::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MarketData::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
void MarketData::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void MarketData::clear_time() {
  time_ = 0;
  clear_has_time();
}
::google::protobuf::int32 MarketData::time() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Time)
  return time_;
}
void MarketData::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Time)
}

// required int32 Status = 6;
bool MarketData::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MarketData::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void MarketData::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void MarketData::clear_status() {
  status_ = 0;
  clear_has_status();
}
::google::protobuf::int32 MarketData::status() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Status)
  return status_;
}
void MarketData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Status)
}

// required uint32 PreClose = 7;
bool MarketData::has_preclose() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MarketData::set_has_preclose() {
  _has_bits_[0] |= 0x00000040u;
}
void MarketData::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000040u;
}
void MarketData::clear_preclose() {
  preclose_ = 0u;
  clear_has_preclose();
}
::google::protobuf::uint32 MarketData::preclose() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.PreClose)
  return preclose_;
}
void MarketData::set_preclose(::google::protobuf::uint32 value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.PreClose)
}

// required uint32 Open = 8;
bool MarketData::has_open() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MarketData::set_has_open() {
  _has_bits_[0] |= 0x00000080u;
}
void MarketData::clear_has_open() {
  _has_bits_[0] &= ~0x00000080u;
}
void MarketData::clear_open() {
  open_ = 0u;
  clear_has_open();
}
::google::protobuf::uint32 MarketData::open() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Open)
  return open_;
}
void MarketData::set_open(::google::protobuf::uint32 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Open)
}

// required uint32 High = 9;
bool MarketData::has_high() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MarketData::set_has_high() {
  _has_bits_[0] |= 0x00000100u;
}
void MarketData::clear_has_high() {
  _has_bits_[0] &= ~0x00000100u;
}
void MarketData::clear_high() {
  high_ = 0u;
  clear_has_high();
}
::google::protobuf::uint32 MarketData::high() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.High)
  return high_;
}
void MarketData::set_high(::google::protobuf::uint32 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.High)
}

// required uint32 Low = 10;
bool MarketData::has_low() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MarketData::set_has_low() {
  _has_bits_[0] |= 0x00000200u;
}
void MarketData::clear_has_low() {
  _has_bits_[0] &= ~0x00000200u;
}
void MarketData::clear_low() {
  low_ = 0u;
  clear_has_low();
}
::google::protobuf::uint32 MarketData::low() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Low)
  return low_;
}
void MarketData::set_low(::google::protobuf::uint32 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Low)
}

// required uint32 Match = 11;
bool MarketData::has_match() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MarketData::set_has_match() {
  _has_bits_[0] |= 0x00000400u;
}
void MarketData::clear_has_match() {
  _has_bits_[0] &= ~0x00000400u;
}
void MarketData::clear_match() {
  match_ = 0u;
  clear_has_match();
}
::google::protobuf::uint32 MarketData::match() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Match)
  return match_;
}
void MarketData::set_match(::google::protobuf::uint32 value) {
  set_has_match();
  match_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Match)
}

// repeated uint32 AskPrice = 12;
int MarketData::askprice_size() const {
  return askprice_.size();
}
void MarketData::clear_askprice() {
  askprice_.Clear();
}
::google::protobuf::uint32 MarketData::askprice(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.AskPrice)
  return askprice_.Get(index);
}
void MarketData::set_askprice(int index, ::google::protobuf::uint32 value) {
  askprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.AskPrice)
}
void MarketData::add_askprice(::google::protobuf::uint32 value) {
  askprice_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.AskPrice)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarketData::askprice() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.AskPrice)
  return askprice_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarketData::mutable_askprice() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.AskPrice)
  return &askprice_;
}

// repeated uint32 AskVol = 13;
int MarketData::askvol_size() const {
  return askvol_.size();
}
void MarketData::clear_askvol() {
  askvol_.Clear();
}
::google::protobuf::uint32 MarketData::askvol(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.AskVol)
  return askvol_.Get(index);
}
void MarketData::set_askvol(int index, ::google::protobuf::uint32 value) {
  askvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.AskVol)
}
void MarketData::add_askvol(::google::protobuf::uint32 value) {
  askvol_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.AskVol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarketData::askvol() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.AskVol)
  return askvol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarketData::mutable_askvol() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.AskVol)
  return &askvol_;
}

// repeated uint32 BidPrice = 14;
int MarketData::bidprice_size() const {
  return bidprice_.size();
}
void MarketData::clear_bidprice() {
  bidprice_.Clear();
}
::google::protobuf::uint32 MarketData::bidprice(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BidPrice)
  return bidprice_.Get(index);
}
void MarketData::set_bidprice(int index, ::google::protobuf::uint32 value) {
  bidprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.BidPrice)
}
void MarketData::add_bidprice(::google::protobuf::uint32 value) {
  bidprice_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.BidPrice)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarketData::bidprice() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.BidPrice)
  return bidprice_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarketData::mutable_bidprice() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.BidPrice)
  return &bidprice_;
}

// repeated uint32 BidVol = 15;
int MarketData::bidvol_size() const {
  return bidvol_.size();
}
void MarketData::clear_bidvol() {
  bidvol_.Clear();
}
::google::protobuf::uint32 MarketData::bidvol(int index) const {
  // @@protoc_insertion_point(field_get:comm.MarketData.BidVol)
  return bidvol_.Get(index);
}
void MarketData::set_bidvol(int index, ::google::protobuf::uint32 value) {
  bidvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.MarketData.BidVol)
}
void MarketData::add_bidvol(::google::protobuf::uint32 value) {
  bidvol_.Add(value);
  // @@protoc_insertion_point(field_add:comm.MarketData.BidVol)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarketData::bidvol() const {
  // @@protoc_insertion_point(field_list:comm.MarketData.BidVol)
  return bidvol_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarketData::mutable_bidvol() {
  // @@protoc_insertion_point(field_mutable_list:comm.MarketData.BidVol)
  return &bidvol_;
}

// required uint32 NumTrades = 16;
bool MarketData::has_numtrades() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MarketData::set_has_numtrades() {
  _has_bits_[0] |= 0x00008000u;
}
void MarketData::clear_has_numtrades() {
  _has_bits_[0] &= ~0x00008000u;
}
void MarketData::clear_numtrades() {
  numtrades_ = 0u;
  clear_has_numtrades();
}
::google::protobuf::uint32 MarketData::numtrades() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.NumTrades)
  return numtrades_;
}
void MarketData::set_numtrades(::google::protobuf::uint32 value) {
  set_has_numtrades();
  numtrades_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.NumTrades)
}

// required int64 Volume = 17;
bool MarketData::has_volume() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MarketData::set_has_volume() {
  _has_bits_[0] |= 0x00010000u;
}
void MarketData::clear_has_volume() {
  _has_bits_[0] &= ~0x00010000u;
}
void MarketData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
::google::protobuf::int64 MarketData::volume() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Volume)
  return volume_;
}
void MarketData::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Volume)
}

// required int64 Turnover = 18;
bool MarketData::has_turnover() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MarketData::set_has_turnover() {
  _has_bits_[0] |= 0x00020000u;
}
void MarketData::clear_has_turnover() {
  _has_bits_[0] &= ~0x00020000u;
}
void MarketData::clear_turnover() {
  turnover_ = GOOGLE_LONGLONG(0);
  clear_has_turnover();
}
::google::protobuf::int64 MarketData::turnover() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Turnover)
  return turnover_;
}
void MarketData::set_turnover(::google::protobuf::int64 value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Turnover)
}

// required int64 TotalBidVol = 19;
bool MarketData::has_totalbidvol() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void MarketData::set_has_totalbidvol() {
  _has_bits_[0] |= 0x00040000u;
}
void MarketData::clear_has_totalbidvol() {
  _has_bits_[0] &= ~0x00040000u;
}
void MarketData::clear_totalbidvol() {
  totalbidvol_ = GOOGLE_LONGLONG(0);
  clear_has_totalbidvol();
}
::google::protobuf::int64 MarketData::totalbidvol() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalBidVol)
  return totalbidvol_;
}
void MarketData::set_totalbidvol(::google::protobuf::int64 value) {
  set_has_totalbidvol();
  totalbidvol_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalBidVol)
}

// required int64 TotalAskVol = 20;
bool MarketData::has_totalaskvol() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void MarketData::set_has_totalaskvol() {
  _has_bits_[0] |= 0x00080000u;
}
void MarketData::clear_has_totalaskvol() {
  _has_bits_[0] &= ~0x00080000u;
}
void MarketData::clear_totalaskvol() {
  totalaskvol_ = GOOGLE_LONGLONG(0);
  clear_has_totalaskvol();
}
::google::protobuf::int64 MarketData::totalaskvol() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.TotalAskVol)
  return totalaskvol_;
}
void MarketData::set_totalaskvol(::google::protobuf::int64 value) {
  set_has_totalaskvol();
  totalaskvol_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.TotalAskVol)
}

// required uint32 WeighteAvgBidPrice = 21;
bool MarketData::has_weighteavgbidprice() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void MarketData::set_has_weighteavgbidprice() {
  _has_bits_[0] |= 0x00100000u;
}
void MarketData::clear_has_weighteavgbidprice() {
  _has_bits_[0] &= ~0x00100000u;
}
void MarketData::clear_weighteavgbidprice() {
  weighteavgbidprice_ = 0u;
  clear_has_weighteavgbidprice();
}
::google::protobuf::uint32 MarketData::weighteavgbidprice() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WeighteAvgBidPrice)
  return weighteavgbidprice_;
}
void MarketData::set_weighteavgbidprice(::google::protobuf::uint32 value) {
  set_has_weighteavgbidprice();
  weighteavgbidprice_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WeighteAvgBidPrice)
}

// required uint32 WeighteAvgAskPrice = 22;
bool MarketData::has_weighteavgaskprice() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void MarketData::set_has_weighteavgaskprice() {
  _has_bits_[0] |= 0x00200000u;
}
void MarketData::clear_has_weighteavgaskprice() {
  _has_bits_[0] &= ~0x00200000u;
}
void MarketData::clear_weighteavgaskprice() {
  weighteavgaskprice_ = 0u;
  clear_has_weighteavgaskprice();
}
::google::protobuf::uint32 MarketData::weighteavgaskprice() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.WeighteAvgAskPrice)
  return weighteavgaskprice_;
}
void MarketData::set_weighteavgaskprice(::google::protobuf::uint32 value) {
  set_has_weighteavgaskprice();
  weighteavgaskprice_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.WeighteAvgAskPrice)
}

// required int32 IOPV = 23;
bool MarketData::has_iopv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void MarketData::set_has_iopv() {
  _has_bits_[0] |= 0x00400000u;
}
void MarketData::clear_has_iopv() {
  _has_bits_[0] &= ~0x00400000u;
}
void MarketData::clear_iopv() {
  iopv_ = 0;
  clear_has_iopv();
}
::google::protobuf::int32 MarketData::iopv() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.IOPV)
  return iopv_;
}
void MarketData::set_iopv(::google::protobuf::int32 value) {
  set_has_iopv();
  iopv_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.IOPV)
}

// required int32 YieldToMaturity = 24;
bool MarketData::has_yieldtomaturity() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void MarketData::set_has_yieldtomaturity() {
  _has_bits_[0] |= 0x00800000u;
}
void MarketData::clear_has_yieldtomaturity() {
  _has_bits_[0] &= ~0x00800000u;
}
void MarketData::clear_yieldtomaturity() {
  yieldtomaturity_ = 0;
  clear_has_yieldtomaturity();
}
::google::protobuf::int32 MarketData::yieldtomaturity() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.YieldToMaturity)
  return yieldtomaturity_;
}
void MarketData::set_yieldtomaturity(::google::protobuf::int32 value) {
  set_has_yieldtomaturity();
  yieldtomaturity_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.YieldToMaturity)
}

// required uint32 HighLimited = 25;
bool MarketData::has_highlimited() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void MarketData::set_has_highlimited() {
  _has_bits_[0] |= 0x01000000u;
}
void MarketData::clear_has_highlimited() {
  _has_bits_[0] &= ~0x01000000u;
}
void MarketData::clear_highlimited() {
  highlimited_ = 0u;
  clear_has_highlimited();
}
::google::protobuf::uint32 MarketData::highlimited() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.HighLimited)
  return highlimited_;
}
void MarketData::set_highlimited(::google::protobuf::uint32 value) {
  set_has_highlimited();
  highlimited_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.HighLimited)
}

// required uint32 LowLimited = 26;
bool MarketData::has_lowlimited() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void MarketData::set_has_lowlimited() {
  _has_bits_[0] |= 0x02000000u;
}
void MarketData::clear_has_lowlimited() {
  _has_bits_[0] &= ~0x02000000u;
}
void MarketData::clear_lowlimited() {
  lowlimited_ = 0u;
  clear_has_lowlimited();
}
::google::protobuf::uint32 MarketData::lowlimited() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.LowLimited)
  return lowlimited_;
}
void MarketData::set_lowlimited(::google::protobuf::uint32 value) {
  set_has_lowlimited();
  lowlimited_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.LowLimited)
}

// required string Prefix = 27;
bool MarketData::has_prefix() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void MarketData::set_has_prefix() {
  _has_bits_[0] |= 0x04000000u;
}
void MarketData::clear_has_prefix() {
  _has_bits_[0] &= ~0x04000000u;
}
void MarketData::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prefix();
}
const ::std::string& MarketData::prefix() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Prefix)
  return prefix_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarketData::set_prefix(const ::std::string& value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.MarketData.Prefix)
}
void MarketData::set_prefix(const char* value) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.MarketData.Prefix)
}
void MarketData::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.MarketData.Prefix)
}
::std::string* MarketData::mutable_prefix() {
  set_has_prefix();
  // @@protoc_insertion_point(field_mutable:comm.MarketData.Prefix)
  return prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MarketData::release_prefix() {
  // @@protoc_insertion_point(field_release:comm.MarketData.Prefix)
  clear_has_prefix();
  return prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MarketData::set_allocated_prefix(::std::string* prefix) {
  if (prefix != NULL) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:comm.MarketData.Prefix)
}

// required int32 Syl1 = 28;
bool MarketData::has_syl1() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void MarketData::set_has_syl1() {
  _has_bits_[0] |= 0x08000000u;
}
void MarketData::clear_has_syl1() {
  _has_bits_[0] &= ~0x08000000u;
}
void MarketData::clear_syl1() {
  syl1_ = 0;
  clear_has_syl1();
}
::google::protobuf::int32 MarketData::syl1() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Syl1)
  return syl1_;
}
void MarketData::set_syl1(::google::protobuf::int32 value) {
  set_has_syl1();
  syl1_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Syl1)
}

// required int32 Syl2 = 29;
bool MarketData::has_syl2() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void MarketData::set_has_syl2() {
  _has_bits_[0] |= 0x10000000u;
}
void MarketData::clear_has_syl2() {
  _has_bits_[0] &= ~0x10000000u;
}
void MarketData::clear_syl2() {
  syl2_ = 0;
  clear_has_syl2();
}
::google::protobuf::int32 MarketData::syl2() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.Syl2)
  return syl2_;
}
void MarketData::set_syl2(::google::protobuf::int32 value) {
  set_has_syl2();
  syl2_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.Syl2)
}

// required int32 SD2 = 30;
bool MarketData::has_sd2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void MarketData::set_has_sd2() {
  _has_bits_[0] |= 0x20000000u;
}
void MarketData::clear_has_sd2() {
  _has_bits_[0] &= ~0x20000000u;
}
void MarketData::clear_sd2() {
  sd2_ = 0;
  clear_has_sd2();
}
::google::protobuf::int32 MarketData::sd2() const {
  // @@protoc_insertion_point(field_get:comm.MarketData.SD2)
  return sd2_;
}
void MarketData::set_sd2(::google::protobuf::int32 value) {
  set_has_sd2();
  sd2_ = value;
  // @@protoc_insertion_point(field_set:comm.MarketData.SD2)
}

inline const MarketData* MarketData::internal_default_instance() {
  return &MarketData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)
