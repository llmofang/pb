// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stockBase.proto

#ifndef PROTOBUF_stockBase_2eproto__INCLUDED
#define PROTOBUF_stockBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif


#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_stockBase_2eproto();
void protobuf_AssignDesc_stockBase_2eproto();
void protobuf_ShutdownFile_stockBase_2eproto();

class StockBaseList;
class StockBase;

// ===================================================================

class StockBaseList : public ::google::protobuf::Message {
 public:
  StockBaseList();
  virtual ~StockBaseList();

  StockBaseList(const StockBaseList& from);

  inline StockBaseList& operator=(const StockBaseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockBaseList& default_instance();

  void Swap(StockBaseList* other);

  // implements Message ----------------------------------------------

  StockBaseList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockBaseList& from);
  void MergeFrom(const StockBaseList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .comm.StockBase InfoList = 1;
  inline int infolist_size() const;
  inline void clear_infolist();
  static const int kInfoListFieldNumber = 1;
  inline const ::comm::StockBase& infolist(int index) const;
  inline ::comm::StockBase* mutable_infolist(int index);
  inline ::comm::StockBase* add_infolist();
  inline const ::google::protobuf::RepeatedPtrField< ::comm::StockBase >&
      infolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::comm::StockBase >*
      mutable_infolist();

  // @@protoc_insertion_point(class_scope:comm.StockBaseList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::comm::StockBase > infolist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_stockBase_2eproto();
  friend void protobuf_AssignDesc_stockBase_2eproto();
  friend void protobuf_ShutdownFile_stockBase_2eproto();

  void InitAsDefaultInstance();
  static StockBaseList* default_instance_;
};
// -------------------------------------------------------------------

class StockBase : public ::google::protobuf::Message {
 public:
  StockBase();
  virtual ~StockBase();

  StockBase(const StockBase& from);

  inline StockBase& operator=(const StockBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockBase& default_instance();

  void Swap(StockBase* other);

  // implements Message ----------------------------------------------

  StockBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockBase& from);
  void MergeFrom(const StockBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string HTCode = 1;
  inline bool has_htcode() const;
  inline void clear_htcode();
  static const int kHTCodeFieldNumber = 1;
  inline const ::std::string& htcode() const;
  inline void set_htcode(const ::std::string& value);
  inline void set_htcode(const char* value);
  inline void set_htcode(const char* value, size_t size);
  inline ::std::string* mutable_htcode();
  inline ::std::string* release_htcode();
  inline void set_allocated_htcode(::std::string* htcode);

  // required string SecurityID = 2;
  inline bool has_securityid() const;
  inline void clear_securityid();
  static const int kSecurityIDFieldNumber = 2;
  inline const ::std::string& securityid() const;
  inline void set_securityid(const ::std::string& value);
  inline void set_securityid(const char* value);
  inline void set_securityid(const char* value, size_t size);
  inline ::std::string* mutable_securityid();
  inline ::std::string* release_securityid();
  inline void set_allocated_securityid(::std::string* securityid);

  // required string Symbol = 3;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required string ChiSpelling = 4;
  inline bool has_chispelling() const;
  inline void clear_chispelling();
  static const int kChiSpellingFieldNumber = 4;
  inline const ::std::string& chispelling() const;
  inline void set_chispelling(const ::std::string& value);
  inline void set_chispelling(const char* value);
  inline void set_chispelling(const char* value, size_t size);
  inline ::std::string* mutable_chispelling();
  inline ::std::string* release_chispelling();
  inline void set_allocated_chispelling(::std::string* chispelling);

  // required string EnglishName = 5;
  inline bool has_englishname() const;
  inline void clear_englishname();
  static const int kEnglishNameFieldNumber = 5;
  inline const ::std::string& englishname() const;
  inline void set_englishname(const ::std::string& value);
  inline void set_englishname(const char* value);
  inline void set_englishname(const char* value, size_t size);
  inline ::std::string* mutable_englishname();
  inline ::std::string* release_englishname();
  inline void set_allocated_englishname(::std::string* englishname);

  // required int32 SecurityIDSource = 6;
  inline bool has_securityidsource() const;
  inline void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  inline ::google::protobuf::int32 securityidsource() const;
  inline void set_securityidsource(::google::protobuf::int32 value);

  // required int32 SecurityType = 7;
  inline bool has_securitytype() const;
  inline void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  inline ::google::protobuf::int32 securitytype() const;
  inline void set_securitytype(::google::protobuf::int32 value);

  // required string SecuritySubType = 8;
  inline bool has_securitysubtype() const;
  inline void clear_securitysubtype();
  static const int kSecuritySubTypeFieldNumber = 8;
  inline const ::std::string& securitysubtype() const;
  inline void set_securitysubtype(const ::std::string& value);
  inline void set_securitysubtype(const char* value);
  inline void set_securitysubtype(const char* value, size_t size);
  inline ::std::string* mutable_securitysubtype();
  inline ::std::string* release_securitysubtype();
  inline void set_allocated_securitysubtype(::std::string* securitysubtype);

  // required string ListDate = 9;
  inline bool has_listdate() const;
  inline void clear_listdate();
  static const int kListDateFieldNumber = 9;
  inline const ::std::string& listdate() const;
  inline void set_listdate(const ::std::string& value);
  inline void set_listdate(const char* value);
  inline void set_listdate(const char* value, size_t size);
  inline ::std::string* mutable_listdate();
  inline ::std::string* release_listdate();
  inline void set_allocated_listdate(::std::string* listdate);

  // required string Currency = 10;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 10;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // required int64 OutstandingShare = 11;
  inline bool has_outstandingshare() const;
  inline void clear_outstandingshare();
  static const int kOutstandingShareFieldNumber = 11;
  inline ::google::protobuf::int64 outstandingshare() const;
  inline void set_outstandingshare(::google::protobuf::int64 value);

  // required int64 PublicFloatShareQuantity = 12;
  inline bool has_publicfloatsharequantity() const;
  inline void clear_publicfloatsharequantity();
  static const int kPublicFloatShareQuantityFieldNumber = 12;
  inline ::google::protobuf::int64 publicfloatsharequantity() const;
  inline void set_publicfloatsharequantity(::google::protobuf::int64 value);

  // required int32 MDDate = 13;
  inline bool has_mddate() const;
  inline void clear_mddate();
  static const int kMDDateFieldNumber = 13;
  inline ::google::protobuf::int32 mddate() const;
  inline void set_mddate(::google::protobuf::int32 value);

  // required string TradingPhaseCode = 14;
  inline bool has_tradingphasecode() const;
  inline void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 14;
  inline const ::std::string& tradingphasecode() const;
  inline void set_tradingphasecode(const ::std::string& value);
  inline void set_tradingphasecode(const char* value);
  inline void set_tradingphasecode(const char* value, size_t size);
  inline ::std::string* mutable_tradingphasecode();
  inline ::std::string* release_tradingphasecode();
  inline void set_allocated_tradingphasecode(::std::string* tradingphasecode);

  // required int64 PreClosePx = 15;
  inline bool has_preclosepx() const;
  inline void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 15;
  inline ::google::protobuf::int64 preclosepx() const;
  inline void set_preclosepx(::google::protobuf::int64 value);

  // required int64 MaxPx = 16;
  inline bool has_maxpx() const;
  inline void clear_maxpx();
  static const int kMaxPxFieldNumber = 16;
  inline ::google::protobuf::int64 maxpx() const;
  inline void set_maxpx(::google::protobuf::int64 value);

  // required int64 MinPx = 17;
  inline bool has_minpx() const;
  inline void clear_minpx();
  static const int kMinPxFieldNumber = 17;
  inline ::google::protobuf::int64 minpx() const;
  inline void set_minpx(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:comm.StockBase)
 private:
  inline void set_has_htcode();
  inline void clear_has_htcode();
  inline void set_has_securityid();
  inline void clear_has_securityid();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_chispelling();
  inline void clear_has_chispelling();
  inline void set_has_englishname();
  inline void clear_has_englishname();
  inline void set_has_securityidsource();
  inline void clear_has_securityidsource();
  inline void set_has_securitytype();
  inline void clear_has_securitytype();
  inline void set_has_securitysubtype();
  inline void clear_has_securitysubtype();
  inline void set_has_listdate();
  inline void clear_has_listdate();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_outstandingshare();
  inline void clear_has_outstandingshare();
  inline void set_has_publicfloatsharequantity();
  inline void clear_has_publicfloatsharequantity();
  inline void set_has_mddate();
  inline void clear_has_mddate();
  inline void set_has_tradingphasecode();
  inline void clear_has_tradingphasecode();
  inline void set_has_preclosepx();
  inline void clear_has_preclosepx();
  inline void set_has_maxpx();
  inline void clear_has_maxpx();
  inline void set_has_minpx();
  inline void clear_has_minpx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* htcode_;
  ::std::string* securityid_;
  ::std::string* symbol_;
  ::std::string* chispelling_;
  ::std::string* englishname_;
  ::google::protobuf::int32 securityidsource_;
  ::google::protobuf::int32 securitytype_;
  ::std::string* securitysubtype_;
  ::std::string* listdate_;
  ::std::string* currency_;
  ::google::protobuf::int64 outstandingshare_;
  ::google::protobuf::int64 publicfloatsharequantity_;
  ::std::string* tradingphasecode_;
  ::google::protobuf::int64 preclosepx_;
  ::google::protobuf::int64 maxpx_;
  ::google::protobuf::int64 minpx_;
  ::google::protobuf::int32 mddate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_stockBase_2eproto();
  friend void protobuf_AssignDesc_stockBase_2eproto();
  friend void protobuf_ShutdownFile_stockBase_2eproto();

  void InitAsDefaultInstance();
  static StockBase* default_instance_;
};
// ===================================================================


// ===================================================================

// StockBaseList

// repeated .comm.StockBase InfoList = 1;
inline int StockBaseList::infolist_size() const {
  return infolist_.size();
}
inline void StockBaseList::clear_infolist() {
  infolist_.Clear();
}
inline const ::comm::StockBase& StockBaseList::infolist(int index) const {
  return infolist_.Get(index);
}
inline ::comm::StockBase* StockBaseList::mutable_infolist(int index) {
  return infolist_.Mutable(index);
}
inline ::comm::StockBase* StockBaseList::add_infolist() {
  return infolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::comm::StockBase >&
StockBaseList::infolist() const {
  return infolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::comm::StockBase >*
StockBaseList::mutable_infolist() {
  return &infolist_;
}

// -------------------------------------------------------------------

// StockBase

// required string HTCode = 1;
inline bool StockBase::has_htcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockBase::set_has_htcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockBase::clear_has_htcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockBase::clear_htcode() {
  if (htcode_ != &::google::protobuf::internal::kEmptyString) {
    htcode_->clear();
  }
  clear_has_htcode();
}
inline const ::std::string& StockBase::htcode() const {
  return *htcode_;
}
inline void StockBase::set_htcode(const ::std::string& value) {
  set_has_htcode();
  if (htcode_ == &::google::protobuf::internal::kEmptyString) {
    htcode_ = new ::std::string;
  }
  htcode_->assign(value);
}
inline void StockBase::set_htcode(const char* value) {
  set_has_htcode();
  if (htcode_ == &::google::protobuf::internal::kEmptyString) {
    htcode_ = new ::std::string;
  }
  htcode_->assign(value);
}
inline void StockBase::set_htcode(const char* value, size_t size) {
  set_has_htcode();
  if (htcode_ == &::google::protobuf::internal::kEmptyString) {
    htcode_ = new ::std::string;
  }
  htcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_htcode() {
  set_has_htcode();
  if (htcode_ == &::google::protobuf::internal::kEmptyString) {
    htcode_ = new ::std::string;
  }
  return htcode_;
}
inline ::std::string* StockBase::release_htcode() {
  clear_has_htcode();
  if (htcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = htcode_;
    htcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_htcode(::std::string* htcode) {
  if (htcode_ != &::google::protobuf::internal::kEmptyString) {
    delete htcode_;
  }
  if (htcode) {
    set_has_htcode();
    htcode_ = htcode;
  } else {
    clear_has_htcode();
    htcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SecurityID = 2;
inline bool StockBase::has_securityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockBase::set_has_securityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockBase::clear_has_securityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockBase::clear_securityid() {
  if (securityid_ != &::google::protobuf::internal::kEmptyString) {
    securityid_->clear();
  }
  clear_has_securityid();
}
inline const ::std::string& StockBase::securityid() const {
  return *securityid_;
}
inline void StockBase::set_securityid(const ::std::string& value) {
  set_has_securityid();
  if (securityid_ == &::google::protobuf::internal::kEmptyString) {
    securityid_ = new ::std::string;
  }
  securityid_->assign(value);
}
inline void StockBase::set_securityid(const char* value) {
  set_has_securityid();
  if (securityid_ == &::google::protobuf::internal::kEmptyString) {
    securityid_ = new ::std::string;
  }
  securityid_->assign(value);
}
inline void StockBase::set_securityid(const char* value, size_t size) {
  set_has_securityid();
  if (securityid_ == &::google::protobuf::internal::kEmptyString) {
    securityid_ = new ::std::string;
  }
  securityid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_securityid() {
  set_has_securityid();
  if (securityid_ == &::google::protobuf::internal::kEmptyString) {
    securityid_ = new ::std::string;
  }
  return securityid_;
}
inline ::std::string* StockBase::release_securityid() {
  clear_has_securityid();
  if (securityid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = securityid_;
    securityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_securityid(::std::string* securityid) {
  if (securityid_ != &::google::protobuf::internal::kEmptyString) {
    delete securityid_;
  }
  if (securityid) {
    set_has_securityid();
    securityid_ = securityid;
  } else {
    clear_has_securityid();
    securityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Symbol = 3;
inline bool StockBase::has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockBase::set_has_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockBase::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockBase::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& StockBase::symbol() const {
  return *symbol_;
}
inline void StockBase::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void StockBase::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void StockBase::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* StockBase::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ChiSpelling = 4;
inline bool StockBase::has_chispelling() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockBase::set_has_chispelling() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockBase::clear_has_chispelling() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockBase::clear_chispelling() {
  if (chispelling_ != &::google::protobuf::internal::kEmptyString) {
    chispelling_->clear();
  }
  clear_has_chispelling();
}
inline const ::std::string& StockBase::chispelling() const {
  return *chispelling_;
}
inline void StockBase::set_chispelling(const ::std::string& value) {
  set_has_chispelling();
  if (chispelling_ == &::google::protobuf::internal::kEmptyString) {
    chispelling_ = new ::std::string;
  }
  chispelling_->assign(value);
}
inline void StockBase::set_chispelling(const char* value) {
  set_has_chispelling();
  if (chispelling_ == &::google::protobuf::internal::kEmptyString) {
    chispelling_ = new ::std::string;
  }
  chispelling_->assign(value);
}
inline void StockBase::set_chispelling(const char* value, size_t size) {
  set_has_chispelling();
  if (chispelling_ == &::google::protobuf::internal::kEmptyString) {
    chispelling_ = new ::std::string;
  }
  chispelling_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_chispelling() {
  set_has_chispelling();
  if (chispelling_ == &::google::protobuf::internal::kEmptyString) {
    chispelling_ = new ::std::string;
  }
  return chispelling_;
}
inline ::std::string* StockBase::release_chispelling() {
  clear_has_chispelling();
  if (chispelling_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chispelling_;
    chispelling_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_chispelling(::std::string* chispelling) {
  if (chispelling_ != &::google::protobuf::internal::kEmptyString) {
    delete chispelling_;
  }
  if (chispelling) {
    set_has_chispelling();
    chispelling_ = chispelling;
  } else {
    clear_has_chispelling();
    chispelling_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string EnglishName = 5;
inline bool StockBase::has_englishname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockBase::set_has_englishname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockBase::clear_has_englishname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockBase::clear_englishname() {
  if (englishname_ != &::google::protobuf::internal::kEmptyString) {
    englishname_->clear();
  }
  clear_has_englishname();
}
inline const ::std::string& StockBase::englishname() const {
  return *englishname_;
}
inline void StockBase::set_englishname(const ::std::string& value) {
  set_has_englishname();
  if (englishname_ == &::google::protobuf::internal::kEmptyString) {
    englishname_ = new ::std::string;
  }
  englishname_->assign(value);
}
inline void StockBase::set_englishname(const char* value) {
  set_has_englishname();
  if (englishname_ == &::google::protobuf::internal::kEmptyString) {
    englishname_ = new ::std::string;
  }
  englishname_->assign(value);
}
inline void StockBase::set_englishname(const char* value, size_t size) {
  set_has_englishname();
  if (englishname_ == &::google::protobuf::internal::kEmptyString) {
    englishname_ = new ::std::string;
  }
  englishname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_englishname() {
  set_has_englishname();
  if (englishname_ == &::google::protobuf::internal::kEmptyString) {
    englishname_ = new ::std::string;
  }
  return englishname_;
}
inline ::std::string* StockBase::release_englishname() {
  clear_has_englishname();
  if (englishname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = englishname_;
    englishname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_englishname(::std::string* englishname) {
  if (englishname_ != &::google::protobuf::internal::kEmptyString) {
    delete englishname_;
  }
  if (englishname) {
    set_has_englishname();
    englishname_ = englishname;
  } else {
    clear_has_englishname();
    englishname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 SecurityIDSource = 6;
inline bool StockBase::has_securityidsource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockBase::set_has_securityidsource() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockBase::clear_has_securityidsource() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockBase::clear_securityidsource() {
  securityidsource_ = 0;
  clear_has_securityidsource();
}
inline ::google::protobuf::int32 StockBase::securityidsource() const {
  return securityidsource_;
}
inline void StockBase::set_securityidsource(::google::protobuf::int32 value) {
  set_has_securityidsource();
  securityidsource_ = value;
}

// required int32 SecurityType = 7;
inline bool StockBase::has_securitytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockBase::set_has_securitytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockBase::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockBase::clear_securitytype() {
  securitytype_ = 0;
  clear_has_securitytype();
}
inline ::google::protobuf::int32 StockBase::securitytype() const {
  return securitytype_;
}
inline void StockBase::set_securitytype(::google::protobuf::int32 value) {
  set_has_securitytype();
  securitytype_ = value;
}

// required string SecuritySubType = 8;
inline bool StockBase::has_securitysubtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockBase::set_has_securitysubtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockBase::clear_has_securitysubtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockBase::clear_securitysubtype() {
  if (securitysubtype_ != &::google::protobuf::internal::kEmptyString) {
    securitysubtype_->clear();
  }
  clear_has_securitysubtype();
}
inline const ::std::string& StockBase::securitysubtype() const {
  return *securitysubtype_;
}
inline void StockBase::set_securitysubtype(const ::std::string& value) {
  set_has_securitysubtype();
  if (securitysubtype_ == &::google::protobuf::internal::kEmptyString) {
    securitysubtype_ = new ::std::string;
  }
  securitysubtype_->assign(value);
}
inline void StockBase::set_securitysubtype(const char* value) {
  set_has_securitysubtype();
  if (securitysubtype_ == &::google::protobuf::internal::kEmptyString) {
    securitysubtype_ = new ::std::string;
  }
  securitysubtype_->assign(value);
}
inline void StockBase::set_securitysubtype(const char* value, size_t size) {
  set_has_securitysubtype();
  if (securitysubtype_ == &::google::protobuf::internal::kEmptyString) {
    securitysubtype_ = new ::std::string;
  }
  securitysubtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_securitysubtype() {
  set_has_securitysubtype();
  if (securitysubtype_ == &::google::protobuf::internal::kEmptyString) {
    securitysubtype_ = new ::std::string;
  }
  return securitysubtype_;
}
inline ::std::string* StockBase::release_securitysubtype() {
  clear_has_securitysubtype();
  if (securitysubtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = securitysubtype_;
    securitysubtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_securitysubtype(::std::string* securitysubtype) {
  if (securitysubtype_ != &::google::protobuf::internal::kEmptyString) {
    delete securitysubtype_;
  }
  if (securitysubtype) {
    set_has_securitysubtype();
    securitysubtype_ = securitysubtype;
  } else {
    clear_has_securitysubtype();
    securitysubtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ListDate = 9;
inline bool StockBase::has_listdate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockBase::set_has_listdate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockBase::clear_has_listdate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockBase::clear_listdate() {
  if (listdate_ != &::google::protobuf::internal::kEmptyString) {
    listdate_->clear();
  }
  clear_has_listdate();
}
inline const ::std::string& StockBase::listdate() const {
  return *listdate_;
}
inline void StockBase::set_listdate(const ::std::string& value) {
  set_has_listdate();
  if (listdate_ == &::google::protobuf::internal::kEmptyString) {
    listdate_ = new ::std::string;
  }
  listdate_->assign(value);
}
inline void StockBase::set_listdate(const char* value) {
  set_has_listdate();
  if (listdate_ == &::google::protobuf::internal::kEmptyString) {
    listdate_ = new ::std::string;
  }
  listdate_->assign(value);
}
inline void StockBase::set_listdate(const char* value, size_t size) {
  set_has_listdate();
  if (listdate_ == &::google::protobuf::internal::kEmptyString) {
    listdate_ = new ::std::string;
  }
  listdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_listdate() {
  set_has_listdate();
  if (listdate_ == &::google::protobuf::internal::kEmptyString) {
    listdate_ = new ::std::string;
  }
  return listdate_;
}
inline ::std::string* StockBase::release_listdate() {
  clear_has_listdate();
  if (listdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = listdate_;
    listdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_listdate(::std::string* listdate) {
  if (listdate_ != &::google::protobuf::internal::kEmptyString) {
    delete listdate_;
  }
  if (listdate) {
    set_has_listdate();
    listdate_ = listdate;
  } else {
    clear_has_listdate();
    listdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Currency = 10;
inline bool StockBase::has_currency() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockBase::set_has_currency() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockBase::clear_has_currency() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockBase::clear_currency() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& StockBase::currency() const {
  return *currency_;
}
inline void StockBase::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void StockBase::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void StockBase::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  return currency_;
}
inline ::std::string* StockBase::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 OutstandingShare = 11;
inline bool StockBase::has_outstandingshare() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockBase::set_has_outstandingshare() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockBase::clear_has_outstandingshare() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockBase::clear_outstandingshare() {
  outstandingshare_ = GOOGLE_LONGLONG(0);
  clear_has_outstandingshare();
}
inline ::google::protobuf::int64 StockBase::outstandingshare() const {
  return outstandingshare_;
}
inline void StockBase::set_outstandingshare(::google::protobuf::int64 value) {
  set_has_outstandingshare();
  outstandingshare_ = value;
}

// required int64 PublicFloatShareQuantity = 12;
inline bool StockBase::has_publicfloatsharequantity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockBase::set_has_publicfloatsharequantity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockBase::clear_has_publicfloatsharequantity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockBase::clear_publicfloatsharequantity() {
  publicfloatsharequantity_ = GOOGLE_LONGLONG(0);
  clear_has_publicfloatsharequantity();
}
inline ::google::protobuf::int64 StockBase::publicfloatsharequantity() const {
  return publicfloatsharequantity_;
}
inline void StockBase::set_publicfloatsharequantity(::google::protobuf::int64 value) {
  set_has_publicfloatsharequantity();
  publicfloatsharequantity_ = value;
}

// required int32 MDDate = 13;
inline bool StockBase::has_mddate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockBase::set_has_mddate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockBase::clear_has_mddate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockBase::clear_mddate() {
  mddate_ = 0;
  clear_has_mddate();
}
inline ::google::protobuf::int32 StockBase::mddate() const {
  return mddate_;
}
inline void StockBase::set_mddate(::google::protobuf::int32 value) {
  set_has_mddate();
  mddate_ = value;
}

// required string TradingPhaseCode = 14;
inline bool StockBase::has_tradingphasecode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockBase::set_has_tradingphasecode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockBase::clear_has_tradingphasecode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockBase::clear_tradingphasecode() {
  if (tradingphasecode_ != &::google::protobuf::internal::kEmptyString) {
    tradingphasecode_->clear();
  }
  clear_has_tradingphasecode();
}
inline const ::std::string& StockBase::tradingphasecode() const {
  return *tradingphasecode_;
}
inline void StockBase::set_tradingphasecode(const ::std::string& value) {
  set_has_tradingphasecode();
  if (tradingphasecode_ == &::google::protobuf::internal::kEmptyString) {
    tradingphasecode_ = new ::std::string;
  }
  tradingphasecode_->assign(value);
}
inline void StockBase::set_tradingphasecode(const char* value) {
  set_has_tradingphasecode();
  if (tradingphasecode_ == &::google::protobuf::internal::kEmptyString) {
    tradingphasecode_ = new ::std::string;
  }
  tradingphasecode_->assign(value);
}
inline void StockBase::set_tradingphasecode(const char* value, size_t size) {
  set_has_tradingphasecode();
  if (tradingphasecode_ == &::google::protobuf::internal::kEmptyString) {
    tradingphasecode_ = new ::std::string;
  }
  tradingphasecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_tradingphasecode() {
  set_has_tradingphasecode();
  if (tradingphasecode_ == &::google::protobuf::internal::kEmptyString) {
    tradingphasecode_ = new ::std::string;
  }
  return tradingphasecode_;
}
inline ::std::string* StockBase::release_tradingphasecode() {
  clear_has_tradingphasecode();
  if (tradingphasecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tradingphasecode_;
    tradingphasecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StockBase::set_allocated_tradingphasecode(::std::string* tradingphasecode) {
  if (tradingphasecode_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingphasecode_;
  }
  if (tradingphasecode) {
    set_has_tradingphasecode();
    tradingphasecode_ = tradingphasecode;
  } else {
    clear_has_tradingphasecode();
    tradingphasecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 PreClosePx = 15;
inline bool StockBase::has_preclosepx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockBase::set_has_preclosepx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockBase::clear_has_preclosepx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockBase::clear_preclosepx() {
  preclosepx_ = GOOGLE_LONGLONG(0);
  clear_has_preclosepx();
}
inline ::google::protobuf::int64 StockBase::preclosepx() const {
  return preclosepx_;
}
inline void StockBase::set_preclosepx(::google::protobuf::int64 value) {
  set_has_preclosepx();
  preclosepx_ = value;
}

// required int64 MaxPx = 16;
inline bool StockBase::has_maxpx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockBase::set_has_maxpx() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockBase::clear_has_maxpx() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockBase::clear_maxpx() {
  maxpx_ = GOOGLE_LONGLONG(0);
  clear_has_maxpx();
}
inline ::google::protobuf::int64 StockBase::maxpx() const {
  return maxpx_;
}
inline void StockBase::set_maxpx(::google::protobuf::int64 value) {
  set_has_maxpx();
  maxpx_ = value;
}

// required int64 MinPx = 17;
inline bool StockBase::has_minpx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StockBase::set_has_minpx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StockBase::clear_has_minpx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StockBase::clear_minpx() {
  minpx_ = GOOGLE_LONGLONG(0);
  clear_has_minpx();
}
inline ::google::protobuf::int64 StockBase::minpx() const {
  return minpx_;
}
inline void StockBase::set_minpx(::google::protobuf::int64 value) {
  set_has_minpx();
  minpx_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stockBase_2eproto__INCLUDED
