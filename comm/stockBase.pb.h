// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stockBase.proto

#ifndef PROTOBUF_stockBase_2eproto__INCLUDED
#define PROTOBUF_stockBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_stockBase_2eproto();
void protobuf_InitDefaults_stockBase_2eproto();
void protobuf_AssignDesc_stockBase_2eproto();
void protobuf_ShutdownFile_stockBase_2eproto();

class StockBase;
class StockBaseList;

// ===================================================================

class StockBaseList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comm.StockBaseList) */ {
 public:
  StockBaseList();
  virtual ~StockBaseList();

  StockBaseList(const StockBaseList& from);

  inline StockBaseList& operator=(const StockBaseList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockBaseList& default_instance();

  static const StockBaseList* internal_default_instance();

  void Swap(StockBaseList* other);

  // implements Message ----------------------------------------------

  inline StockBaseList* New() const { return New(NULL); }

  StockBaseList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockBaseList& from);
  void MergeFrom(const StockBaseList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockBaseList* other);
  void UnsafeMergeFrom(const StockBaseList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .comm.StockBase InfoList = 1;
  int infolist_size() const;
  void clear_infolist();
  static const int kInfoListFieldNumber = 1;
  const ::comm::StockBase& infolist(int index) const;
  ::comm::StockBase* mutable_infolist(int index);
  ::comm::StockBase* add_infolist();
  ::google::protobuf::RepeatedPtrField< ::comm::StockBase >*
      mutable_infolist();
  const ::google::protobuf::RepeatedPtrField< ::comm::StockBase >&
      infolist() const;

  // @@protoc_insertion_point(class_scope:comm.StockBaseList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::comm::StockBase > infolist_;
  friend void  protobuf_InitDefaults_stockBase_2eproto_impl();
  friend void  protobuf_AddDesc_stockBase_2eproto_impl();
  friend void protobuf_AssignDesc_stockBase_2eproto();
  friend void protobuf_ShutdownFile_stockBase_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StockBaseList> StockBaseList_default_instance_;

// -------------------------------------------------------------------

class StockBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comm.StockBase) */ {
 public:
  StockBase();
  virtual ~StockBase();

  StockBase(const StockBase& from);

  inline StockBase& operator=(const StockBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StockBase& default_instance();

  static const StockBase* internal_default_instance();

  void Swap(StockBase* other);

  // implements Message ----------------------------------------------

  inline StockBase* New() const { return New(NULL); }

  StockBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockBase& from);
  void MergeFrom(const StockBase& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StockBase* other);
  void UnsafeMergeFrom(const StockBase& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string HTCode = 1;
  bool has_htcode() const;
  void clear_htcode();
  static const int kHTCodeFieldNumber = 1;
  const ::std::string& htcode() const;
  void set_htcode(const ::std::string& value);
  void set_htcode(const char* value);
  void set_htcode(const char* value, size_t size);
  ::std::string* mutable_htcode();
  ::std::string* release_htcode();
  void set_allocated_htcode(::std::string* htcode);

  // required string SecurityID = 2;
  bool has_securityid() const;
  void clear_securityid();
  static const int kSecurityIDFieldNumber = 2;
  const ::std::string& securityid() const;
  void set_securityid(const ::std::string& value);
  void set_securityid(const char* value);
  void set_securityid(const char* value, size_t size);
  ::std::string* mutable_securityid();
  ::std::string* release_securityid();
  void set_allocated_securityid(::std::string* securityid);

  // required string Symbol = 3;
  bool has_symbol() const;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // required string ChiSpelling = 4;
  bool has_chispelling() const;
  void clear_chispelling();
  static const int kChiSpellingFieldNumber = 4;
  const ::std::string& chispelling() const;
  void set_chispelling(const ::std::string& value);
  void set_chispelling(const char* value);
  void set_chispelling(const char* value, size_t size);
  ::std::string* mutable_chispelling();
  ::std::string* release_chispelling();
  void set_allocated_chispelling(::std::string* chispelling);

  // required string EnglishName = 5;
  bool has_englishname() const;
  void clear_englishname();
  static const int kEnglishNameFieldNumber = 5;
  const ::std::string& englishname() const;
  void set_englishname(const ::std::string& value);
  void set_englishname(const char* value);
  void set_englishname(const char* value, size_t size);
  ::std::string* mutable_englishname();
  ::std::string* release_englishname();
  void set_allocated_englishname(::std::string* englishname);

  // required int32 SecurityIDSource = 6;
  bool has_securityidsource() const;
  void clear_securityidsource();
  static const int kSecurityIDSourceFieldNumber = 6;
  ::google::protobuf::int32 securityidsource() const;
  void set_securityidsource(::google::protobuf::int32 value);

  // required int32 SecurityType = 7;
  bool has_securitytype() const;
  void clear_securitytype();
  static const int kSecurityTypeFieldNumber = 7;
  ::google::protobuf::int32 securitytype() const;
  void set_securitytype(::google::protobuf::int32 value);

  // required string SecuritySubType = 8;
  bool has_securitysubtype() const;
  void clear_securitysubtype();
  static const int kSecuritySubTypeFieldNumber = 8;
  const ::std::string& securitysubtype() const;
  void set_securitysubtype(const ::std::string& value);
  void set_securitysubtype(const char* value);
  void set_securitysubtype(const char* value, size_t size);
  ::std::string* mutable_securitysubtype();
  ::std::string* release_securitysubtype();
  void set_allocated_securitysubtype(::std::string* securitysubtype);

  // required string ListDate = 9;
  bool has_listdate() const;
  void clear_listdate();
  static const int kListDateFieldNumber = 9;
  const ::std::string& listdate() const;
  void set_listdate(const ::std::string& value);
  void set_listdate(const char* value);
  void set_listdate(const char* value, size_t size);
  ::std::string* mutable_listdate();
  ::std::string* release_listdate();
  void set_allocated_listdate(::std::string* listdate);

  // required string Currency = 10;
  bool has_currency() const;
  void clear_currency();
  static const int kCurrencyFieldNumber = 10;
  const ::std::string& currency() const;
  void set_currency(const ::std::string& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  ::std::string* mutable_currency();
  ::std::string* release_currency();
  void set_allocated_currency(::std::string* currency);

  // required int64 OutstandingShare = 11;
  bool has_outstandingshare() const;
  void clear_outstandingshare();
  static const int kOutstandingShareFieldNumber = 11;
  ::google::protobuf::int64 outstandingshare() const;
  void set_outstandingshare(::google::protobuf::int64 value);

  // required int64 PublicFloatShareQuantity = 12;
  bool has_publicfloatsharequantity() const;
  void clear_publicfloatsharequantity();
  static const int kPublicFloatShareQuantityFieldNumber = 12;
  ::google::protobuf::int64 publicfloatsharequantity() const;
  void set_publicfloatsharequantity(::google::protobuf::int64 value);

  // required int32 MDDate = 13;
  bool has_mddate() const;
  void clear_mddate();
  static const int kMDDateFieldNumber = 13;
  ::google::protobuf::int32 mddate() const;
  void set_mddate(::google::protobuf::int32 value);

  // required string TradingPhaseCode = 14;
  bool has_tradingphasecode() const;
  void clear_tradingphasecode();
  static const int kTradingPhaseCodeFieldNumber = 14;
  const ::std::string& tradingphasecode() const;
  void set_tradingphasecode(const ::std::string& value);
  void set_tradingphasecode(const char* value);
  void set_tradingphasecode(const char* value, size_t size);
  ::std::string* mutable_tradingphasecode();
  ::std::string* release_tradingphasecode();
  void set_allocated_tradingphasecode(::std::string* tradingphasecode);

  // required int64 PreClosePx = 15;
  bool has_preclosepx() const;
  void clear_preclosepx();
  static const int kPreClosePxFieldNumber = 15;
  ::google::protobuf::int64 preclosepx() const;
  void set_preclosepx(::google::protobuf::int64 value);

  // required int64 MaxPx = 16;
  bool has_maxpx() const;
  void clear_maxpx();
  static const int kMaxPxFieldNumber = 16;
  ::google::protobuf::int64 maxpx() const;
  void set_maxpx(::google::protobuf::int64 value);

  // required int64 MinPx = 17;
  bool has_minpx() const;
  void clear_minpx();
  static const int kMinPxFieldNumber = 17;
  ::google::protobuf::int64 minpx() const;
  void set_minpx(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:comm.StockBase)
 private:
  inline void set_has_htcode();
  inline void clear_has_htcode();
  inline void set_has_securityid();
  inline void clear_has_securityid();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_chispelling();
  inline void clear_has_chispelling();
  inline void set_has_englishname();
  inline void clear_has_englishname();
  inline void set_has_securityidsource();
  inline void clear_has_securityidsource();
  inline void set_has_securitytype();
  inline void clear_has_securitytype();
  inline void set_has_securitysubtype();
  inline void clear_has_securitysubtype();
  inline void set_has_listdate();
  inline void clear_has_listdate();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_outstandingshare();
  inline void clear_has_outstandingshare();
  inline void set_has_publicfloatsharequantity();
  inline void clear_has_publicfloatsharequantity();
  inline void set_has_mddate();
  inline void clear_has_mddate();
  inline void set_has_tradingphasecode();
  inline void clear_has_tradingphasecode();
  inline void set_has_preclosepx();
  inline void clear_has_preclosepx();
  inline void set_has_maxpx();
  inline void clear_has_maxpx();
  inline void set_has_minpx();
  inline void clear_has_minpx();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr htcode_;
  ::google::protobuf::internal::ArenaStringPtr securityid_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr chispelling_;
  ::google::protobuf::internal::ArenaStringPtr englishname_;
  ::google::protobuf::internal::ArenaStringPtr securitysubtype_;
  ::google::protobuf::internal::ArenaStringPtr listdate_;
  ::google::protobuf::internal::ArenaStringPtr currency_;
  ::google::protobuf::internal::ArenaStringPtr tradingphasecode_;
  ::google::protobuf::int32 securityidsource_;
  ::google::protobuf::int32 securitytype_;
  ::google::protobuf::int64 outstandingshare_;
  ::google::protobuf::int64 publicfloatsharequantity_;
  ::google::protobuf::int64 preclosepx_;
  ::google::protobuf::int64 maxpx_;
  ::google::protobuf::int64 minpx_;
  ::google::protobuf::int32 mddate_;
  friend void  protobuf_InitDefaults_stockBase_2eproto_impl();
  friend void  protobuf_AddDesc_stockBase_2eproto_impl();
  friend void protobuf_AssignDesc_stockBase_2eproto();
  friend void protobuf_ShutdownFile_stockBase_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<StockBase> StockBase_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StockBaseList

// repeated .comm.StockBase InfoList = 1;
inline int StockBaseList::infolist_size() const {
  return infolist_.size();
}
inline void StockBaseList::clear_infolist() {
  infolist_.Clear();
}
inline const ::comm::StockBase& StockBaseList::infolist(int index) const {
  // @@protoc_insertion_point(field_get:comm.StockBaseList.InfoList)
  return infolist_.Get(index);
}
inline ::comm::StockBase* StockBaseList::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:comm.StockBaseList.InfoList)
  return infolist_.Mutable(index);
}
inline ::comm::StockBase* StockBaseList::add_infolist() {
  // @@protoc_insertion_point(field_add:comm.StockBaseList.InfoList)
  return infolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::comm::StockBase >*
StockBaseList::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:comm.StockBaseList.InfoList)
  return &infolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::comm::StockBase >&
StockBaseList::infolist() const {
  // @@protoc_insertion_point(field_list:comm.StockBaseList.InfoList)
  return infolist_;
}

inline const StockBaseList* StockBaseList::internal_default_instance() {
  return &StockBaseList_default_instance_.get();
}
// -------------------------------------------------------------------

// StockBase

// required string HTCode = 1;
inline bool StockBase::has_htcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockBase::set_has_htcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockBase::clear_has_htcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockBase::clear_htcode() {
  htcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_htcode();
}
inline const ::std::string& StockBase::htcode() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.HTCode)
  return htcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_htcode(const ::std::string& value) {
  set_has_htcode();
  htcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.HTCode)
}
inline void StockBase::set_htcode(const char* value) {
  set_has_htcode();
  htcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.HTCode)
}
inline void StockBase::set_htcode(const char* value, size_t size) {
  set_has_htcode();
  htcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.HTCode)
}
inline ::std::string* StockBase::mutable_htcode() {
  set_has_htcode();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.HTCode)
  return htcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_htcode() {
  // @@protoc_insertion_point(field_release:comm.StockBase.HTCode)
  clear_has_htcode();
  return htcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_htcode(::std::string* htcode) {
  if (htcode != NULL) {
    set_has_htcode();
  } else {
    clear_has_htcode();
  }
  htcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), htcode);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.HTCode)
}

// required string SecurityID = 2;
inline bool StockBase::has_securityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockBase::set_has_securityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockBase::clear_has_securityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockBase::clear_securityid() {
  securityid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securityid();
}
inline const ::std::string& StockBase::securityid() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.SecurityID)
  return securityid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_securityid(const ::std::string& value) {
  set_has_securityid();
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.SecurityID)
}
inline void StockBase::set_securityid(const char* value) {
  set_has_securityid();
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.SecurityID)
}
inline void StockBase::set_securityid(const char* value, size_t size) {
  set_has_securityid();
  securityid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.SecurityID)
}
inline ::std::string* StockBase::mutable_securityid() {
  set_has_securityid();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.SecurityID)
  return securityid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_securityid() {
  // @@protoc_insertion_point(field_release:comm.StockBase.SecurityID)
  clear_has_securityid();
  return securityid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_securityid(::std::string* securityid) {
  if (securityid != NULL) {
    set_has_securityid();
  } else {
    clear_has_securityid();
  }
  securityid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securityid);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.SecurityID)
}

// required string Symbol = 3;
inline bool StockBase::has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockBase::set_has_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockBase::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockBase::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
inline const ::std::string& StockBase::symbol() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.Symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.Symbol)
}
inline void StockBase::set_symbol(const char* value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.Symbol)
}
inline void StockBase::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.Symbol)
}
inline ::std::string* StockBase::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.Symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_symbol() {
  // @@protoc_insertion_point(field_release:comm.StockBase.Symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.Symbol)
}

// required string ChiSpelling = 4;
inline bool StockBase::has_chispelling() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockBase::set_has_chispelling() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockBase::clear_has_chispelling() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockBase::clear_chispelling() {
  chispelling_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chispelling();
}
inline const ::std::string& StockBase::chispelling() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.ChiSpelling)
  return chispelling_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_chispelling(const ::std::string& value) {
  set_has_chispelling();
  chispelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.ChiSpelling)
}
inline void StockBase::set_chispelling(const char* value) {
  set_has_chispelling();
  chispelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.ChiSpelling)
}
inline void StockBase::set_chispelling(const char* value, size_t size) {
  set_has_chispelling();
  chispelling_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.ChiSpelling)
}
inline ::std::string* StockBase::mutable_chispelling() {
  set_has_chispelling();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.ChiSpelling)
  return chispelling_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_chispelling() {
  // @@protoc_insertion_point(field_release:comm.StockBase.ChiSpelling)
  clear_has_chispelling();
  return chispelling_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_chispelling(::std::string* chispelling) {
  if (chispelling != NULL) {
    set_has_chispelling();
  } else {
    clear_has_chispelling();
  }
  chispelling_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chispelling);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.ChiSpelling)
}

// required string EnglishName = 5;
inline bool StockBase::has_englishname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockBase::set_has_englishname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockBase::clear_has_englishname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockBase::clear_englishname() {
  englishname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_englishname();
}
inline const ::std::string& StockBase::englishname() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.EnglishName)
  return englishname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_englishname(const ::std::string& value) {
  set_has_englishname();
  englishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.EnglishName)
}
inline void StockBase::set_englishname(const char* value) {
  set_has_englishname();
  englishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.EnglishName)
}
inline void StockBase::set_englishname(const char* value, size_t size) {
  set_has_englishname();
  englishname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.EnglishName)
}
inline ::std::string* StockBase::mutable_englishname() {
  set_has_englishname();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.EnglishName)
  return englishname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_englishname() {
  // @@protoc_insertion_point(field_release:comm.StockBase.EnglishName)
  clear_has_englishname();
  return englishname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_englishname(::std::string* englishname) {
  if (englishname != NULL) {
    set_has_englishname();
  } else {
    clear_has_englishname();
  }
  englishname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), englishname);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.EnglishName)
}

// required int32 SecurityIDSource = 6;
inline bool StockBase::has_securityidsource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockBase::set_has_securityidsource() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockBase::clear_has_securityidsource() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockBase::clear_securityidsource() {
  securityidsource_ = 0;
  clear_has_securityidsource();
}
inline ::google::protobuf::int32 StockBase::securityidsource() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.SecurityIDSource)
  return securityidsource_;
}
inline void StockBase::set_securityidsource(::google::protobuf::int32 value) {
  set_has_securityidsource();
  securityidsource_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.SecurityIDSource)
}

// required int32 SecurityType = 7;
inline bool StockBase::has_securitytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockBase::set_has_securitytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockBase::clear_has_securitytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockBase::clear_securitytype() {
  securitytype_ = 0;
  clear_has_securitytype();
}
inline ::google::protobuf::int32 StockBase::securitytype() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.SecurityType)
  return securitytype_;
}
inline void StockBase::set_securitytype(::google::protobuf::int32 value) {
  set_has_securitytype();
  securitytype_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.SecurityType)
}

// required string SecuritySubType = 8;
inline bool StockBase::has_securitysubtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockBase::set_has_securitysubtype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockBase::clear_has_securitysubtype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockBase::clear_securitysubtype() {
  securitysubtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_securitysubtype();
}
inline const ::std::string& StockBase::securitysubtype() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.SecuritySubType)
  return securitysubtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_securitysubtype(const ::std::string& value) {
  set_has_securitysubtype();
  securitysubtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.SecuritySubType)
}
inline void StockBase::set_securitysubtype(const char* value) {
  set_has_securitysubtype();
  securitysubtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.SecuritySubType)
}
inline void StockBase::set_securitysubtype(const char* value, size_t size) {
  set_has_securitysubtype();
  securitysubtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.SecuritySubType)
}
inline ::std::string* StockBase::mutable_securitysubtype() {
  set_has_securitysubtype();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.SecuritySubType)
  return securitysubtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_securitysubtype() {
  // @@protoc_insertion_point(field_release:comm.StockBase.SecuritySubType)
  clear_has_securitysubtype();
  return securitysubtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_securitysubtype(::std::string* securitysubtype) {
  if (securitysubtype != NULL) {
    set_has_securitysubtype();
  } else {
    clear_has_securitysubtype();
  }
  securitysubtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitysubtype);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.SecuritySubType)
}

// required string ListDate = 9;
inline bool StockBase::has_listdate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockBase::set_has_listdate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockBase::clear_has_listdate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockBase::clear_listdate() {
  listdate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listdate();
}
inline const ::std::string& StockBase::listdate() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.ListDate)
  return listdate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_listdate(const ::std::string& value) {
  set_has_listdate();
  listdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.ListDate)
}
inline void StockBase::set_listdate(const char* value) {
  set_has_listdate();
  listdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.ListDate)
}
inline void StockBase::set_listdate(const char* value, size_t size) {
  set_has_listdate();
  listdate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.ListDate)
}
inline ::std::string* StockBase::mutable_listdate() {
  set_has_listdate();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.ListDate)
  return listdate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_listdate() {
  // @@protoc_insertion_point(field_release:comm.StockBase.ListDate)
  clear_has_listdate();
  return listdate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_listdate(::std::string* listdate) {
  if (listdate != NULL) {
    set_has_listdate();
  } else {
    clear_has_listdate();
  }
  listdate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listdate);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.ListDate)
}

// required string Currency = 10;
inline bool StockBase::has_currency() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockBase::set_has_currency() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockBase::clear_has_currency() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockBase::clear_currency() {
  currency_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_currency();
}
inline const ::std::string& StockBase::currency() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.Currency)
  return currency_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_currency(const ::std::string& value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.Currency)
}
inline void StockBase::set_currency(const char* value) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.Currency)
}
inline void StockBase::set_currency(const char* value, size_t size) {
  set_has_currency();
  currency_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.Currency)
}
inline ::std::string* StockBase::mutable_currency() {
  set_has_currency();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.Currency)
  return currency_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_currency() {
  // @@protoc_insertion_point(field_release:comm.StockBase.Currency)
  clear_has_currency();
  return currency_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_currency(::std::string* currency) {
  if (currency != NULL) {
    set_has_currency();
  } else {
    clear_has_currency();
  }
  currency_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.Currency)
}

// required int64 OutstandingShare = 11;
inline bool StockBase::has_outstandingshare() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockBase::set_has_outstandingshare() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockBase::clear_has_outstandingshare() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockBase::clear_outstandingshare() {
  outstandingshare_ = GOOGLE_LONGLONG(0);
  clear_has_outstandingshare();
}
inline ::google::protobuf::int64 StockBase::outstandingshare() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.OutstandingShare)
  return outstandingshare_;
}
inline void StockBase::set_outstandingshare(::google::protobuf::int64 value) {
  set_has_outstandingshare();
  outstandingshare_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.OutstandingShare)
}

// required int64 PublicFloatShareQuantity = 12;
inline bool StockBase::has_publicfloatsharequantity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockBase::set_has_publicfloatsharequantity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockBase::clear_has_publicfloatsharequantity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockBase::clear_publicfloatsharequantity() {
  publicfloatsharequantity_ = GOOGLE_LONGLONG(0);
  clear_has_publicfloatsharequantity();
}
inline ::google::protobuf::int64 StockBase::publicfloatsharequantity() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.PublicFloatShareQuantity)
  return publicfloatsharequantity_;
}
inline void StockBase::set_publicfloatsharequantity(::google::protobuf::int64 value) {
  set_has_publicfloatsharequantity();
  publicfloatsharequantity_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.PublicFloatShareQuantity)
}

// required int32 MDDate = 13;
inline bool StockBase::has_mddate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockBase::set_has_mddate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockBase::clear_has_mddate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockBase::clear_mddate() {
  mddate_ = 0;
  clear_has_mddate();
}
inline ::google::protobuf::int32 StockBase::mddate() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.MDDate)
  return mddate_;
}
inline void StockBase::set_mddate(::google::protobuf::int32 value) {
  set_has_mddate();
  mddate_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.MDDate)
}

// required string TradingPhaseCode = 14;
inline bool StockBase::has_tradingphasecode() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockBase::set_has_tradingphasecode() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockBase::clear_has_tradingphasecode() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockBase::clear_tradingphasecode() {
  tradingphasecode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tradingphasecode();
}
inline const ::std::string& StockBase::tradingphasecode() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.TradingPhaseCode)
  return tradingphasecode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_tradingphasecode(const ::std::string& value) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.StockBase.TradingPhaseCode)
}
inline void StockBase::set_tradingphasecode(const char* value) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.StockBase.TradingPhaseCode)
}
inline void StockBase::set_tradingphasecode(const char* value, size_t size) {
  set_has_tradingphasecode();
  tradingphasecode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.StockBase.TradingPhaseCode)
}
inline ::std::string* StockBase::mutable_tradingphasecode() {
  set_has_tradingphasecode();
  // @@protoc_insertion_point(field_mutable:comm.StockBase.TradingPhaseCode)
  return tradingphasecode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StockBase::release_tradingphasecode() {
  // @@protoc_insertion_point(field_release:comm.StockBase.TradingPhaseCode)
  clear_has_tradingphasecode();
  return tradingphasecode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StockBase::set_allocated_tradingphasecode(::std::string* tradingphasecode) {
  if (tradingphasecode != NULL) {
    set_has_tradingphasecode();
  } else {
    clear_has_tradingphasecode();
  }
  tradingphasecode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingphasecode);
  // @@protoc_insertion_point(field_set_allocated:comm.StockBase.TradingPhaseCode)
}

// required int64 PreClosePx = 15;
inline bool StockBase::has_preclosepx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockBase::set_has_preclosepx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockBase::clear_has_preclosepx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockBase::clear_preclosepx() {
  preclosepx_ = GOOGLE_LONGLONG(0);
  clear_has_preclosepx();
}
inline ::google::protobuf::int64 StockBase::preclosepx() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.PreClosePx)
  return preclosepx_;
}
inline void StockBase::set_preclosepx(::google::protobuf::int64 value) {
  set_has_preclosepx();
  preclosepx_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.PreClosePx)
}

// required int64 MaxPx = 16;
inline bool StockBase::has_maxpx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockBase::set_has_maxpx() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockBase::clear_has_maxpx() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockBase::clear_maxpx() {
  maxpx_ = GOOGLE_LONGLONG(0);
  clear_has_maxpx();
}
inline ::google::protobuf::int64 StockBase::maxpx() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.MaxPx)
  return maxpx_;
}
inline void StockBase::set_maxpx(::google::protobuf::int64 value) {
  set_has_maxpx();
  maxpx_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.MaxPx)
}

// required int64 MinPx = 17;
inline bool StockBase::has_minpx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StockBase::set_has_minpx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StockBase::clear_has_minpx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StockBase::clear_minpx() {
  minpx_ = GOOGLE_LONGLONG(0);
  clear_has_minpx();
}
inline ::google::protobuf::int64 StockBase::minpx() const {
  // @@protoc_insertion_point(field_get:comm.StockBase.MinPx)
  return minpx_;
}
inline void StockBase::set_minpx(::google::protobuf::int64 value) {
  set_has_minpx();
  minpx_ = value;
  // @@protoc_insertion_point(field_set:comm.StockBase.MinPx)
}

inline const StockBase* StockBase::internal_default_instance() {
  return &StockBase_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stockBase_2eproto__INCLUDED
