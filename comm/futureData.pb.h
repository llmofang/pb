// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: futureData.proto

#ifndef PROTOBUF_futureData_2eproto__INCLUDED
#define PROTOBUF_futureData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_futureData_2eproto();
void protobuf_AssignDesc_futureData_2eproto();
void protobuf_ShutdownFile_futureData_2eproto();

class FutureData;

// ===================================================================

class FutureData : public ::google::protobuf::Message {
 public:
  FutureData();
  virtual ~FutureData();

  FutureData(const FutureData& from);

  inline FutureData& operator=(const FutureData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FutureData& default_instance();

  void Swap(FutureData* other);

  // implements Message ----------------------------------------------

  FutureData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FutureData& from);
  void MergeFrom(const FutureData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string WindCode = 1;
  inline bool has_windcode() const;
  inline void clear_windcode();
  static const int kWindCodeFieldNumber = 1;
  inline const ::std::string& windcode() const;
  inline void set_windcode(const ::std::string& value);
  inline void set_windcode(const char* value);
  inline void set_windcode(const char* value, size_t size);
  inline ::std::string* mutable_windcode();
  inline ::std::string* release_windcode();
  inline void set_allocated_windcode(::std::string* windcode);

  // required string Code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // required int32 ActionDay = 3;
  inline bool has_actionday() const;
  inline void clear_actionday();
  static const int kActionDayFieldNumber = 3;
  inline ::google::protobuf::int32 actionday() const;
  inline void set_actionday(::google::protobuf::int32 value);

  // required int32 TradingDay = 4;
  inline bool has_tradingday() const;
  inline void clear_tradingday();
  static const int kTradingDayFieldNumber = 4;
  inline ::google::protobuf::int32 tradingday() const;
  inline void set_tradingday(::google::protobuf::int32 value);

  // required int32 Time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // required int32 Status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int64 PreOpenInterest = 7;
  inline bool has_preopeninterest() const;
  inline void clear_preopeninterest();
  static const int kPreOpenInterestFieldNumber = 7;
  inline ::google::protobuf::int64 preopeninterest() const;
  inline void set_preopeninterest(::google::protobuf::int64 value);

  // required uint32 PreClose = 8;
  inline bool has_preclose() const;
  inline void clear_preclose();
  static const int kPreCloseFieldNumber = 8;
  inline ::google::protobuf::uint32 preclose() const;
  inline void set_preclose(::google::protobuf::uint32 value);

  // required uint32 PreSettlePrice = 9;
  inline bool has_presettleprice() const;
  inline void clear_presettleprice();
  static const int kPreSettlePriceFieldNumber = 9;
  inline ::google::protobuf::uint32 presettleprice() const;
  inline void set_presettleprice(::google::protobuf::uint32 value);

  // required uint32 Open = 10;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 10;
  inline ::google::protobuf::uint32 open() const;
  inline void set_open(::google::protobuf::uint32 value);

  // required uint32 High = 11;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 11;
  inline ::google::protobuf::uint32 high() const;
  inline void set_high(::google::protobuf::uint32 value);

  // required uint32 Low = 12;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 12;
  inline ::google::protobuf::uint32 low() const;
  inline void set_low(::google::protobuf::uint32 value);

  // required uint32 Match = 13;
  inline bool has_match() const;
  inline void clear_match();
  static const int kMatchFieldNumber = 13;
  inline ::google::protobuf::uint32 match() const;
  inline void set_match(::google::protobuf::uint32 value);

  // required int64 Volume = 14;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 14;
  inline ::google::protobuf::int64 volume() const;
  inline void set_volume(::google::protobuf::int64 value);

  // required int64 Turnover = 15;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 15;
  inline ::google::protobuf::int64 turnover() const;
  inline void set_turnover(::google::protobuf::int64 value);

  // required int64 openInterest = 16;
  inline bool has_openinterest() const;
  inline void clear_openinterest();
  static const int kOpenInterestFieldNumber = 16;
  inline ::google::protobuf::int64 openinterest() const;
  inline void set_openinterest(::google::protobuf::int64 value);

  // required uint32 Close = 17;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 17;
  inline ::google::protobuf::uint32 close() const;
  inline void set_close(::google::protobuf::uint32 value);

  // required uint32 SettlePrice = 18;
  inline bool has_settleprice() const;
  inline void clear_settleprice();
  static const int kSettlePriceFieldNumber = 18;
  inline ::google::protobuf::uint32 settleprice() const;
  inline void set_settleprice(::google::protobuf::uint32 value);

  // required uint32 HighLimited = 19;
  inline bool has_highlimited() const;
  inline void clear_highlimited();
  static const int kHighLimitedFieldNumber = 19;
  inline ::google::protobuf::uint32 highlimited() const;
  inline void set_highlimited(::google::protobuf::uint32 value);

  // required uint32 LowLimited = 20;
  inline bool has_lowlimited() const;
  inline void clear_lowlimited();
  static const int kLowLimitedFieldNumber = 20;
  inline ::google::protobuf::uint32 lowlimited() const;
  inline void set_lowlimited(::google::protobuf::uint32 value);

  // required int32 PreDelta = 21;
  inline bool has_predelta() const;
  inline void clear_predelta();
  static const int kPreDeltaFieldNumber = 21;
  inline ::google::protobuf::int32 predelta() const;
  inline void set_predelta(::google::protobuf::int32 value);

  // required int32 CurrDelta = 22;
  inline bool has_currdelta() const;
  inline void clear_currdelta();
  static const int kCurrDeltaFieldNumber = 22;
  inline ::google::protobuf::int32 currdelta() const;
  inline void set_currdelta(::google::protobuf::int32 value);

  // repeated uint32 AskPrice = 23;
  inline int askprice_size() const;
  inline void clear_askprice();
  static const int kAskPriceFieldNumber = 23;
  inline ::google::protobuf::uint32 askprice(int index) const;
  inline void set_askprice(int index, ::google::protobuf::uint32 value);
  inline void add_askprice(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      askprice() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_askprice();

  // repeated uint32 AskVol = 24;
  inline int askvol_size() const;
  inline void clear_askvol();
  static const int kAskVolFieldNumber = 24;
  inline ::google::protobuf::uint32 askvol(int index) const;
  inline void set_askvol(int index, ::google::protobuf::uint32 value);
  inline void add_askvol(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      askvol() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_askvol();

  // repeated uint32 BidPrice = 25;
  inline int bidprice_size() const;
  inline void clear_bidprice();
  static const int kBidPriceFieldNumber = 25;
  inline ::google::protobuf::uint32 bidprice(int index) const;
  inline void set_bidprice(int index, ::google::protobuf::uint32 value);
  inline void add_bidprice(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bidprice() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bidprice();

  // repeated uint32 BidVol = 26;
  inline int bidvol_size() const;
  inline void clear_bidvol();
  static const int kBidVolFieldNumber = 26;
  inline ::google::protobuf::uint32 bidvol(int index) const;
  inline void set_bidvol(int index, ::google::protobuf::uint32 value);
  inline void add_bidvol(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bidvol() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bidvol();

  // required int32 AuctionPrice = 27;
  inline bool has_auctionprice() const;
  inline void clear_auctionprice();
  static const int kAuctionPriceFieldNumber = 27;
  inline ::google::protobuf::int32 auctionprice() const;
  inline void set_auctionprice(::google::protobuf::int32 value);

  // required int32 AuctionQty = 28;
  inline bool has_auctionqty() const;
  inline void clear_auctionqty();
  static const int kAuctionQtyFieldNumber = 28;
  inline ::google::protobuf::int32 auctionqty() const;
  inline void set_auctionqty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:comm.FutureData)
 private:
  inline void set_has_windcode();
  inline void clear_has_windcode();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_actionday();
  inline void clear_has_actionday();
  inline void set_has_tradingday();
  inline void clear_has_tradingday();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_preopeninterest();
  inline void clear_has_preopeninterest();
  inline void set_has_preclose();
  inline void clear_has_preclose();
  inline void set_has_presettleprice();
  inline void clear_has_presettleprice();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_match();
  inline void clear_has_match();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_openinterest();
  inline void clear_has_openinterest();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_settleprice();
  inline void clear_has_settleprice();
  inline void set_has_highlimited();
  inline void clear_has_highlimited();
  inline void set_has_lowlimited();
  inline void clear_has_lowlimited();
  inline void set_has_predelta();
  inline void clear_has_predelta();
  inline void set_has_currdelta();
  inline void clear_has_currdelta();
  inline void set_has_auctionprice();
  inline void clear_has_auctionprice();
  inline void set_has_auctionqty();
  inline void clear_has_auctionqty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* windcode_;
  ::std::string* code_;
  ::google::protobuf::int32 actionday_;
  ::google::protobuf::int32 tradingday_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int64 preopeninterest_;
  ::google::protobuf::uint32 preclose_;
  ::google::protobuf::uint32 presettleprice_;
  ::google::protobuf::uint32 open_;
  ::google::protobuf::uint32 high_;
  ::google::protobuf::uint32 low_;
  ::google::protobuf::uint32 match_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int64 turnover_;
  ::google::protobuf::int64 openinterest_;
  ::google::protobuf::uint32 close_;
  ::google::protobuf::uint32 settleprice_;
  ::google::protobuf::uint32 highlimited_;
  ::google::protobuf::uint32 lowlimited_;
  ::google::protobuf::int32 predelta_;
  ::google::protobuf::int32 currdelta_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > askprice_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > askvol_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bidprice_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bidvol_;
  ::google::protobuf::int32 auctionprice_;
  ::google::protobuf::int32 auctionqty_;
  friend void  protobuf_AddDesc_futureData_2eproto();
  friend void protobuf_AssignDesc_futureData_2eproto();
  friend void protobuf_ShutdownFile_futureData_2eproto();

  void InitAsDefaultInstance();
  static FutureData* default_instance_;
};
// ===================================================================


// ===================================================================

// FutureData

// required string WindCode = 1;
inline bool FutureData::has_windcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FutureData::set_has_windcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FutureData::clear_has_windcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FutureData::clear_windcode() {
  if (windcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    windcode_->clear();
  }
  clear_has_windcode();
}
inline const ::std::string& FutureData::windcode() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.WindCode)
  return *windcode_;
}
inline void FutureData::set_windcode(const ::std::string& value) {
  set_has_windcode();
  if (windcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    windcode_ = new ::std::string;
  }
  windcode_->assign(value);
  // @@protoc_insertion_point(field_set:comm.FutureData.WindCode)
}
inline void FutureData::set_windcode(const char* value) {
  set_has_windcode();
  if (windcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    windcode_ = new ::std::string;
  }
  windcode_->assign(value);
  // @@protoc_insertion_point(field_set_char:comm.FutureData.WindCode)
}
inline void FutureData::set_windcode(const char* value, size_t size) {
  set_has_windcode();
  if (windcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    windcode_ = new ::std::string;
  }
  windcode_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comm.FutureData.WindCode)
}
inline ::std::string* FutureData::mutable_windcode() {
  set_has_windcode();
  if (windcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    windcode_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comm.FutureData.WindCode)
  return windcode_;
}
inline ::std::string* FutureData::release_windcode() {
  clear_has_windcode();
  if (windcode_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = windcode_;
    windcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FutureData::set_allocated_windcode(::std::string* windcode) {
  if (windcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete windcode_;
  }
  if (windcode) {
    set_has_windcode();
    windcode_ = windcode;
  } else {
    clear_has_windcode();
    windcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comm.FutureData.WindCode)
}

// required string Code = 2;
inline bool FutureData::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FutureData::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FutureData::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FutureData::clear_code() {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& FutureData::code() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Code)
  return *code_;
}
inline void FutureData::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set:comm.FutureData.Code)
}
inline void FutureData::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(value);
  // @@protoc_insertion_point(field_set_char:comm.FutureData.Code)
}
inline void FutureData::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:comm.FutureData.Code)
}
inline ::std::string* FutureData::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    code_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:comm.FutureData.Code)
  return code_;
}
inline ::std::string* FutureData::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FutureData::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:comm.FutureData.Code)
}

// required int32 ActionDay = 3;
inline bool FutureData::has_actionday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FutureData::set_has_actionday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FutureData::clear_has_actionday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FutureData::clear_actionday() {
  actionday_ = 0;
  clear_has_actionday();
}
inline ::google::protobuf::int32 FutureData::actionday() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.ActionDay)
  return actionday_;
}
inline void FutureData::set_actionday(::google::protobuf::int32 value) {
  set_has_actionday();
  actionday_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.ActionDay)
}

// required int32 TradingDay = 4;
inline bool FutureData::has_tradingday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FutureData::set_has_tradingday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FutureData::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FutureData::clear_tradingday() {
  tradingday_ = 0;
  clear_has_tradingday();
}
inline ::google::protobuf::int32 FutureData::tradingday() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.TradingDay)
  return tradingday_;
}
inline void FutureData::set_tradingday(::google::protobuf::int32 value) {
  set_has_tradingday();
  tradingday_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.TradingDay)
}

// required int32 Time = 5;
inline bool FutureData::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FutureData::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FutureData::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FutureData::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 FutureData::time() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Time)
  return time_;
}
inline void FutureData::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Time)
}

// required int32 Status = 6;
inline bool FutureData::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FutureData::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FutureData::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FutureData::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 FutureData::status() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Status)
  return status_;
}
inline void FutureData::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Status)
}

// required int64 PreOpenInterest = 7;
inline bool FutureData::has_preopeninterest() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FutureData::set_has_preopeninterest() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FutureData::clear_has_preopeninterest() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FutureData::clear_preopeninterest() {
  preopeninterest_ = GOOGLE_LONGLONG(0);
  clear_has_preopeninterest();
}
inline ::google::protobuf::int64 FutureData::preopeninterest() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.PreOpenInterest)
  return preopeninterest_;
}
inline void FutureData::set_preopeninterest(::google::protobuf::int64 value) {
  set_has_preopeninterest();
  preopeninterest_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.PreOpenInterest)
}

// required uint32 PreClose = 8;
inline bool FutureData::has_preclose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FutureData::set_has_preclose() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FutureData::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FutureData::clear_preclose() {
  preclose_ = 0u;
  clear_has_preclose();
}
inline ::google::protobuf::uint32 FutureData::preclose() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.PreClose)
  return preclose_;
}
inline void FutureData::set_preclose(::google::protobuf::uint32 value) {
  set_has_preclose();
  preclose_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.PreClose)
}

// required uint32 PreSettlePrice = 9;
inline bool FutureData::has_presettleprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FutureData::set_has_presettleprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FutureData::clear_has_presettleprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FutureData::clear_presettleprice() {
  presettleprice_ = 0u;
  clear_has_presettleprice();
}
inline ::google::protobuf::uint32 FutureData::presettleprice() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.PreSettlePrice)
  return presettleprice_;
}
inline void FutureData::set_presettleprice(::google::protobuf::uint32 value) {
  set_has_presettleprice();
  presettleprice_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.PreSettlePrice)
}

// required uint32 Open = 10;
inline bool FutureData::has_open() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FutureData::set_has_open() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FutureData::clear_has_open() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FutureData::clear_open() {
  open_ = 0u;
  clear_has_open();
}
inline ::google::protobuf::uint32 FutureData::open() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Open)
  return open_;
}
inline void FutureData::set_open(::google::protobuf::uint32 value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Open)
}

// required uint32 High = 11;
inline bool FutureData::has_high() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FutureData::set_has_high() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FutureData::clear_has_high() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FutureData::clear_high() {
  high_ = 0u;
  clear_has_high();
}
inline ::google::protobuf::uint32 FutureData::high() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.High)
  return high_;
}
inline void FutureData::set_high(::google::protobuf::uint32 value) {
  set_has_high();
  high_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.High)
}

// required uint32 Low = 12;
inline bool FutureData::has_low() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FutureData::set_has_low() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FutureData::clear_has_low() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FutureData::clear_low() {
  low_ = 0u;
  clear_has_low();
}
inline ::google::protobuf::uint32 FutureData::low() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Low)
  return low_;
}
inline void FutureData::set_low(::google::protobuf::uint32 value) {
  set_has_low();
  low_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Low)
}

// required uint32 Match = 13;
inline bool FutureData::has_match() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FutureData::set_has_match() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FutureData::clear_has_match() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FutureData::clear_match() {
  match_ = 0u;
  clear_has_match();
}
inline ::google::protobuf::uint32 FutureData::match() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Match)
  return match_;
}
inline void FutureData::set_match(::google::protobuf::uint32 value) {
  set_has_match();
  match_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Match)
}

// required int64 Volume = 14;
inline bool FutureData::has_volume() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FutureData::set_has_volume() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FutureData::clear_has_volume() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FutureData::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 FutureData::volume() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Volume)
  return volume_;
}
inline void FutureData::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Volume)
}

// required int64 Turnover = 15;
inline bool FutureData::has_turnover() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FutureData::set_has_turnover() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FutureData::clear_has_turnover() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FutureData::clear_turnover() {
  turnover_ = GOOGLE_LONGLONG(0);
  clear_has_turnover();
}
inline ::google::protobuf::int64 FutureData::turnover() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Turnover)
  return turnover_;
}
inline void FutureData::set_turnover(::google::protobuf::int64 value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Turnover)
}

// required int64 openInterest = 16;
inline bool FutureData::has_openinterest() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FutureData::set_has_openinterest() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FutureData::clear_has_openinterest() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FutureData::clear_openinterest() {
  openinterest_ = GOOGLE_LONGLONG(0);
  clear_has_openinterest();
}
inline ::google::protobuf::int64 FutureData::openinterest() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.openInterest)
  return openinterest_;
}
inline void FutureData::set_openinterest(::google::protobuf::int64 value) {
  set_has_openinterest();
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.openInterest)
}

// required uint32 Close = 17;
inline bool FutureData::has_close() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FutureData::set_has_close() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FutureData::clear_has_close() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FutureData::clear_close() {
  close_ = 0u;
  clear_has_close();
}
inline ::google::protobuf::uint32 FutureData::close() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.Close)
  return close_;
}
inline void FutureData::set_close(::google::protobuf::uint32 value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.Close)
}

// required uint32 SettlePrice = 18;
inline bool FutureData::has_settleprice() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FutureData::set_has_settleprice() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FutureData::clear_has_settleprice() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FutureData::clear_settleprice() {
  settleprice_ = 0u;
  clear_has_settleprice();
}
inline ::google::protobuf::uint32 FutureData::settleprice() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.SettlePrice)
  return settleprice_;
}
inline void FutureData::set_settleprice(::google::protobuf::uint32 value) {
  set_has_settleprice();
  settleprice_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.SettlePrice)
}

// required uint32 HighLimited = 19;
inline bool FutureData::has_highlimited() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FutureData::set_has_highlimited() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FutureData::clear_has_highlimited() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FutureData::clear_highlimited() {
  highlimited_ = 0u;
  clear_has_highlimited();
}
inline ::google::protobuf::uint32 FutureData::highlimited() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.HighLimited)
  return highlimited_;
}
inline void FutureData::set_highlimited(::google::protobuf::uint32 value) {
  set_has_highlimited();
  highlimited_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.HighLimited)
}

// required uint32 LowLimited = 20;
inline bool FutureData::has_lowlimited() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FutureData::set_has_lowlimited() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FutureData::clear_has_lowlimited() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FutureData::clear_lowlimited() {
  lowlimited_ = 0u;
  clear_has_lowlimited();
}
inline ::google::protobuf::uint32 FutureData::lowlimited() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.LowLimited)
  return lowlimited_;
}
inline void FutureData::set_lowlimited(::google::protobuf::uint32 value) {
  set_has_lowlimited();
  lowlimited_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.LowLimited)
}

// required int32 PreDelta = 21;
inline bool FutureData::has_predelta() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void FutureData::set_has_predelta() {
  _has_bits_[0] |= 0x00100000u;
}
inline void FutureData::clear_has_predelta() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void FutureData::clear_predelta() {
  predelta_ = 0;
  clear_has_predelta();
}
inline ::google::protobuf::int32 FutureData::predelta() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.PreDelta)
  return predelta_;
}
inline void FutureData::set_predelta(::google::protobuf::int32 value) {
  set_has_predelta();
  predelta_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.PreDelta)
}

// required int32 CurrDelta = 22;
inline bool FutureData::has_currdelta() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void FutureData::set_has_currdelta() {
  _has_bits_[0] |= 0x00200000u;
}
inline void FutureData::clear_has_currdelta() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void FutureData::clear_currdelta() {
  currdelta_ = 0;
  clear_has_currdelta();
}
inline ::google::protobuf::int32 FutureData::currdelta() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.CurrDelta)
  return currdelta_;
}
inline void FutureData::set_currdelta(::google::protobuf::int32 value) {
  set_has_currdelta();
  currdelta_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.CurrDelta)
}

// repeated uint32 AskPrice = 23;
inline int FutureData::askprice_size() const {
  return askprice_.size();
}
inline void FutureData::clear_askprice() {
  askprice_.Clear();
}
inline ::google::protobuf::uint32 FutureData::askprice(int index) const {
  // @@protoc_insertion_point(field_get:comm.FutureData.AskPrice)
  return askprice_.Get(index);
}
inline void FutureData::set_askprice(int index, ::google::protobuf::uint32 value) {
  askprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.FutureData.AskPrice)
}
inline void FutureData::add_askprice(::google::protobuf::uint32 value) {
  askprice_.Add(value);
  // @@protoc_insertion_point(field_add:comm.FutureData.AskPrice)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FutureData::askprice() const {
  // @@protoc_insertion_point(field_list:comm.FutureData.AskPrice)
  return askprice_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FutureData::mutable_askprice() {
  // @@protoc_insertion_point(field_mutable_list:comm.FutureData.AskPrice)
  return &askprice_;
}

// repeated uint32 AskVol = 24;
inline int FutureData::askvol_size() const {
  return askvol_.size();
}
inline void FutureData::clear_askvol() {
  askvol_.Clear();
}
inline ::google::protobuf::uint32 FutureData::askvol(int index) const {
  // @@protoc_insertion_point(field_get:comm.FutureData.AskVol)
  return askvol_.Get(index);
}
inline void FutureData::set_askvol(int index, ::google::protobuf::uint32 value) {
  askvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.FutureData.AskVol)
}
inline void FutureData::add_askvol(::google::protobuf::uint32 value) {
  askvol_.Add(value);
  // @@protoc_insertion_point(field_add:comm.FutureData.AskVol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FutureData::askvol() const {
  // @@protoc_insertion_point(field_list:comm.FutureData.AskVol)
  return askvol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FutureData::mutable_askvol() {
  // @@protoc_insertion_point(field_mutable_list:comm.FutureData.AskVol)
  return &askvol_;
}

// repeated uint32 BidPrice = 25;
inline int FutureData::bidprice_size() const {
  return bidprice_.size();
}
inline void FutureData::clear_bidprice() {
  bidprice_.Clear();
}
inline ::google::protobuf::uint32 FutureData::bidprice(int index) const {
  // @@protoc_insertion_point(field_get:comm.FutureData.BidPrice)
  return bidprice_.Get(index);
}
inline void FutureData::set_bidprice(int index, ::google::protobuf::uint32 value) {
  bidprice_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.FutureData.BidPrice)
}
inline void FutureData::add_bidprice(::google::protobuf::uint32 value) {
  bidprice_.Add(value);
  // @@protoc_insertion_point(field_add:comm.FutureData.BidPrice)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FutureData::bidprice() const {
  // @@protoc_insertion_point(field_list:comm.FutureData.BidPrice)
  return bidprice_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FutureData::mutable_bidprice() {
  // @@protoc_insertion_point(field_mutable_list:comm.FutureData.BidPrice)
  return &bidprice_;
}

// repeated uint32 BidVol = 26;
inline int FutureData::bidvol_size() const {
  return bidvol_.size();
}
inline void FutureData::clear_bidvol() {
  bidvol_.Clear();
}
inline ::google::protobuf::uint32 FutureData::bidvol(int index) const {
  // @@protoc_insertion_point(field_get:comm.FutureData.BidVol)
  return bidvol_.Get(index);
}
inline void FutureData::set_bidvol(int index, ::google::protobuf::uint32 value) {
  bidvol_.Set(index, value);
  // @@protoc_insertion_point(field_set:comm.FutureData.BidVol)
}
inline void FutureData::add_bidvol(::google::protobuf::uint32 value) {
  bidvol_.Add(value);
  // @@protoc_insertion_point(field_add:comm.FutureData.BidVol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FutureData::bidvol() const {
  // @@protoc_insertion_point(field_list:comm.FutureData.BidVol)
  return bidvol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FutureData::mutable_bidvol() {
  // @@protoc_insertion_point(field_mutable_list:comm.FutureData.BidVol)
  return &bidvol_;
}

// required int32 AuctionPrice = 27;
inline bool FutureData::has_auctionprice() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void FutureData::set_has_auctionprice() {
  _has_bits_[0] |= 0x04000000u;
}
inline void FutureData::clear_has_auctionprice() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void FutureData::clear_auctionprice() {
  auctionprice_ = 0;
  clear_has_auctionprice();
}
inline ::google::protobuf::int32 FutureData::auctionprice() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.AuctionPrice)
  return auctionprice_;
}
inline void FutureData::set_auctionprice(::google::protobuf::int32 value) {
  set_has_auctionprice();
  auctionprice_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.AuctionPrice)
}

// required int32 AuctionQty = 28;
inline bool FutureData::has_auctionqty() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void FutureData::set_has_auctionqty() {
  _has_bits_[0] |= 0x08000000u;
}
inline void FutureData::clear_has_auctionqty() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void FutureData::clear_auctionqty() {
  auctionqty_ = 0;
  clear_has_auctionqty();
}
inline ::google::protobuf::int32 FutureData::auctionqty() const {
  // @@protoc_insertion_point(field_get:comm.FutureData.AuctionQty)
  return auctionqty_;
}
inline void FutureData::set_auctionqty(::google::protobuf::int32 value) {
  set_has_auctionqty();
  auctionqty_ = value;
  // @@protoc_insertion_point(field_set:comm.FutureData.AuctionQty)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_futureData_2eproto__INCLUDED
