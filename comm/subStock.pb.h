// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subStock.proto

#ifndef PROTOBUF_subStock_2eproto__INCLUDED
#define PROTOBUF_subStock_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace comm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_subStock_2eproto();
void protobuf_InitDefaults_subStock_2eproto();
void protobuf_AssignDesc_subStock_2eproto();
void protobuf_ShutdownFile_subStock_2eproto();

class SubStock;

// ===================================================================

class SubStock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:comm.SubStock) */ {
 public:
  SubStock();
  virtual ~SubStock();

  SubStock(const SubStock& from);

  inline SubStock& operator=(const SubStock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubStock& default_instance();

  static const SubStock* internal_default_instance();

  void Swap(SubStock* other);

  // implements Message ----------------------------------------------

  inline SubStock* New() const { return New(NULL); }

  SubStock* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubStock& from);
  void MergeFrom(const SubStock& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubStock* other);
  void UnsafeMergeFrom(const SubStock& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes stock_code = 1;
  bool has_stock_code() const;
  void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  const ::std::string& stock_code() const;
  void set_stock_code(const ::std::string& value);
  void set_stock_code(const char* value);
  void set_stock_code(const void* value, size_t size);
  ::std::string* mutable_stock_code();
  ::std::string* release_stock_code();
  void set_allocated_stock_code(::std::string* stock_code);

  // required bool sub_flag = 2;
  bool has_sub_flag() const;
  void clear_sub_flag();
  static const int kSubFlagFieldNumber = 2;
  bool sub_flag() const;
  void set_sub_flag(bool value);

  // @@protoc_insertion_point(class_scope:comm.SubStock)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_sub_flag();
  inline void clear_has_sub_flag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stock_code_;
  bool sub_flag_;
  friend void  protobuf_InitDefaults_subStock_2eproto_impl();
  friend void  protobuf_AddDesc_subStock_2eproto_impl();
  friend void protobuf_AssignDesc_subStock_2eproto();
  friend void protobuf_ShutdownFile_subStock_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SubStock> SubStock_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SubStock

// required bytes stock_code = 1;
inline bool SubStock::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubStock::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubStock::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubStock::clear_stock_code() {
  stock_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stock_code();
}
inline const ::std::string& SubStock::stock_code() const {
  // @@protoc_insertion_point(field_get:comm.SubStock.stock_code)
  return stock_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubStock::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:comm.SubStock.stock_code)
}
inline void SubStock::set_stock_code(const char* value) {
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:comm.SubStock.stock_code)
}
inline void SubStock::set_stock_code(const void* value, size_t size) {
  set_has_stock_code();
  stock_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:comm.SubStock.stock_code)
}
inline ::std::string* SubStock::mutable_stock_code() {
  set_has_stock_code();
  // @@protoc_insertion_point(field_mutable:comm.SubStock.stock_code)
  return stock_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubStock::release_stock_code() {
  // @@protoc_insertion_point(field_release:comm.SubStock.stock_code)
  clear_has_stock_code();
  return stock_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubStock::set_allocated_stock_code(::std::string* stock_code) {
  if (stock_code != NULL) {
    set_has_stock_code();
  } else {
    clear_has_stock_code();
  }
  stock_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stock_code);
  // @@protoc_insertion_point(field_set_allocated:comm.SubStock.stock_code)
}

// required bool sub_flag = 2;
inline bool SubStock::has_sub_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubStock::set_has_sub_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubStock::clear_has_sub_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubStock::clear_sub_flag() {
  sub_flag_ = false;
  clear_has_sub_flag();
}
inline bool SubStock::sub_flag() const {
  // @@protoc_insertion_point(field_get:comm.SubStock.sub_flag)
  return sub_flag_;
}
inline void SubStock::set_sub_flag(bool value) {
  set_has_sub_flag();
  sub_flag_ = value;
  // @@protoc_insertion_point(field_set:comm.SubStock.sub_flag)
}

inline const SubStock* SubStock::internal_default_instance() {
  return &SubStock_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace comm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_subStock_2eproto__INCLUDED
